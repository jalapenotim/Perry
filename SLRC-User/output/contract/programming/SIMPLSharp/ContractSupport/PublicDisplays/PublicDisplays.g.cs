//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by CrestronConstruct.
//     AppHost:     2.601.10.0
//     UI Plugin:   1.4201.17.0
//
//     Project:     SLRC-User
//     Version:     1.0.0.0
//     Sdk:         CH5:2.16.0
//     Strategy:    Modern
//     IndexOnly:   False
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq;
using Crestron.SimplSharp;
using Crestron.SimplSharpPro;
using Crestron.SimplSharpPro.DeviceSupport;
using SLRCUser;

namespace SLRCUser.PublicDisplays
{

    /// <summary>
    /// Public Displays
    /// </summary>
    public partial interface IPublicDisplays 
    {
        object UserObject { get; set; }

        /// <summary>
        /// Event RS-232 Button.Press (from panel to Control System)
        /// </summary>
        event EventHandler<UIEventArgs> RS232Button_PressEvent;

        /// <summary>
        /// RS-232 Button.Visibility Feedback
        /// </summary>
        /// <param name="callback">The bool delegate to update the panel.</param>
        void RS232Button_Visibility_fb(PublicDisplaysBoolInputSigDelegate callback);

        /// <summary>
        /// RS-232 Button.Visibility Feedback
        /// </summary>
        /// <param name="digital">The bool to update the panel.</param>
        void RS232Button_Visibility_fb(bool digital);

        /// <summary>
        /// Public Displays.VisibilityJoin Feedback
        /// </summary>
        /// <param name="callback">The bool delegate to update the panel.</param>
        void PublicDisplays_VisibilityJoin(PublicDisplaysBoolInputSigDelegate callback);

        /// <summary>
        /// Public Displays.VisibilityJoin Feedback
        /// </summary>
        /// <param name="digital">The bool to update the panel.</param>
        void PublicDisplays_VisibilityJoin(bool digital);

        /// <summary>
        /// ComplexComponent Header
        /// </summary>
        SLRCUser.PublicDisplays.IHeader Header { get; }

        /// <summary>
        /// ComplexComponent Public Display 3rd Fl
        /// </summary>
        SLRCUser.PublicDisplays.IPublicDisplay3rdFl PublicDisplay3rdFl { get; }

        /// <summary>
        /// ComplexComponent Page Select Tab Button
        /// </summary>
        SLRCUser.PublicDisplays.IPageSelectTabButton PageSelectTabButton { get; }

        /// <summary>
        /// ComplexComponent Public Display Lower Level
        /// </summary>
        SLRCUser.PublicDisplays.IPublicDisplayLowerLevel PublicDisplayLowerLevel { get; }

        /// <summary>
        /// ComplexComponent Public Display Routing
        /// </summary>
        SLRCUser.PublicDisplays.IPublicDisplayRouting PublicDisplayRouting { get; }

        /// <summary>
        /// ComplexComponent Public Display 1st Floor
        /// </summary>
        SLRCUser.PublicDisplays.IPublicDisplay1stFloor PublicDisplay1stFloor { get; }

        /// <summary>
        /// ComplexComponent Building Mute
        /// </summary>
        SLRCUser.PublicDisplays.IBuildingMute BuildingMute { get; }

        /// <summary>
        /// ComplexComponent Public Display 2nd Floor
        /// </summary>
        SLRCUser.PublicDisplays.IPublicDisplay2ndFloor PublicDisplay2ndFloor { get; }
    }

    /// <summary>
    /// Digital callback used in feedback events.
    /// </summary>
    /// <param name="boolInputSig">The <see cref="BoolInputSig"/> joinInfo data.</param>
    /// <param name="publicdisplays">The <see cref="IPublicDisplays"/> on which to apply the feedback.</param>
    public delegate void PublicDisplaysBoolInputSigDelegate(BoolInputSig boolInputSig, IPublicDisplays publicdisplays);

    /// <summary>
    /// Public Displays
    /// </summary>
    internal partial class PublicDisplays : IPublicDisplays, IDisposable
    {
        #region Standard CH5 Component members

        private ComponentMediator ComponentMediator { get; set; }

        public object UserObject { get; set; }

        /// <summary>
        /// Gets the ControlJoinId a.k.a. SmartObjectId.  This Id identifies the extender symbol.
        /// </summary>
        public uint ControlJoinId { get; private set; }

        private IList<BasicTriListWithSmartObject> _devices;

        /// <summary>
        /// Gets the list of devices.
        /// </summary>
        public IList<BasicTriListWithSmartObject> Devices { get { return _devices; } }

        #endregion

        #region Joins

        private static class Joins
        {
            /// <summary>
            /// Digital signals,
            /// </summary>
            internal static class Booleans
            {
                /// <summary>
                /// Output or Event digital joinInfo from panel to Control System: PublicDisplays.RS232Button.Press
                /// RS-232 Button.Press
                /// </summary>
                public const uint RS232Button_PressEvent = 2;


                /// <summary>
                /// Input or Feedback digital joinInfo from Control System to panel: PublicDisplays.RS232Button.Visibility_fb
                /// RS-232 Button.Visibility
                /// </summary>
                public const uint RS232Button_Visibility_fbState = 1;

                /// <summary>
                /// Input or Feedback digital joinInfo from Control System to panel: PublicDisplaysVisibilityJoin
                /// Public Displays.VisibilityJoin
                /// </summary>
                public const uint PublicDisplays_VisibilityJoinState = 2;

            }
        }

        #endregion

        #region Construction and Initialization

        /// <summary>
        /// Initializes a new instance of the <see cref="PublicDisplays"/> component class.
        /// </summary>
        /// <param name="componentMediator">The <see cref="ComponentMediator"/> used to instantiate the component.</param>
        /// <param name="controlJoinId">The SmartObjectId at which to create the component.</param>
        /// <param name="itemCount">The number of items.</param>
        internal PublicDisplays(ComponentMediator componentMediator, uint controlJoinId, uint? itemCount)
        {
            ComponentMediator = componentMediator;
            Initialize(controlJoinId, itemCount);
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PublicDisplays"/> component class.
        /// </summary>
        /// <param name="componentMediator">The <see cref="ComponentMediator"/> used to instantiate the component.</param>
        /// <param name="controlJoinId">The SmartObjectId at which to create the component.</param>
        internal PublicDisplays(ComponentMediator componentMediator, uint controlJoinId) : this(componentMediator, controlJoinId, null)
        {
        }

        /// <summary>
        /// Initializes a new instance with default itemCount.
        /// </summary>
        /// <param name="controlJoinId">The SmartObjectId at which to create the component.</param>
        private void Initialize(uint controlJoinId)
        {
            Initialize(controlJoinId, null);
        }

        private Dictionary<string, Indexes> _indexLookup = new Dictionary<string, Indexes>();

        /// <summary>
        /// Initializes a new instance of the <see cref="PublicDisplays"/> component class.
        /// </summary>
        /// <param name="controlJoinId">The SmartObjectId at which to create the component.</param>
        /// <param name="itemCount">The number of items.</param>
        private void Initialize(uint controlJoinId, uint? itemCount)
        {
            ControlJoinId = controlJoinId; 
 
            _devices = new List<BasicTriListWithSmartObject>(); 
 
            ComponentMediator.ConfigureBooleanEvent(controlJoinId, Joins.Booleans.RS232Button_PressEvent, onRS232Button_Press);
            Header = new SLRCUser.PublicDisplays.Header(ComponentMediator, 62);
            PublicDisplay3rdFl = new SLRCUser.PublicDisplays.PublicDisplay3rdFl(ComponentMediator, 63);
            PageSelectTabButton = new SLRCUser.PublicDisplays.PageSelectTabButton(ComponentMediator, 64);
            PublicDisplayLowerLevel = new SLRCUser.PublicDisplays.PublicDisplayLowerLevel(ComponentMediator, 65);
            PublicDisplayRouting = new SLRCUser.PublicDisplays.PublicDisplayRouting(ComponentMediator, 66);
            PublicDisplay1stFloor = new SLRCUser.PublicDisplays.PublicDisplay1stFloor(ComponentMediator, 68);
            BuildingMute = new SLRCUser.PublicDisplays.BuildingMute(ComponentMediator, 69);
            PublicDisplay2ndFloor = new SLRCUser.PublicDisplays.PublicDisplay2ndFloor(ComponentMediator, 70);
        }

        public void AddDevice(BasicTriListWithSmartObject device)
        {
            Devices.Add(device);
            ComponentMediator.HookSmartObjectEvents(device.SmartObjects[ControlJoinId]);

            ((SLRCUser.PublicDisplays.Header)Header).AddDevice(device);

            ((SLRCUser.PublicDisplays.PublicDisplay3rdFl)PublicDisplay3rdFl).AddDevice(device);

            ((SLRCUser.PublicDisplays.PageSelectTabButton)PageSelectTabButton).AddDevice(device);

            ((SLRCUser.PublicDisplays.PublicDisplayLowerLevel)PublicDisplayLowerLevel).AddDevice(device);

            ((SLRCUser.PublicDisplays.PublicDisplayRouting)PublicDisplayRouting).AddDevice(device);

            ((SLRCUser.PublicDisplays.PublicDisplay1stFloor)PublicDisplay1stFloor).AddDevice(device);

            ((SLRCUser.PublicDisplays.BuildingMute)BuildingMute).AddDevice(device);

            ((SLRCUser.PublicDisplays.PublicDisplay2ndFloor)PublicDisplay2ndFloor).AddDevice(device);
        }

        public void RemoveDevice(BasicTriListWithSmartObject device)
        {
            Devices.Remove(device);
            ComponentMediator.UnHookSmartObjectEvents(device.SmartObjects[ControlJoinId]);

            ((SLRCUser.PublicDisplays.Header)Header).RemoveDevice(device);

            ((SLRCUser.PublicDisplays.PublicDisplay3rdFl)PublicDisplay3rdFl).RemoveDevice(device);

            ((SLRCUser.PublicDisplays.PageSelectTabButton)PageSelectTabButton).RemoveDevice(device);

            ((SLRCUser.PublicDisplays.PublicDisplayLowerLevel)PublicDisplayLowerLevel).RemoveDevice(device);

            ((SLRCUser.PublicDisplays.PublicDisplayRouting)PublicDisplayRouting).RemoveDevice(device);

            ((SLRCUser.PublicDisplays.PublicDisplay1stFloor)PublicDisplay1stFloor).RemoveDevice(device);

            ((SLRCUser.PublicDisplays.BuildingMute)BuildingMute).RemoveDevice(device);

            ((SLRCUser.PublicDisplays.PublicDisplay2ndFloor)PublicDisplay2ndFloor).RemoveDevice(device);
        }

        #endregion

        #region CH5 Contract

        /// <inheritdoc/>
        public event EventHandler<UIEventArgs> RS232Button_PressEvent;
        private void onRS232Button_Press(SmartObjectEventArgs eventArgs)
        {
            EventHandler<UIEventArgs> handler = RS232Button_PressEvent;
            if (handler != null)
                handler(this, UIEventArgs.CreateEventArgs(eventArgs));
        }

        /// <inheritdoc/>
        public void PublicDisplays_VisibilityJoin(PublicDisplaysBoolInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].BooleanInput[Joins.Booleans.PublicDisplays_VisibilityJoinState], this);
            }
        }

        /// <inheritdoc/>
        public void PublicDisplays_VisibilityJoin(bool digital)
        {
            PublicDisplays_VisibilityJoin((sig, component) => sig.BoolValue = digital);
        }
        /// <inheritdoc/>
        public void RS232Button_Visibility_fb(PublicDisplaysBoolInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].BooleanInput[Joins.Booleans.RS232Button_Visibility_fbState], this);
            }
        }

        /// <inheritdoc/>
        public void RS232Button_Visibility_fb(bool digital)
        {
            RS232Button_Visibility_fb((sig, component) => sig.BoolValue = digital);
        }

        /// <summary>
        /// ComplexComponent Header
        /// </summary>
        public SLRCUser.PublicDisplays.IHeader Header { get; private set; }

        /// <summary>
        /// ComplexComponent PublicDisplay3rdFl
        /// </summary>
        public SLRCUser.PublicDisplays.IPublicDisplay3rdFl PublicDisplay3rdFl { get; private set; }

        /// <summary>
        /// ComplexComponent Page Select Tab Button
        /// </summary>
        public SLRCUser.PublicDisplays.IPageSelectTabButton PageSelectTabButton { get; private set; }

        /// <summary>
        /// ComplexComponent PublicDisplayLowerLevel
        /// </summary>
        public SLRCUser.PublicDisplays.IPublicDisplayLowerLevel PublicDisplayLowerLevel { get; private set; }

        /// <summary>
        /// ComplexComponent PublicDisplayRouting
        /// </summary>
        public SLRCUser.PublicDisplays.IPublicDisplayRouting PublicDisplayRouting { get; private set; }

        /// <summary>
        /// ComplexComponent PublicDisplay1stFloor
        /// </summary>
        public SLRCUser.PublicDisplays.IPublicDisplay1stFloor PublicDisplay1stFloor { get; private set; }

        /// <summary>
        /// ComplexComponent BuildingMute
        /// </summary>
        public SLRCUser.PublicDisplays.IBuildingMute BuildingMute { get; private set; }

        /// <summary>
        /// ComplexComponent PublicDisplay2ndFloor
        /// </summary>
        public SLRCUser.PublicDisplays.IPublicDisplay2ndFloor PublicDisplay2ndFloor { get; private set; }

        #endregion

        #region Overrides

        public override int GetHashCode()
        {
            return (int)ControlJoinId;
        }

        public override string ToString()
        {
            return string.Format("Contract: {0} Component: {1} HashCode: {2} {3}", "PublicDisplays", GetType().Name, GetHashCode(), UserObject != null ? "UserObject: " + UserObject : null);
        }

        #endregion

        #region IDisposable

        public bool IsDisposed { get; set; }

        public void Dispose()
        {
            if (IsDisposed)
                return;

            IsDisposed = true;

            RS232Button_PressEvent = null;
        }

        #endregion
    }
}
