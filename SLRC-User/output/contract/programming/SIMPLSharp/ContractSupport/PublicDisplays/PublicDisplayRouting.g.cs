//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by CrestronConstruct.
//     AppHost:     2.601.10.0
//     UI Plugin:   1.4201.17.0
//
//     Project:     SLRC-User
//     Version:     1.0.0.0
//     Sdk:         CH5:2.16.0
//     Strategy:    Modern
//     IndexOnly:   False
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq;
using Crestron.SimplSharp;
using Crestron.SimplSharpPro;
using Crestron.SimplSharpPro.DeviceSupport;
using SLRCUser;

namespace SLRCUser.PublicDisplays
{

    /// <summary>
    /// PublicDisplayRouting
    /// </summary>
    public partial interface IPublicDisplayRouting 
    {
        object UserObject { get; set; }

        /// <summary>
        /// Event PublicDisplays.PublicDisplayRouting.Display 10 Button.Press (from panel to Control System)
        /// </summary>
        event EventHandler<UIEventArgs> Display10Button_PressEvent;

        /// <summary>
        /// Event PublicDisplays.PublicDisplayRouting.Display 11 Button.Press (from panel to Control System)
        /// </summary>
        event EventHandler<UIEventArgs> Display11Button_PressEvent;

        /// <summary>
        /// Event PublicDisplays.PublicDisplayRouting.Display 12 Button.Press (from panel to Control System)
        /// </summary>
        event EventHandler<UIEventArgs> Display12Button_PressEvent;

        /// <summary>
        /// Event PublicDisplays.PublicDisplayRouting.Display 13 Button.Press (from panel to Control System)
        /// </summary>
        event EventHandler<UIEventArgs> Display13Button_PressEvent;

        /// <summary>
        /// Event PublicDisplays.PublicDisplayRouting.Display 14 Button.Press (from panel to Control System)
        /// </summary>
        event EventHandler<UIEventArgs> Display14Button_PressEvent;

        /// <summary>
        /// Event PublicDisplays.PublicDisplayRouting.Display 15 Button.Press (from panel to Control System)
        /// </summary>
        event EventHandler<UIEventArgs> Display15Button_PressEvent;

        /// <summary>
        /// Event PublicDisplays.PublicDisplayRouting.Display 16 Button.Press (from panel to Control System)
        /// </summary>
        event EventHandler<UIEventArgs> Display16Button_PressEvent;

        /// <summary>
        /// Event PublicDisplays.PublicDisplayRouting.Display 17 Button.Press (from panel to Control System)
        /// </summary>
        event EventHandler<UIEventArgs> Display17Button_PressEvent;

        /// <summary>
        /// Event PublicDisplays.PublicDisplayRouting.Display 18 Button.Press (from panel to Control System)
        /// </summary>
        event EventHandler<UIEventArgs> Display18Button_PressEvent;

        /// <summary>
        /// Event PublicDisplays.PublicDisplayRouting.Display 19 Button.Press (from panel to Control System)
        /// </summary>
        event EventHandler<UIEventArgs> Display19Button_PressEvent;

        /// <summary>
        /// Event PublicDisplays.PublicDisplayRouting.Display 1 Button.Press (from panel to Control System)
        /// </summary>
        event EventHandler<UIEventArgs> Display1Button_PressEvent;

        /// <summary>
        /// Event PublicDisplays.PublicDisplayRouting.Display 20 Button.Press (from panel to Control System)
        /// </summary>
        event EventHandler<UIEventArgs> Display20Button_PressEvent;

        /// <summary>
        /// Event PublicDisplays.PublicDisplayRouting.Display 2 Button.Press (from panel to Control System)
        /// </summary>
        event EventHandler<UIEventArgs> Display2Button_PressEvent;

        /// <summary>
        /// Event PublicDisplays.PublicDisplayRouting.Display 3 Button.Press (from panel to Control System)
        /// </summary>
        event EventHandler<UIEventArgs> Display3Button_PressEvent;

        /// <summary>
        /// Event PublicDisplays.PublicDisplayRouting.Display 4 Button.Press (from panel to Control System)
        /// </summary>
        event EventHandler<UIEventArgs> Display4Button_PressEvent;

        /// <summary>
        /// Event PublicDisplays.PublicDisplayRouting.Display 5 Button.Press (from panel to Control System)
        /// </summary>
        event EventHandler<UIEventArgs> Display5Button_PressEvent;

        /// <summary>
        /// Event PublicDisplays.PublicDisplayRouting.Display 6 Button.Press (from panel to Control System)
        /// </summary>
        event EventHandler<UIEventArgs> Display6Button_PressEvent;

        /// <summary>
        /// Event PublicDisplays.PublicDisplayRouting.Display 7 Button.Press (from panel to Control System)
        /// </summary>
        event EventHandler<UIEventArgs> Display7Button_PressEvent;

        /// <summary>
        /// Event PublicDisplays.PublicDisplayRouting.Display 8 Button.Press (from panel to Control System)
        /// </summary>
        event EventHandler<UIEventArgs> Display8Button_PressEvent;

        /// <summary>
        /// Event PublicDisplays.PublicDisplayRouting.Display 9 Button.Press (from panel to Control System)
        /// </summary>
        event EventHandler<UIEventArgs> Display9Button_PressEvent;

        /// <summary>
        /// Event PublicDisplays.PublicDisplayRouting.Source 1 Button.Press (from panel to Control System)
        /// </summary>
        event EventHandler<UIEventArgs> Source1Button_PressEvent;

        /// <summary>
        /// Event PublicDisplays.PublicDisplayRouting.Source 2 Button.Press (from panel to Control System)
        /// </summary>
        event EventHandler<UIEventArgs> Source2Button_PressEvent;

        /// <summary>
        /// Event PublicDisplays.PublicDisplayRouting.Source 3 Button.Press (from panel to Control System)
        /// </summary>
        event EventHandler<UIEventArgs> Source3Button_PressEvent;

        /// <summary>
        /// Event PublicDisplays.PublicDisplayRouting.Source 4 Button.Press (from panel to Control System)
        /// </summary>
        event EventHandler<UIEventArgs> Source4Button_PressEvent;

        /// <summary>
        /// Event PublicDisplays.PublicDisplayRouting.Source 5 Button.Press (from panel to Control System)
        /// </summary>
        event EventHandler<UIEventArgs> Source5Button_PressEvent;

        /// <summary>
        /// Event PublicDisplays.PublicDisplayRouting.Source 6 Button.Press (from panel to Control System)
        /// </summary>
        event EventHandler<UIEventArgs> Source6Button_PressEvent;

        /// <summary>
        /// Event PublicDisplays.PublicDisplayRouting.Source 7 Button.Press (from panel to Control System)
        /// </summary>
        event EventHandler<UIEventArgs> Source7Button_PressEvent;

        /// <summary>
        /// Event PublicDisplays.PublicDisplayRouting.Source 8 Button.Press (from panel to Control System)
        /// </summary>
        event EventHandler<UIEventArgs> Source8Button_PressEvent;

        /// <summary>
        /// Event PublicDisplays.PublicDisplayRouting.Source 9 Button.Press (from panel to Control System)
        /// </summary>
        event EventHandler<UIEventArgs> Source9Button_PressEvent;

        /// <summary>
        /// Event PublicDisplays.PublicDisplayRouting.Source Clear Button.Press (from panel to Control System)
        /// </summary>
        event EventHandler<UIEventArgs> SourceClearButton_PressEvent;

        /// <summary>
        /// PublicDisplays.PublicDisplayRouting.Display 10 Button.Visibility Feedback
        /// </summary>
        /// <param name="callback">The bool delegate to update the panel.</param>
        void Display10Button_Visibility_fb(PublicDisplayRoutingBoolInputSigDelegate callback);

        /// <summary>
        /// PublicDisplays.PublicDisplayRouting.Display 10 Button.Visibility Feedback
        /// </summary>
        /// <param name="digital">The bool to update the panel.</param>
        void Display10Button_Visibility_fb(bool digital);

        /// <summary>
        /// PublicDisplays.PublicDisplayRouting.Display 11 Button.Visibility Feedback
        /// </summary>
        /// <param name="callback">The bool delegate to update the panel.</param>
        void Display11Button_Visibility_fb(PublicDisplayRoutingBoolInputSigDelegate callback);

        /// <summary>
        /// PublicDisplays.PublicDisplayRouting.Display 11 Button.Visibility Feedback
        /// </summary>
        /// <param name="digital">The bool to update the panel.</param>
        void Display11Button_Visibility_fb(bool digital);

        /// <summary>
        /// PublicDisplays.PublicDisplayRouting.Display 12 Button.Visibility Feedback
        /// </summary>
        /// <param name="callback">The bool delegate to update the panel.</param>
        void Display12Button_Visibility_fb(PublicDisplayRoutingBoolInputSigDelegate callback);

        /// <summary>
        /// PublicDisplays.PublicDisplayRouting.Display 12 Button.Visibility Feedback
        /// </summary>
        /// <param name="digital">The bool to update the panel.</param>
        void Display12Button_Visibility_fb(bool digital);

        /// <summary>
        /// PublicDisplays.PublicDisplayRouting.Display 13 Button.Visibility Feedback
        /// </summary>
        /// <param name="callback">The bool delegate to update the panel.</param>
        void Display13Button_Visibility_fb(PublicDisplayRoutingBoolInputSigDelegate callback);

        /// <summary>
        /// PublicDisplays.PublicDisplayRouting.Display 13 Button.Visibility Feedback
        /// </summary>
        /// <param name="digital">The bool to update the panel.</param>
        void Display13Button_Visibility_fb(bool digital);

        /// <summary>
        /// PublicDisplays.PublicDisplayRouting.Display 14 Button.Visibility Feedback
        /// </summary>
        /// <param name="callback">The bool delegate to update the panel.</param>
        void Display14Button_Visibility_fb(PublicDisplayRoutingBoolInputSigDelegate callback);

        /// <summary>
        /// PublicDisplays.PublicDisplayRouting.Display 14 Button.Visibility Feedback
        /// </summary>
        /// <param name="digital">The bool to update the panel.</param>
        void Display14Button_Visibility_fb(bool digital);

        /// <summary>
        /// PublicDisplays.PublicDisplayRouting.Display 15 Button.Visibility Feedback
        /// </summary>
        /// <param name="callback">The bool delegate to update the panel.</param>
        void Display15Button_Visibility_fb(PublicDisplayRoutingBoolInputSigDelegate callback);

        /// <summary>
        /// PublicDisplays.PublicDisplayRouting.Display 15 Button.Visibility Feedback
        /// </summary>
        /// <param name="digital">The bool to update the panel.</param>
        void Display15Button_Visibility_fb(bool digital);

        /// <summary>
        /// PublicDisplays.PublicDisplayRouting.Display 16 Button.Visibility Feedback
        /// </summary>
        /// <param name="callback">The bool delegate to update the panel.</param>
        void Display16Button_Visibility_fb(PublicDisplayRoutingBoolInputSigDelegate callback);

        /// <summary>
        /// PublicDisplays.PublicDisplayRouting.Display 16 Button.Visibility Feedback
        /// </summary>
        /// <param name="digital">The bool to update the panel.</param>
        void Display16Button_Visibility_fb(bool digital);

        /// <summary>
        /// PublicDisplays.PublicDisplayRouting.Display 17 Button.Visibility Feedback
        /// </summary>
        /// <param name="callback">The bool delegate to update the panel.</param>
        void Display17Button_Visibility_fb(PublicDisplayRoutingBoolInputSigDelegate callback);

        /// <summary>
        /// PublicDisplays.PublicDisplayRouting.Display 17 Button.Visibility Feedback
        /// </summary>
        /// <param name="digital">The bool to update the panel.</param>
        void Display17Button_Visibility_fb(bool digital);

        /// <summary>
        /// PublicDisplays.PublicDisplayRouting.Display 18 Button.Visibility Feedback
        /// </summary>
        /// <param name="callback">The bool delegate to update the panel.</param>
        void Display18Button_Visibility_fb(PublicDisplayRoutingBoolInputSigDelegate callback);

        /// <summary>
        /// PublicDisplays.PublicDisplayRouting.Display 18 Button.Visibility Feedback
        /// </summary>
        /// <param name="digital">The bool to update the panel.</param>
        void Display18Button_Visibility_fb(bool digital);

        /// <summary>
        /// PublicDisplays.PublicDisplayRouting.Display 19 Button.Visibility Feedback
        /// </summary>
        /// <param name="callback">The bool delegate to update the panel.</param>
        void Display19Button_Visibility_fb(PublicDisplayRoutingBoolInputSigDelegate callback);

        /// <summary>
        /// PublicDisplays.PublicDisplayRouting.Display 19 Button.Visibility Feedback
        /// </summary>
        /// <param name="digital">The bool to update the panel.</param>
        void Display19Button_Visibility_fb(bool digital);

        /// <summary>
        /// PublicDisplays.PublicDisplayRouting.Display 1 Button.Visibility Feedback
        /// </summary>
        /// <param name="callback">The bool delegate to update the panel.</param>
        void Display1Button_Visibility_fb(PublicDisplayRoutingBoolInputSigDelegate callback);

        /// <summary>
        /// PublicDisplays.PublicDisplayRouting.Display 1 Button.Visibility Feedback
        /// </summary>
        /// <param name="digital">The bool to update the panel.</param>
        void Display1Button_Visibility_fb(bool digital);

        /// <summary>
        /// PublicDisplays.PublicDisplayRouting.Display 20 Button.Visibility Feedback
        /// </summary>
        /// <param name="callback">The bool delegate to update the panel.</param>
        void Display20Button_Visibility_fb(PublicDisplayRoutingBoolInputSigDelegate callback);

        /// <summary>
        /// PublicDisplays.PublicDisplayRouting.Display 20 Button.Visibility Feedback
        /// </summary>
        /// <param name="digital">The bool to update the panel.</param>
        void Display20Button_Visibility_fb(bool digital);

        /// <summary>
        /// PublicDisplays.PublicDisplayRouting.Display 2 Button.Visibility Feedback
        /// </summary>
        /// <param name="callback">The bool delegate to update the panel.</param>
        void Display2Button_Visibility_fb(PublicDisplayRoutingBoolInputSigDelegate callback);

        /// <summary>
        /// PublicDisplays.PublicDisplayRouting.Display 2 Button.Visibility Feedback
        /// </summary>
        /// <param name="digital">The bool to update the panel.</param>
        void Display2Button_Visibility_fb(bool digital);

        /// <summary>
        /// PublicDisplays.PublicDisplayRouting.Display 3 Button.Visibility Feedback
        /// </summary>
        /// <param name="callback">The bool delegate to update the panel.</param>
        void Display3Button_Visibility_fb(PublicDisplayRoutingBoolInputSigDelegate callback);

        /// <summary>
        /// PublicDisplays.PublicDisplayRouting.Display 3 Button.Visibility Feedback
        /// </summary>
        /// <param name="digital">The bool to update the panel.</param>
        void Display3Button_Visibility_fb(bool digital);

        /// <summary>
        /// PublicDisplays.PublicDisplayRouting.Display 4 Button.Visibility Feedback
        /// </summary>
        /// <param name="callback">The bool delegate to update the panel.</param>
        void Display4Button_Visibility_fb(PublicDisplayRoutingBoolInputSigDelegate callback);

        /// <summary>
        /// PublicDisplays.PublicDisplayRouting.Display 4 Button.Visibility Feedback
        /// </summary>
        /// <param name="digital">The bool to update the panel.</param>
        void Display4Button_Visibility_fb(bool digital);

        /// <summary>
        /// PublicDisplays.PublicDisplayRouting.Display 5 Button.Visibility Feedback
        /// </summary>
        /// <param name="callback">The bool delegate to update the panel.</param>
        void Display5Button_Visibility_fb(PublicDisplayRoutingBoolInputSigDelegate callback);

        /// <summary>
        /// PublicDisplays.PublicDisplayRouting.Display 5 Button.Visibility Feedback
        /// </summary>
        /// <param name="digital">The bool to update the panel.</param>
        void Display5Button_Visibility_fb(bool digital);

        /// <summary>
        /// PublicDisplays.PublicDisplayRouting.Display 6 Button.Visibility Feedback
        /// </summary>
        /// <param name="callback">The bool delegate to update the panel.</param>
        void Display6Button_Visibility_fb(PublicDisplayRoutingBoolInputSigDelegate callback);

        /// <summary>
        /// PublicDisplays.PublicDisplayRouting.Display 6 Button.Visibility Feedback
        /// </summary>
        /// <param name="digital">The bool to update the panel.</param>
        void Display6Button_Visibility_fb(bool digital);

        /// <summary>
        /// PublicDisplays.PublicDisplayRouting.Display 7 Button.Visibility Feedback
        /// </summary>
        /// <param name="callback">The bool delegate to update the panel.</param>
        void Display7Button_Visibility_fb(PublicDisplayRoutingBoolInputSigDelegate callback);

        /// <summary>
        /// PublicDisplays.PublicDisplayRouting.Display 7 Button.Visibility Feedback
        /// </summary>
        /// <param name="digital">The bool to update the panel.</param>
        void Display7Button_Visibility_fb(bool digital);

        /// <summary>
        /// PublicDisplays.PublicDisplayRouting.Display 8 Button.Visibility Feedback
        /// </summary>
        /// <param name="callback">The bool delegate to update the panel.</param>
        void Display8Button_Visibility_fb(PublicDisplayRoutingBoolInputSigDelegate callback);

        /// <summary>
        /// PublicDisplays.PublicDisplayRouting.Display 8 Button.Visibility Feedback
        /// </summary>
        /// <param name="digital">The bool to update the panel.</param>
        void Display8Button_Visibility_fb(bool digital);

        /// <summary>
        /// PublicDisplays.PublicDisplayRouting.Display 9 Button.Visibility Feedback
        /// </summary>
        /// <param name="callback">The bool delegate to update the panel.</param>
        void Display9Button_Visibility_fb(PublicDisplayRoutingBoolInputSigDelegate callback);

        /// <summary>
        /// PublicDisplays.PublicDisplayRouting.Display 9 Button.Visibility Feedback
        /// </summary>
        /// <param name="digital">The bool to update the panel.</param>
        void Display9Button_Visibility_fb(bool digital);

        /// <summary>
        /// PublicDisplays.PublicDisplayRouting.Source 1 Button.Visibility Feedback
        /// </summary>
        /// <param name="callback">The bool delegate to update the panel.</param>
        void Source1Button_Visibility_fb(PublicDisplayRoutingBoolInputSigDelegate callback);

        /// <summary>
        /// PublicDisplays.PublicDisplayRouting.Source 1 Button.Visibility Feedback
        /// </summary>
        /// <param name="digital">The bool to update the panel.</param>
        void Source1Button_Visibility_fb(bool digital);

        /// <summary>
        /// PublicDisplays.PublicDisplayRouting.Source 2 Button.Visibility Feedback
        /// </summary>
        /// <param name="callback">The bool delegate to update the panel.</param>
        void Source2Button_Visibility_fb(PublicDisplayRoutingBoolInputSigDelegate callback);

        /// <summary>
        /// PublicDisplays.PublicDisplayRouting.Source 2 Button.Visibility Feedback
        /// </summary>
        /// <param name="digital">The bool to update the panel.</param>
        void Source2Button_Visibility_fb(bool digital);

        /// <summary>
        /// PublicDisplays.PublicDisplayRouting.Source 3 Button.Visibility Feedback
        /// </summary>
        /// <param name="callback">The bool delegate to update the panel.</param>
        void Source3Button_Visibility_fb(PublicDisplayRoutingBoolInputSigDelegate callback);

        /// <summary>
        /// PublicDisplays.PublicDisplayRouting.Source 3 Button.Visibility Feedback
        /// </summary>
        /// <param name="digital">The bool to update the panel.</param>
        void Source3Button_Visibility_fb(bool digital);

        /// <summary>
        /// PublicDisplays.PublicDisplayRouting.Source 4 Button.Visibility Feedback
        /// </summary>
        /// <param name="callback">The bool delegate to update the panel.</param>
        void Source4Button_Visibility_fb(PublicDisplayRoutingBoolInputSigDelegate callback);

        /// <summary>
        /// PublicDisplays.PublicDisplayRouting.Source 4 Button.Visibility Feedback
        /// </summary>
        /// <param name="digital">The bool to update the panel.</param>
        void Source4Button_Visibility_fb(bool digital);

        /// <summary>
        /// PublicDisplays.PublicDisplayRouting.Source 5 Button.Visibility Feedback
        /// </summary>
        /// <param name="callback">The bool delegate to update the panel.</param>
        void Source5Button_Visibility_fb(PublicDisplayRoutingBoolInputSigDelegate callback);

        /// <summary>
        /// PublicDisplays.PublicDisplayRouting.Source 5 Button.Visibility Feedback
        /// </summary>
        /// <param name="digital">The bool to update the panel.</param>
        void Source5Button_Visibility_fb(bool digital);

        /// <summary>
        /// PublicDisplays.PublicDisplayRouting.Source 6 Button.Visibility Feedback
        /// </summary>
        /// <param name="callback">The bool delegate to update the panel.</param>
        void Source6Button_Visibility_fb(PublicDisplayRoutingBoolInputSigDelegate callback);

        /// <summary>
        /// PublicDisplays.PublicDisplayRouting.Source 6 Button.Visibility Feedback
        /// </summary>
        /// <param name="digital">The bool to update the panel.</param>
        void Source6Button_Visibility_fb(bool digital);

        /// <summary>
        /// PublicDisplays.PublicDisplayRouting.Source 7 Button.Visibility Feedback
        /// </summary>
        /// <param name="callback">The bool delegate to update the panel.</param>
        void Source7Button_Visibility_fb(PublicDisplayRoutingBoolInputSigDelegate callback);

        /// <summary>
        /// PublicDisplays.PublicDisplayRouting.Source 7 Button.Visibility Feedback
        /// </summary>
        /// <param name="digital">The bool to update the panel.</param>
        void Source7Button_Visibility_fb(bool digital);

        /// <summary>
        /// PublicDisplays.PublicDisplayRouting.Source 8 Button.Visibility Feedback
        /// </summary>
        /// <param name="callback">The bool delegate to update the panel.</param>
        void Source8Button_Visibility_fb(PublicDisplayRoutingBoolInputSigDelegate callback);

        /// <summary>
        /// PublicDisplays.PublicDisplayRouting.Source 8 Button.Visibility Feedback
        /// </summary>
        /// <param name="digital">The bool to update the panel.</param>
        void Source8Button_Visibility_fb(bool digital);

        /// <summary>
        /// PublicDisplays.PublicDisplayRouting.Source 9 Button.Visibility Feedback
        /// </summary>
        /// <param name="callback">The bool delegate to update the panel.</param>
        void Source9Button_Visibility_fb(PublicDisplayRoutingBoolInputSigDelegate callback);

        /// <summary>
        /// PublicDisplays.PublicDisplayRouting.Source 9 Button.Visibility Feedback
        /// </summary>
        /// <param name="digital">The bool to update the panel.</param>
        void Source9Button_Visibility_fb(bool digital);

        /// <summary>
        /// PublicDisplays.PublicDisplayRouting.Source Clear Button.Visibility Feedback
        /// </summary>
        /// <param name="callback">The bool delegate to update the panel.</param>
        void SourceClearButton_Visibility_fb(PublicDisplayRoutingBoolInputSigDelegate callback);

        /// <summary>
        /// PublicDisplays.PublicDisplayRouting.Source Clear Button.Visibility Feedback
        /// </summary>
        /// <param name="digital">The bool to update the panel.</param>
        void SourceClearButton_Visibility_fb(bool digital);

        /// <summary>
        /// PublicDisplays.PublicDisplayRouting.Display 10 Label.Visibility Feedback
        /// </summary>
        /// <param name="callback">The bool delegate to update the panel.</param>
        void Display10Label_Visibility_fb(PublicDisplayRoutingBoolInputSigDelegate callback);

        /// <summary>
        /// PublicDisplays.PublicDisplayRouting.Display 10 Label.Visibility Feedback
        /// </summary>
        /// <param name="digital">The bool to update the panel.</param>
        void Display10Label_Visibility_fb(bool digital);

        /// <summary>
        /// PublicDisplays.PublicDisplayRouting.Display 11 Label.Visibility Feedback
        /// </summary>
        /// <param name="callback">The bool delegate to update the panel.</param>
        void Display11Label_Visibility_fb(PublicDisplayRoutingBoolInputSigDelegate callback);

        /// <summary>
        /// PublicDisplays.PublicDisplayRouting.Display 11 Label.Visibility Feedback
        /// </summary>
        /// <param name="digital">The bool to update the panel.</param>
        void Display11Label_Visibility_fb(bool digital);

        /// <summary>
        /// PublicDisplays.PublicDisplayRouting.Display 12 Label.Visibility Feedback
        /// </summary>
        /// <param name="callback">The bool delegate to update the panel.</param>
        void Display12Label_Visibility_fb(PublicDisplayRoutingBoolInputSigDelegate callback);

        /// <summary>
        /// PublicDisplays.PublicDisplayRouting.Display 12 Label.Visibility Feedback
        /// </summary>
        /// <param name="digital">The bool to update the panel.</param>
        void Display12Label_Visibility_fb(bool digital);

        /// <summary>
        /// PublicDisplays.PublicDisplayRouting.Display 13 Label.Visibility Feedback
        /// </summary>
        /// <param name="callback">The bool delegate to update the panel.</param>
        void Display13Label_Visibility_fb(PublicDisplayRoutingBoolInputSigDelegate callback);

        /// <summary>
        /// PublicDisplays.PublicDisplayRouting.Display 13 Label.Visibility Feedback
        /// </summary>
        /// <param name="digital">The bool to update the panel.</param>
        void Display13Label_Visibility_fb(bool digital);

        /// <summary>
        /// PublicDisplays.PublicDisplayRouting.Display 14 Label.Visibility Feedback
        /// </summary>
        /// <param name="callback">The bool delegate to update the panel.</param>
        void Display14Label_Visibility_fb(PublicDisplayRoutingBoolInputSigDelegate callback);

        /// <summary>
        /// PublicDisplays.PublicDisplayRouting.Display 14 Label.Visibility Feedback
        /// </summary>
        /// <param name="digital">The bool to update the panel.</param>
        void Display14Label_Visibility_fb(bool digital);

        /// <summary>
        /// PublicDisplays.PublicDisplayRouting.Display 15 Label.Visibility Feedback
        /// </summary>
        /// <param name="callback">The bool delegate to update the panel.</param>
        void Display15Label_Visibility_fb(PublicDisplayRoutingBoolInputSigDelegate callback);

        /// <summary>
        /// PublicDisplays.PublicDisplayRouting.Display 15 Label.Visibility Feedback
        /// </summary>
        /// <param name="digital">The bool to update the panel.</param>
        void Display15Label_Visibility_fb(bool digital);

        /// <summary>
        /// PublicDisplays.PublicDisplayRouting.Display 16 Label.Visibility Feedback
        /// </summary>
        /// <param name="callback">The bool delegate to update the panel.</param>
        void Display16Label_Visibility_fb(PublicDisplayRoutingBoolInputSigDelegate callback);

        /// <summary>
        /// PublicDisplays.PublicDisplayRouting.Display 16 Label.Visibility Feedback
        /// </summary>
        /// <param name="digital">The bool to update the panel.</param>
        void Display16Label_Visibility_fb(bool digital);

        /// <summary>
        /// PublicDisplays.PublicDisplayRouting.Display 17 Label.Visibility Feedback
        /// </summary>
        /// <param name="callback">The bool delegate to update the panel.</param>
        void Display17Label_Visibility_fb(PublicDisplayRoutingBoolInputSigDelegate callback);

        /// <summary>
        /// PublicDisplays.PublicDisplayRouting.Display 17 Label.Visibility Feedback
        /// </summary>
        /// <param name="digital">The bool to update the panel.</param>
        void Display17Label_Visibility_fb(bool digital);

        /// <summary>
        /// PublicDisplays.PublicDisplayRouting.Display 18 Label.Visibility Feedback
        /// </summary>
        /// <param name="callback">The bool delegate to update the panel.</param>
        void Display18Label_Visibility_fb(PublicDisplayRoutingBoolInputSigDelegate callback);

        /// <summary>
        /// PublicDisplays.PublicDisplayRouting.Display 18 Label.Visibility Feedback
        /// </summary>
        /// <param name="digital">The bool to update the panel.</param>
        void Display18Label_Visibility_fb(bool digital);

        /// <summary>
        /// PublicDisplays.PublicDisplayRouting.Display 19 Label.Visibility Feedback
        /// </summary>
        /// <param name="callback">The bool delegate to update the panel.</param>
        void Display19Label_Visibility_fb(PublicDisplayRoutingBoolInputSigDelegate callback);

        /// <summary>
        /// PublicDisplays.PublicDisplayRouting.Display 19 Label.Visibility Feedback
        /// </summary>
        /// <param name="digital">The bool to update the panel.</param>
        void Display19Label_Visibility_fb(bool digital);

        /// <summary>
        /// PublicDisplays.PublicDisplayRouting.Display 1 Label.Visibility Feedback
        /// </summary>
        /// <param name="callback">The bool delegate to update the panel.</param>
        void Display1Label_Visibility_fb(PublicDisplayRoutingBoolInputSigDelegate callback);

        /// <summary>
        /// PublicDisplays.PublicDisplayRouting.Display 1 Label.Visibility Feedback
        /// </summary>
        /// <param name="digital">The bool to update the panel.</param>
        void Display1Label_Visibility_fb(bool digital);

        /// <summary>
        /// PublicDisplays.PublicDisplayRouting.Display 20 Label.Visibility Feedback
        /// </summary>
        /// <param name="callback">The bool delegate to update the panel.</param>
        void Display20Label_Visibility_fb(PublicDisplayRoutingBoolInputSigDelegate callback);

        /// <summary>
        /// PublicDisplays.PublicDisplayRouting.Display 20 Label.Visibility Feedback
        /// </summary>
        /// <param name="digital">The bool to update the panel.</param>
        void Display20Label_Visibility_fb(bool digital);

        /// <summary>
        /// PublicDisplays.PublicDisplayRouting.Display 2 Label.Visibility Feedback
        /// </summary>
        /// <param name="callback">The bool delegate to update the panel.</param>
        void Display2Label_Visibility_fb(PublicDisplayRoutingBoolInputSigDelegate callback);

        /// <summary>
        /// PublicDisplays.PublicDisplayRouting.Display 2 Label.Visibility Feedback
        /// </summary>
        /// <param name="digital">The bool to update the panel.</param>
        void Display2Label_Visibility_fb(bool digital);

        /// <summary>
        /// PublicDisplays.PublicDisplayRouting.Display 3 Label.Visibility Feedback
        /// </summary>
        /// <param name="callback">The bool delegate to update the panel.</param>
        void Display3Label_Visibility_fb(PublicDisplayRoutingBoolInputSigDelegate callback);

        /// <summary>
        /// PublicDisplays.PublicDisplayRouting.Display 3 Label.Visibility Feedback
        /// </summary>
        /// <param name="digital">The bool to update the panel.</param>
        void Display3Label_Visibility_fb(bool digital);

        /// <summary>
        /// PublicDisplays.PublicDisplayRouting.Display 4 Label.Visibility Feedback
        /// </summary>
        /// <param name="callback">The bool delegate to update the panel.</param>
        void Display4Label_Visibility_fb(PublicDisplayRoutingBoolInputSigDelegate callback);

        /// <summary>
        /// PublicDisplays.PublicDisplayRouting.Display 4 Label.Visibility Feedback
        /// </summary>
        /// <param name="digital">The bool to update the panel.</param>
        void Display4Label_Visibility_fb(bool digital);

        /// <summary>
        /// PublicDisplays.PublicDisplayRouting.Display 5 Label.Visibility Feedback
        /// </summary>
        /// <param name="callback">The bool delegate to update the panel.</param>
        void Display5Label_Visibility_fb(PublicDisplayRoutingBoolInputSigDelegate callback);

        /// <summary>
        /// PublicDisplays.PublicDisplayRouting.Display 5 Label.Visibility Feedback
        /// </summary>
        /// <param name="digital">The bool to update the panel.</param>
        void Display5Label_Visibility_fb(bool digital);

        /// <summary>
        /// PublicDisplays.PublicDisplayRouting.Display 6 Label.Visibility Feedback
        /// </summary>
        /// <param name="callback">The bool delegate to update the panel.</param>
        void Display6Label_Visibility_fb(PublicDisplayRoutingBoolInputSigDelegate callback);

        /// <summary>
        /// PublicDisplays.PublicDisplayRouting.Display 6 Label.Visibility Feedback
        /// </summary>
        /// <param name="digital">The bool to update the panel.</param>
        void Display6Label_Visibility_fb(bool digital);

        /// <summary>
        /// PublicDisplays.PublicDisplayRouting.Display 7 Label.Visibility Feedback
        /// </summary>
        /// <param name="callback">The bool delegate to update the panel.</param>
        void Display7Label_Visibility_fb(PublicDisplayRoutingBoolInputSigDelegate callback);

        /// <summary>
        /// PublicDisplays.PublicDisplayRouting.Display 7 Label.Visibility Feedback
        /// </summary>
        /// <param name="digital">The bool to update the panel.</param>
        void Display7Label_Visibility_fb(bool digital);

        /// <summary>
        /// PublicDisplays.PublicDisplayRouting.Display 8 Label.Visibility Feedback
        /// </summary>
        /// <param name="callback">The bool delegate to update the panel.</param>
        void Display8Label_Visibility_fb(PublicDisplayRoutingBoolInputSigDelegate callback);

        /// <summary>
        /// PublicDisplays.PublicDisplayRouting.Display 8 Label.Visibility Feedback
        /// </summary>
        /// <param name="digital">The bool to update the panel.</param>
        void Display8Label_Visibility_fb(bool digital);

        /// <summary>
        /// PublicDisplays.PublicDisplayRouting.Display 9 Label.Visibility Feedback
        /// </summary>
        /// <param name="callback">The bool delegate to update the panel.</param>
        void Display9Label_Visibility_fb(PublicDisplayRoutingBoolInputSigDelegate callback);

        /// <summary>
        /// PublicDisplays.PublicDisplayRouting.Display 9 Label.Visibility Feedback
        /// </summary>
        /// <param name="digital">The bool to update the panel.</param>
        void Display9Label_Visibility_fb(bool digital);

        /// <summary>
        /// Public Display Routing.Visibility Feedback
        /// </summary>
        /// <param name="callback">The bool delegate to update the panel.</param>
        void PublicDisplayRouting_Visibility_fb(PublicDisplayRoutingBoolInputSigDelegate callback);

        /// <summary>
        /// Public Display Routing.Visibility Feedback
        /// </summary>
        /// <param name="digital">The bool to update the panel.</param>
        void PublicDisplayRouting_Visibility_fb(bool digital);

        /// <summary>
        /// PublicDisplays.PublicDisplayRouting.Source 1 Button.Selected Feedback
        /// </summary>
        /// <param name="callback">The bool delegate to update the panel.</param>
        void Source1Button_Selected(PublicDisplayRoutingBoolInputSigDelegate callback);

        /// <summary>
        /// PublicDisplays.PublicDisplayRouting.Source 1 Button.Selected Feedback
        /// </summary>
        /// <param name="digital">The bool to update the panel.</param>
        void Source1Button_Selected(bool digital);

        /// <summary>
        /// PublicDisplays.PublicDisplayRouting.Source 2 Button.Selected Feedback
        /// </summary>
        /// <param name="callback">The bool delegate to update the panel.</param>
        void Source2Button_Selected(PublicDisplayRoutingBoolInputSigDelegate callback);

        /// <summary>
        /// PublicDisplays.PublicDisplayRouting.Source 2 Button.Selected Feedback
        /// </summary>
        /// <param name="digital">The bool to update the panel.</param>
        void Source2Button_Selected(bool digital);

        /// <summary>
        /// PublicDisplays.PublicDisplayRouting.Source 3 Button.Selected Feedback
        /// </summary>
        /// <param name="callback">The bool delegate to update the panel.</param>
        void Source3Button_Selected(PublicDisplayRoutingBoolInputSigDelegate callback);

        /// <summary>
        /// PublicDisplays.PublicDisplayRouting.Source 3 Button.Selected Feedback
        /// </summary>
        /// <param name="digital">The bool to update the panel.</param>
        void Source3Button_Selected(bool digital);

        /// <summary>
        /// PublicDisplays.PublicDisplayRouting.Source 4 Button.Selected Feedback
        /// </summary>
        /// <param name="callback">The bool delegate to update the panel.</param>
        void Source4Button_Selected(PublicDisplayRoutingBoolInputSigDelegate callback);

        /// <summary>
        /// PublicDisplays.PublicDisplayRouting.Source 4 Button.Selected Feedback
        /// </summary>
        /// <param name="digital">The bool to update the panel.</param>
        void Source4Button_Selected(bool digital);

        /// <summary>
        /// PublicDisplays.PublicDisplayRouting.Source 5 Button.Selected Feedback
        /// </summary>
        /// <param name="callback">The bool delegate to update the panel.</param>
        void Source5Button_Selected(PublicDisplayRoutingBoolInputSigDelegate callback);

        /// <summary>
        /// PublicDisplays.PublicDisplayRouting.Source 5 Button.Selected Feedback
        /// </summary>
        /// <param name="digital">The bool to update the panel.</param>
        void Source5Button_Selected(bool digital);

        /// <summary>
        /// PublicDisplays.PublicDisplayRouting.Source 6 Button.Selected Feedback
        /// </summary>
        /// <param name="callback">The bool delegate to update the panel.</param>
        void Source6Button_Selected(PublicDisplayRoutingBoolInputSigDelegate callback);

        /// <summary>
        /// PublicDisplays.PublicDisplayRouting.Source 6 Button.Selected Feedback
        /// </summary>
        /// <param name="digital">The bool to update the panel.</param>
        void Source6Button_Selected(bool digital);

        /// <summary>
        /// PublicDisplays.PublicDisplayRouting.Source 7 Button.Selected Feedback
        /// </summary>
        /// <param name="callback">The bool delegate to update the panel.</param>
        void Source7Button_Selected(PublicDisplayRoutingBoolInputSigDelegate callback);

        /// <summary>
        /// PublicDisplays.PublicDisplayRouting.Source 7 Button.Selected Feedback
        /// </summary>
        /// <param name="digital">The bool to update the panel.</param>
        void Source7Button_Selected(bool digital);

        /// <summary>
        /// PublicDisplays.PublicDisplayRouting.Source 8 Button.Selected Feedback
        /// </summary>
        /// <param name="callback">The bool delegate to update the panel.</param>
        void Source8Button_Selected(PublicDisplayRoutingBoolInputSigDelegate callback);

        /// <summary>
        /// PublicDisplays.PublicDisplayRouting.Source 8 Button.Selected Feedback
        /// </summary>
        /// <param name="digital">The bool to update the panel.</param>
        void Source8Button_Selected(bool digital);

        /// <summary>
        /// PublicDisplays.PublicDisplayRouting.Source 9 Button.Selected Feedback
        /// </summary>
        /// <param name="callback">The bool delegate to update the panel.</param>
        void Source9Button_Selected(PublicDisplayRoutingBoolInputSigDelegate callback);

        /// <summary>
        /// PublicDisplays.PublicDisplayRouting.Source 9 Button.Selected Feedback
        /// </summary>
        /// <param name="digital">The bool to update the panel.</param>
        void Source9Button_Selected(bool digital);

        /// <summary>
        /// PublicDisplays.PublicDisplayRouting.Source Clear Button.Selected Feedback
        /// </summary>
        /// <param name="callback">The bool delegate to update the panel.</param>
        void SourceClearButton_Selected(PublicDisplayRoutingBoolInputSigDelegate callback);

        /// <summary>
        /// PublicDisplays.PublicDisplayRouting.Source Clear Button.Selected Feedback
        /// </summary>
        /// <param name="digital">The bool to update the panel.</param>
        void SourceClearButton_Selected(bool digital);

        /// <summary>
        /// PublicDisplays.PublicDisplayRouting.Display 10 Button.Indirect Rich Text Feedback
        /// </summary>
        /// <param name="callback">The <see cref="string"/> delegate to update the panel.</param>
        void Display10Button_IndirectRichText(PublicDisplayRoutingStringInputSigDelegate callback);

        /// <summary>
        /// PublicDisplays.PublicDisplayRouting.Display 10 Button.Indirect Rich Text Feedback
        /// </summary>
        /// <param name="serial">The <see cref="string"/> to update the panel.</param>
        void Display10Button_IndirectRichText(string serial);

        /// <summary>
        /// PublicDisplays.PublicDisplayRouting.Display 10 Label.Indirect Rich Text Feedback
        /// </summary>
        /// <param name="callback">The <see cref="string"/> delegate to update the panel.</param>
        void Display10Label_IndirectRichText(PublicDisplayRoutingStringInputSigDelegate callback);

        /// <summary>
        /// PublicDisplays.PublicDisplayRouting.Display 10 Label.Indirect Rich Text Feedback
        /// </summary>
        /// <param name="serial">The <see cref="string"/> to update the panel.</param>
        void Display10Label_IndirectRichText(string serial);

        /// <summary>
        /// PublicDisplays.PublicDisplayRouting.Display 11 Button.Indirect Rich Text Feedback
        /// </summary>
        /// <param name="callback">The <see cref="string"/> delegate to update the panel.</param>
        void Display11Button_IndirectRichText(PublicDisplayRoutingStringInputSigDelegate callback);

        /// <summary>
        /// PublicDisplays.PublicDisplayRouting.Display 11 Button.Indirect Rich Text Feedback
        /// </summary>
        /// <param name="serial">The <see cref="string"/> to update the panel.</param>
        void Display11Button_IndirectRichText(string serial);

        /// <summary>
        /// PublicDisplays.PublicDisplayRouting.Display 11 Label.Indirect Rich Text Feedback
        /// </summary>
        /// <param name="callback">The <see cref="string"/> delegate to update the panel.</param>
        void Display11Label_IndirectRichText(PublicDisplayRoutingStringInputSigDelegate callback);

        /// <summary>
        /// PublicDisplays.PublicDisplayRouting.Display 11 Label.Indirect Rich Text Feedback
        /// </summary>
        /// <param name="serial">The <see cref="string"/> to update the panel.</param>
        void Display11Label_IndirectRichText(string serial);

        /// <summary>
        /// PublicDisplays.PublicDisplayRouting.Display 12 Button.Indirect Rich Text Feedback
        /// </summary>
        /// <param name="callback">The <see cref="string"/> delegate to update the panel.</param>
        void Display12Button_IndirectRichText(PublicDisplayRoutingStringInputSigDelegate callback);

        /// <summary>
        /// PublicDisplays.PublicDisplayRouting.Display 12 Button.Indirect Rich Text Feedback
        /// </summary>
        /// <param name="serial">The <see cref="string"/> to update the panel.</param>
        void Display12Button_IndirectRichText(string serial);

        /// <summary>
        /// PublicDisplays.PublicDisplayRouting.Display 12 Label.Indirect Rich Text Feedback
        /// </summary>
        /// <param name="callback">The <see cref="string"/> delegate to update the panel.</param>
        void Display12Label_IndirectRichText(PublicDisplayRoutingStringInputSigDelegate callback);

        /// <summary>
        /// PublicDisplays.PublicDisplayRouting.Display 12 Label.Indirect Rich Text Feedback
        /// </summary>
        /// <param name="serial">The <see cref="string"/> to update the panel.</param>
        void Display12Label_IndirectRichText(string serial);

        /// <summary>
        /// PublicDisplays.PublicDisplayRouting.Display 13 Button.Indirect Rich Text Feedback
        /// </summary>
        /// <param name="callback">The <see cref="string"/> delegate to update the panel.</param>
        void Display13Button_IndirectRichText(PublicDisplayRoutingStringInputSigDelegate callback);

        /// <summary>
        /// PublicDisplays.PublicDisplayRouting.Display 13 Button.Indirect Rich Text Feedback
        /// </summary>
        /// <param name="serial">The <see cref="string"/> to update the panel.</param>
        void Display13Button_IndirectRichText(string serial);

        /// <summary>
        /// PublicDisplays.PublicDisplayRouting.Display 13 Label.Indirect Rich Text Feedback
        /// </summary>
        /// <param name="callback">The <see cref="string"/> delegate to update the panel.</param>
        void Display13Label_IndirectRichText(PublicDisplayRoutingStringInputSigDelegate callback);

        /// <summary>
        /// PublicDisplays.PublicDisplayRouting.Display 13 Label.Indirect Rich Text Feedback
        /// </summary>
        /// <param name="serial">The <see cref="string"/> to update the panel.</param>
        void Display13Label_IndirectRichText(string serial);

        /// <summary>
        /// PublicDisplays.PublicDisplayRouting.Display 14 Button.Indirect Rich Text Feedback
        /// </summary>
        /// <param name="callback">The <see cref="string"/> delegate to update the panel.</param>
        void Display14Button_IndirectRichText(PublicDisplayRoutingStringInputSigDelegate callback);

        /// <summary>
        /// PublicDisplays.PublicDisplayRouting.Display 14 Button.Indirect Rich Text Feedback
        /// </summary>
        /// <param name="serial">The <see cref="string"/> to update the panel.</param>
        void Display14Button_IndirectRichText(string serial);

        /// <summary>
        /// PublicDisplays.PublicDisplayRouting.Display 14 Label.Indirect Rich Text Feedback
        /// </summary>
        /// <param name="callback">The <see cref="string"/> delegate to update the panel.</param>
        void Display14Label_IndirectRichText(PublicDisplayRoutingStringInputSigDelegate callback);

        /// <summary>
        /// PublicDisplays.PublicDisplayRouting.Display 14 Label.Indirect Rich Text Feedback
        /// </summary>
        /// <param name="serial">The <see cref="string"/> to update the panel.</param>
        void Display14Label_IndirectRichText(string serial);

        /// <summary>
        /// PublicDisplays.PublicDisplayRouting.Display 15 Button.Indirect Rich Text Feedback
        /// </summary>
        /// <param name="callback">The <see cref="string"/> delegate to update the panel.</param>
        void Display15Button_IndirectRichText(PublicDisplayRoutingStringInputSigDelegate callback);

        /// <summary>
        /// PublicDisplays.PublicDisplayRouting.Display 15 Button.Indirect Rich Text Feedback
        /// </summary>
        /// <param name="serial">The <see cref="string"/> to update the panel.</param>
        void Display15Button_IndirectRichText(string serial);

        /// <summary>
        /// PublicDisplays.PublicDisplayRouting.Display 15 Label.Indirect Rich Text Feedback
        /// </summary>
        /// <param name="callback">The <see cref="string"/> delegate to update the panel.</param>
        void Display15Label_IndirectRichText(PublicDisplayRoutingStringInputSigDelegate callback);

        /// <summary>
        /// PublicDisplays.PublicDisplayRouting.Display 15 Label.Indirect Rich Text Feedback
        /// </summary>
        /// <param name="serial">The <see cref="string"/> to update the panel.</param>
        void Display15Label_IndirectRichText(string serial);

        /// <summary>
        /// PublicDisplays.PublicDisplayRouting.Display 16 Button.Indirect Rich Text Feedback
        /// </summary>
        /// <param name="callback">The <see cref="string"/> delegate to update the panel.</param>
        void Display16Button_IndirectRichText(PublicDisplayRoutingStringInputSigDelegate callback);

        /// <summary>
        /// PublicDisplays.PublicDisplayRouting.Display 16 Button.Indirect Rich Text Feedback
        /// </summary>
        /// <param name="serial">The <see cref="string"/> to update the panel.</param>
        void Display16Button_IndirectRichText(string serial);

        /// <summary>
        /// PublicDisplays.PublicDisplayRouting.Display 16 Label.Indirect Rich Text Feedback
        /// </summary>
        /// <param name="callback">The <see cref="string"/> delegate to update the panel.</param>
        void Display16Label_IndirectRichText(PublicDisplayRoutingStringInputSigDelegate callback);

        /// <summary>
        /// PublicDisplays.PublicDisplayRouting.Display 16 Label.Indirect Rich Text Feedback
        /// </summary>
        /// <param name="serial">The <see cref="string"/> to update the panel.</param>
        void Display16Label_IndirectRichText(string serial);

        /// <summary>
        /// PublicDisplays.PublicDisplayRouting.Display 17 Button.Indirect Rich Text Feedback
        /// </summary>
        /// <param name="callback">The <see cref="string"/> delegate to update the panel.</param>
        void Display17Button_IndirectRichText(PublicDisplayRoutingStringInputSigDelegate callback);

        /// <summary>
        /// PublicDisplays.PublicDisplayRouting.Display 17 Button.Indirect Rich Text Feedback
        /// </summary>
        /// <param name="serial">The <see cref="string"/> to update the panel.</param>
        void Display17Button_IndirectRichText(string serial);

        /// <summary>
        /// PublicDisplays.PublicDisplayRouting.Display 17 Label.Indirect Rich Text Feedback
        /// </summary>
        /// <param name="callback">The <see cref="string"/> delegate to update the panel.</param>
        void Display17Label_IndirectRichText(PublicDisplayRoutingStringInputSigDelegate callback);

        /// <summary>
        /// PublicDisplays.PublicDisplayRouting.Display 17 Label.Indirect Rich Text Feedback
        /// </summary>
        /// <param name="serial">The <see cref="string"/> to update the panel.</param>
        void Display17Label_IndirectRichText(string serial);

        /// <summary>
        /// PublicDisplays.PublicDisplayRouting.Display 18 Button.Indirect Rich Text Feedback
        /// </summary>
        /// <param name="callback">The <see cref="string"/> delegate to update the panel.</param>
        void Display18Button_IndirectRichText(PublicDisplayRoutingStringInputSigDelegate callback);

        /// <summary>
        /// PublicDisplays.PublicDisplayRouting.Display 18 Button.Indirect Rich Text Feedback
        /// </summary>
        /// <param name="serial">The <see cref="string"/> to update the panel.</param>
        void Display18Button_IndirectRichText(string serial);

        /// <summary>
        /// PublicDisplays.PublicDisplayRouting.Display 18 Label.Indirect Rich Text Feedback
        /// </summary>
        /// <param name="callback">The <see cref="string"/> delegate to update the panel.</param>
        void Display18Label_IndirectRichText(PublicDisplayRoutingStringInputSigDelegate callback);

        /// <summary>
        /// PublicDisplays.PublicDisplayRouting.Display 18 Label.Indirect Rich Text Feedback
        /// </summary>
        /// <param name="serial">The <see cref="string"/> to update the panel.</param>
        void Display18Label_IndirectRichText(string serial);

        /// <summary>
        /// PublicDisplays.PublicDisplayRouting.Display 19 Button.Indirect Rich Text Feedback
        /// </summary>
        /// <param name="callback">The <see cref="string"/> delegate to update the panel.</param>
        void Display19Button_IndirectRichText(PublicDisplayRoutingStringInputSigDelegate callback);

        /// <summary>
        /// PublicDisplays.PublicDisplayRouting.Display 19 Button.Indirect Rich Text Feedback
        /// </summary>
        /// <param name="serial">The <see cref="string"/> to update the panel.</param>
        void Display19Button_IndirectRichText(string serial);

        /// <summary>
        /// PublicDisplays.PublicDisplayRouting.Display 19 Label.Indirect Rich Text Feedback
        /// </summary>
        /// <param name="callback">The <see cref="string"/> delegate to update the panel.</param>
        void Display19Label_IndirectRichText(PublicDisplayRoutingStringInputSigDelegate callback);

        /// <summary>
        /// PublicDisplays.PublicDisplayRouting.Display 19 Label.Indirect Rich Text Feedback
        /// </summary>
        /// <param name="serial">The <see cref="string"/> to update the panel.</param>
        void Display19Label_IndirectRichText(string serial);

        /// <summary>
        /// PublicDisplays.PublicDisplayRouting.Display 1 Button.Indirect Rich Text Feedback
        /// </summary>
        /// <param name="callback">The <see cref="string"/> delegate to update the panel.</param>
        void Display1Button_IndirectRichText(PublicDisplayRoutingStringInputSigDelegate callback);

        /// <summary>
        /// PublicDisplays.PublicDisplayRouting.Display 1 Button.Indirect Rich Text Feedback
        /// </summary>
        /// <param name="serial">The <see cref="string"/> to update the panel.</param>
        void Display1Button_IndirectRichText(string serial);

        /// <summary>
        /// PublicDisplays.PublicDisplayRouting.Display 1 Label.Indirect Rich Text Feedback
        /// </summary>
        /// <param name="callback">The <see cref="string"/> delegate to update the panel.</param>
        void Display1Label_IndirectRichText(PublicDisplayRoutingStringInputSigDelegate callback);

        /// <summary>
        /// PublicDisplays.PublicDisplayRouting.Display 1 Label.Indirect Rich Text Feedback
        /// </summary>
        /// <param name="serial">The <see cref="string"/> to update the panel.</param>
        void Display1Label_IndirectRichText(string serial);

        /// <summary>
        /// PublicDisplays.PublicDisplayRouting.Display 20 Button.Indirect Rich Text Feedback
        /// </summary>
        /// <param name="callback">The <see cref="string"/> delegate to update the panel.</param>
        void Display20Button_IndirectRichText(PublicDisplayRoutingStringInputSigDelegate callback);

        /// <summary>
        /// PublicDisplays.PublicDisplayRouting.Display 20 Button.Indirect Rich Text Feedback
        /// </summary>
        /// <param name="serial">The <see cref="string"/> to update the panel.</param>
        void Display20Button_IndirectRichText(string serial);

        /// <summary>
        /// PublicDisplays.PublicDisplayRouting.Display 20 Label.Indirect Rich Text Feedback
        /// </summary>
        /// <param name="callback">The <see cref="string"/> delegate to update the panel.</param>
        void Display20Label_IndirectRichText(PublicDisplayRoutingStringInputSigDelegate callback);

        /// <summary>
        /// PublicDisplays.PublicDisplayRouting.Display 20 Label.Indirect Rich Text Feedback
        /// </summary>
        /// <param name="serial">The <see cref="string"/> to update the panel.</param>
        void Display20Label_IndirectRichText(string serial);

        /// <summary>
        /// PublicDisplays.PublicDisplayRouting.Display 2 Button.Indirect Rich Text Feedback
        /// </summary>
        /// <param name="callback">The <see cref="string"/> delegate to update the panel.</param>
        void Display2Button_IndirectRichText(PublicDisplayRoutingStringInputSigDelegate callback);

        /// <summary>
        /// PublicDisplays.PublicDisplayRouting.Display 2 Button.Indirect Rich Text Feedback
        /// </summary>
        /// <param name="serial">The <see cref="string"/> to update the panel.</param>
        void Display2Button_IndirectRichText(string serial);

        /// <summary>
        /// PublicDisplays.PublicDisplayRouting.Display 2 Label.Indirect Rich Text Feedback
        /// </summary>
        /// <param name="callback">The <see cref="string"/> delegate to update the panel.</param>
        void Display2Label_IndirectRichText(PublicDisplayRoutingStringInputSigDelegate callback);

        /// <summary>
        /// PublicDisplays.PublicDisplayRouting.Display 2 Label.Indirect Rich Text Feedback
        /// </summary>
        /// <param name="serial">The <see cref="string"/> to update the panel.</param>
        void Display2Label_IndirectRichText(string serial);

        /// <summary>
        /// PublicDisplays.PublicDisplayRouting.Display 3 Button.Indirect Rich Text Feedback
        /// </summary>
        /// <param name="callback">The <see cref="string"/> delegate to update the panel.</param>
        void Display3Button_IndirectRichText(PublicDisplayRoutingStringInputSigDelegate callback);

        /// <summary>
        /// PublicDisplays.PublicDisplayRouting.Display 3 Button.Indirect Rich Text Feedback
        /// </summary>
        /// <param name="serial">The <see cref="string"/> to update the panel.</param>
        void Display3Button_IndirectRichText(string serial);

        /// <summary>
        /// PublicDisplays.PublicDisplayRouting.Display 3 Label.Indirect Rich Text Feedback
        /// </summary>
        /// <param name="callback">The <see cref="string"/> delegate to update the panel.</param>
        void Display3Label_IndirectRichText(PublicDisplayRoutingStringInputSigDelegate callback);

        /// <summary>
        /// PublicDisplays.PublicDisplayRouting.Display 3 Label.Indirect Rich Text Feedback
        /// </summary>
        /// <param name="serial">The <see cref="string"/> to update the panel.</param>
        void Display3Label_IndirectRichText(string serial);

        /// <summary>
        /// PublicDisplays.PublicDisplayRouting.Display 4 Button.Indirect Rich Text Feedback
        /// </summary>
        /// <param name="callback">The <see cref="string"/> delegate to update the panel.</param>
        void Display4Button_IndirectRichText(PublicDisplayRoutingStringInputSigDelegate callback);

        /// <summary>
        /// PublicDisplays.PublicDisplayRouting.Display 4 Button.Indirect Rich Text Feedback
        /// </summary>
        /// <param name="serial">The <see cref="string"/> to update the panel.</param>
        void Display4Button_IndirectRichText(string serial);

        /// <summary>
        /// PublicDisplays.PublicDisplayRouting.Display 4 Label.Indirect Rich Text Feedback
        /// </summary>
        /// <param name="callback">The <see cref="string"/> delegate to update the panel.</param>
        void Display4Label_IndirectRichText(PublicDisplayRoutingStringInputSigDelegate callback);

        /// <summary>
        /// PublicDisplays.PublicDisplayRouting.Display 4 Label.Indirect Rich Text Feedback
        /// </summary>
        /// <param name="serial">The <see cref="string"/> to update the panel.</param>
        void Display4Label_IndirectRichText(string serial);

        /// <summary>
        /// PublicDisplays.PublicDisplayRouting.Display 5 Button.Indirect Rich Text Feedback
        /// </summary>
        /// <param name="callback">The <see cref="string"/> delegate to update the panel.</param>
        void Display5Button_IndirectRichText(PublicDisplayRoutingStringInputSigDelegate callback);

        /// <summary>
        /// PublicDisplays.PublicDisplayRouting.Display 5 Button.Indirect Rich Text Feedback
        /// </summary>
        /// <param name="serial">The <see cref="string"/> to update the panel.</param>
        void Display5Button_IndirectRichText(string serial);

        /// <summary>
        /// PublicDisplays.PublicDisplayRouting.Display 5 Label.Indirect Rich Text Feedback
        /// </summary>
        /// <param name="callback">The <see cref="string"/> delegate to update the panel.</param>
        void Display5Label_IndirectRichText(PublicDisplayRoutingStringInputSigDelegate callback);

        /// <summary>
        /// PublicDisplays.PublicDisplayRouting.Display 5 Label.Indirect Rich Text Feedback
        /// </summary>
        /// <param name="serial">The <see cref="string"/> to update the panel.</param>
        void Display5Label_IndirectRichText(string serial);

        /// <summary>
        /// PublicDisplays.PublicDisplayRouting.Display 6 Button.Indirect Rich Text Feedback
        /// </summary>
        /// <param name="callback">The <see cref="string"/> delegate to update the panel.</param>
        void Display6Button_IndirectRichText(PublicDisplayRoutingStringInputSigDelegate callback);

        /// <summary>
        /// PublicDisplays.PublicDisplayRouting.Display 6 Button.Indirect Rich Text Feedback
        /// </summary>
        /// <param name="serial">The <see cref="string"/> to update the panel.</param>
        void Display6Button_IndirectRichText(string serial);

        /// <summary>
        /// PublicDisplays.PublicDisplayRouting.Display 6 Label.Indirect Rich Text Feedback
        /// </summary>
        /// <param name="callback">The <see cref="string"/> delegate to update the panel.</param>
        void Display6Label_IndirectRichText(PublicDisplayRoutingStringInputSigDelegate callback);

        /// <summary>
        /// PublicDisplays.PublicDisplayRouting.Display 6 Label.Indirect Rich Text Feedback
        /// </summary>
        /// <param name="serial">The <see cref="string"/> to update the panel.</param>
        void Display6Label_IndirectRichText(string serial);

        /// <summary>
        /// PublicDisplays.PublicDisplayRouting.Display 7 Button.Indirect Rich Text Feedback
        /// </summary>
        /// <param name="callback">The <see cref="string"/> delegate to update the panel.</param>
        void Display7Button_IndirectRichText(PublicDisplayRoutingStringInputSigDelegate callback);

        /// <summary>
        /// PublicDisplays.PublicDisplayRouting.Display 7 Button.Indirect Rich Text Feedback
        /// </summary>
        /// <param name="serial">The <see cref="string"/> to update the panel.</param>
        void Display7Button_IndirectRichText(string serial);

        /// <summary>
        /// PublicDisplays.PublicDisplayRouting.Display 7 Label.Indirect Rich Text Feedback
        /// </summary>
        /// <param name="callback">The <see cref="string"/> delegate to update the panel.</param>
        void Display7Label_IndirectRichText(PublicDisplayRoutingStringInputSigDelegate callback);

        /// <summary>
        /// PublicDisplays.PublicDisplayRouting.Display 7 Label.Indirect Rich Text Feedback
        /// </summary>
        /// <param name="serial">The <see cref="string"/> to update the panel.</param>
        void Display7Label_IndirectRichText(string serial);

        /// <summary>
        /// PublicDisplays.PublicDisplayRouting.Display 8 Button.Indirect Rich Text Feedback
        /// </summary>
        /// <param name="callback">The <see cref="string"/> delegate to update the panel.</param>
        void Display8Button_IndirectRichText(PublicDisplayRoutingStringInputSigDelegate callback);

        /// <summary>
        /// PublicDisplays.PublicDisplayRouting.Display 8 Button.Indirect Rich Text Feedback
        /// </summary>
        /// <param name="serial">The <see cref="string"/> to update the panel.</param>
        void Display8Button_IndirectRichText(string serial);

        /// <summary>
        /// PublicDisplays.PublicDisplayRouting.Display 8 Label.Indirect Rich Text Feedback
        /// </summary>
        /// <param name="callback">The <see cref="string"/> delegate to update the panel.</param>
        void Display8Label_IndirectRichText(PublicDisplayRoutingStringInputSigDelegate callback);

        /// <summary>
        /// PublicDisplays.PublicDisplayRouting.Display 8 Label.Indirect Rich Text Feedback
        /// </summary>
        /// <param name="serial">The <see cref="string"/> to update the panel.</param>
        void Display8Label_IndirectRichText(string serial);

        /// <summary>
        /// PublicDisplays.PublicDisplayRouting.Display 9 Button.Indirect Rich Text Feedback
        /// </summary>
        /// <param name="callback">The <see cref="string"/> delegate to update the panel.</param>
        void Display9Button_IndirectRichText(PublicDisplayRoutingStringInputSigDelegate callback);

        /// <summary>
        /// PublicDisplays.PublicDisplayRouting.Display 9 Button.Indirect Rich Text Feedback
        /// </summary>
        /// <param name="serial">The <see cref="string"/> to update the panel.</param>
        void Display9Button_IndirectRichText(string serial);

        /// <summary>
        /// PublicDisplays.PublicDisplayRouting.Display 9 Label.Indirect Rich Text Feedback
        /// </summary>
        /// <param name="callback">The <see cref="string"/> delegate to update the panel.</param>
        void Display9Label_IndirectRichText(PublicDisplayRoutingStringInputSigDelegate callback);

        /// <summary>
        /// PublicDisplays.PublicDisplayRouting.Display 9 Label.Indirect Rich Text Feedback
        /// </summary>
        /// <param name="serial">The <see cref="string"/> to update the panel.</param>
        void Display9Label_IndirectRichText(string serial);

        /// <summary>
        /// PublicDisplays.PublicDisplayRouting.Source 1 Button.Indirect Rich Text Feedback
        /// </summary>
        /// <param name="callback">The <see cref="string"/> delegate to update the panel.</param>
        void Source1Button_IndirectRichText(PublicDisplayRoutingStringInputSigDelegate callback);

        /// <summary>
        /// PublicDisplays.PublicDisplayRouting.Source 1 Button.Indirect Rich Text Feedback
        /// </summary>
        /// <param name="serial">The <see cref="string"/> to update the panel.</param>
        void Source1Button_IndirectRichText(string serial);

        /// <summary>
        /// PublicDisplays.PublicDisplayRouting.Source 2 Button.Indirect Rich Text Feedback
        /// </summary>
        /// <param name="callback">The <see cref="string"/> delegate to update the panel.</param>
        void Source2Button_IndirectRichText(PublicDisplayRoutingStringInputSigDelegate callback);

        /// <summary>
        /// PublicDisplays.PublicDisplayRouting.Source 2 Button.Indirect Rich Text Feedback
        /// </summary>
        /// <param name="serial">The <see cref="string"/> to update the panel.</param>
        void Source2Button_IndirectRichText(string serial);

        /// <summary>
        /// PublicDisplays.PublicDisplayRouting.Source 3 Button.Indirect Rich Text Feedback
        /// </summary>
        /// <param name="callback">The <see cref="string"/> delegate to update the panel.</param>
        void Source3Button_IndirectRichText(PublicDisplayRoutingStringInputSigDelegate callback);

        /// <summary>
        /// PublicDisplays.PublicDisplayRouting.Source 3 Button.Indirect Rich Text Feedback
        /// </summary>
        /// <param name="serial">The <see cref="string"/> to update the panel.</param>
        void Source3Button_IndirectRichText(string serial);

        /// <summary>
        /// PublicDisplays.PublicDisplayRouting.Source 4 Button.Indirect Rich Text Feedback
        /// </summary>
        /// <param name="callback">The <see cref="string"/> delegate to update the panel.</param>
        void Source4Button_IndirectRichText(PublicDisplayRoutingStringInputSigDelegate callback);

        /// <summary>
        /// PublicDisplays.PublicDisplayRouting.Source 4 Button.Indirect Rich Text Feedback
        /// </summary>
        /// <param name="serial">The <see cref="string"/> to update the panel.</param>
        void Source4Button_IndirectRichText(string serial);

        /// <summary>
        /// PublicDisplays.PublicDisplayRouting.Source 5 Button.Indirect Rich Text Feedback
        /// </summary>
        /// <param name="callback">The <see cref="string"/> delegate to update the panel.</param>
        void Source5Button_IndirectRichText(PublicDisplayRoutingStringInputSigDelegate callback);

        /// <summary>
        /// PublicDisplays.PublicDisplayRouting.Source 5 Button.Indirect Rich Text Feedback
        /// </summary>
        /// <param name="serial">The <see cref="string"/> to update the panel.</param>
        void Source5Button_IndirectRichText(string serial);

        /// <summary>
        /// PublicDisplays.PublicDisplayRouting.Source 6 Button.Indirect Rich Text Feedback
        /// </summary>
        /// <param name="callback">The <see cref="string"/> delegate to update the panel.</param>
        void Source6Button_IndirectRichText(PublicDisplayRoutingStringInputSigDelegate callback);

        /// <summary>
        /// PublicDisplays.PublicDisplayRouting.Source 6 Button.Indirect Rich Text Feedback
        /// </summary>
        /// <param name="serial">The <see cref="string"/> to update the panel.</param>
        void Source6Button_IndirectRichText(string serial);

        /// <summary>
        /// PublicDisplays.PublicDisplayRouting.Source 7 Button.Indirect Rich Text Feedback
        /// </summary>
        /// <param name="callback">The <see cref="string"/> delegate to update the panel.</param>
        void Source7Button_IndirectRichText(PublicDisplayRoutingStringInputSigDelegate callback);

        /// <summary>
        /// PublicDisplays.PublicDisplayRouting.Source 7 Button.Indirect Rich Text Feedback
        /// </summary>
        /// <param name="serial">The <see cref="string"/> to update the panel.</param>
        void Source7Button_IndirectRichText(string serial);

        /// <summary>
        /// PublicDisplays.PublicDisplayRouting.Source 8 Button.Indirect Rich Text Feedback
        /// </summary>
        /// <param name="callback">The <see cref="string"/> delegate to update the panel.</param>
        void Source8Button_IndirectRichText(PublicDisplayRoutingStringInputSigDelegate callback);

        /// <summary>
        /// PublicDisplays.PublicDisplayRouting.Source 8 Button.Indirect Rich Text Feedback
        /// </summary>
        /// <param name="serial">The <see cref="string"/> to update the panel.</param>
        void Source8Button_IndirectRichText(string serial);

        /// <summary>
        /// PublicDisplays.PublicDisplayRouting.Source 9 Button.Indirect Rich Text Feedback
        /// </summary>
        /// <param name="callback">The <see cref="string"/> delegate to update the panel.</param>
        void Source9Button_IndirectRichText(PublicDisplayRoutingStringInputSigDelegate callback);

        /// <summary>
        /// PublicDisplays.PublicDisplayRouting.Source 9 Button.Indirect Rich Text Feedback
        /// </summary>
        /// <param name="serial">The <see cref="string"/> to update the panel.</param>
        void Source9Button_IndirectRichText(string serial);

        /// <summary>
        /// PublicDisplays.PublicDisplayRouting.Source Clear Button.Indirect Rich Text Feedback
        /// </summary>
        /// <param name="callback">The <see cref="string"/> delegate to update the panel.</param>
        void SourceClearButton_IndirectRichText(PublicDisplayRoutingStringInputSigDelegate callback);

        /// <summary>
        /// PublicDisplays.PublicDisplayRouting.Source Clear Button.Indirect Rich Text Feedback
        /// </summary>
        /// <param name="serial">The <see cref="string"/> to update the panel.</param>
        void SourceClearButton_IndirectRichText(string serial);

        /// <summary>
        /// PublicDisplays.PublicDisplayRouting.Source 1 Button.Icon Feedback
        /// </summary>
        /// <param name="callback">The <see cref="string"/> delegate to update the panel.</param>
        void Source1Button_Icon(PublicDisplayRoutingStringInputSigDelegate callback);

        /// <summary>
        /// PublicDisplays.PublicDisplayRouting.Source 1 Button.Icon Feedback
        /// </summary>
        /// <param name="serial">The <see cref="string"/> to update the panel.</param>
        void Source1Button_Icon(string serial);

        /// <summary>
        /// PublicDisplays.PublicDisplayRouting.Source 2 Button.Icon Feedback
        /// </summary>
        /// <param name="callback">The <see cref="string"/> delegate to update the panel.</param>
        void Source2Button_Icon(PublicDisplayRoutingStringInputSigDelegate callback);

        /// <summary>
        /// PublicDisplays.PublicDisplayRouting.Source 2 Button.Icon Feedback
        /// </summary>
        /// <param name="serial">The <see cref="string"/> to update the panel.</param>
        void Source2Button_Icon(string serial);

        /// <summary>
        /// PublicDisplays.PublicDisplayRouting.Source 3 Button.Icon Feedback
        /// </summary>
        /// <param name="callback">The <see cref="string"/> delegate to update the panel.</param>
        void Source3Button_Icon(PublicDisplayRoutingStringInputSigDelegate callback);

        /// <summary>
        /// PublicDisplays.PublicDisplayRouting.Source 3 Button.Icon Feedback
        /// </summary>
        /// <param name="serial">The <see cref="string"/> to update the panel.</param>
        void Source3Button_Icon(string serial);

        /// <summary>
        /// PublicDisplays.PublicDisplayRouting.Source 4 Button.Icon Feedback
        /// </summary>
        /// <param name="callback">The <see cref="string"/> delegate to update the panel.</param>
        void Source4Button_Icon(PublicDisplayRoutingStringInputSigDelegate callback);

        /// <summary>
        /// PublicDisplays.PublicDisplayRouting.Source 4 Button.Icon Feedback
        /// </summary>
        /// <param name="serial">The <see cref="string"/> to update the panel.</param>
        void Source4Button_Icon(string serial);

        /// <summary>
        /// PublicDisplays.PublicDisplayRouting.Source 5 Button.Icon Feedback
        /// </summary>
        /// <param name="callback">The <see cref="string"/> delegate to update the panel.</param>
        void Source5Button_Icon(PublicDisplayRoutingStringInputSigDelegate callback);

        /// <summary>
        /// PublicDisplays.PublicDisplayRouting.Source 5 Button.Icon Feedback
        /// </summary>
        /// <param name="serial">The <see cref="string"/> to update the panel.</param>
        void Source5Button_Icon(string serial);

        /// <summary>
        /// PublicDisplays.PublicDisplayRouting.Source 6 Button.Icon Feedback
        /// </summary>
        /// <param name="callback">The <see cref="string"/> delegate to update the panel.</param>
        void Source6Button_Icon(PublicDisplayRoutingStringInputSigDelegate callback);

        /// <summary>
        /// PublicDisplays.PublicDisplayRouting.Source 6 Button.Icon Feedback
        /// </summary>
        /// <param name="serial">The <see cref="string"/> to update the panel.</param>
        void Source6Button_Icon(string serial);

        /// <summary>
        /// PublicDisplays.PublicDisplayRouting.Source 7 Button.Icon Feedback
        /// </summary>
        /// <param name="callback">The <see cref="string"/> delegate to update the panel.</param>
        void Source7Button_Icon(PublicDisplayRoutingStringInputSigDelegate callback);

        /// <summary>
        /// PublicDisplays.PublicDisplayRouting.Source 7 Button.Icon Feedback
        /// </summary>
        /// <param name="serial">The <see cref="string"/> to update the panel.</param>
        void Source7Button_Icon(string serial);

        /// <summary>
        /// PublicDisplays.PublicDisplayRouting.Source 8 Button.Icon Feedback
        /// </summary>
        /// <param name="callback">The <see cref="string"/> delegate to update the panel.</param>
        void Source8Button_Icon(PublicDisplayRoutingStringInputSigDelegate callback);

        /// <summary>
        /// PublicDisplays.PublicDisplayRouting.Source 8 Button.Icon Feedback
        /// </summary>
        /// <param name="serial">The <see cref="string"/> to update the panel.</param>
        void Source8Button_Icon(string serial);

        /// <summary>
        /// PublicDisplays.PublicDisplayRouting.Source 9 Button.Icon Feedback
        /// </summary>
        /// <param name="callback">The <see cref="string"/> delegate to update the panel.</param>
        void Source9Button_Icon(PublicDisplayRoutingStringInputSigDelegate callback);

        /// <summary>
        /// PublicDisplays.PublicDisplayRouting.Source 9 Button.Icon Feedback
        /// </summary>
        /// <param name="serial">The <see cref="string"/> to update the panel.</param>
        void Source9Button_Icon(string serial);

        /// <summary>
        /// PublicDisplays.PublicDisplayRouting.Source Clear Button.Icon Feedback
        /// </summary>
        /// <param name="callback">The <see cref="string"/> delegate to update the panel.</param>
        void SourceClearButton_Icon(PublicDisplayRoutingStringInputSigDelegate callback);

        /// <summary>
        /// PublicDisplays.PublicDisplayRouting.Source Clear Button.Icon Feedback
        /// </summary>
        /// <param name="serial">The <see cref="string"/> to update the panel.</param>
        void SourceClearButton_Icon(string serial);
    }

    /// <summary>
    /// Digital callback used in feedback events.
    /// </summary>
    /// <param name="boolInputSig">The <see cref="BoolInputSig"/> joinInfo data.</param>
    /// <param name="publicdisplayrouting">The <see cref="IPublicDisplayRouting"/> on which to apply the feedback.</param>
    public delegate void PublicDisplayRoutingBoolInputSigDelegate(BoolInputSig boolInputSig, IPublicDisplayRouting publicdisplayrouting);
    /// <summary>
    /// Digital callback used in feedback events.
    /// </summary>
    /// <param name="stringInputSig">The <see cref="StringInputSig"/> joinInfo data.</param>
    /// <param name="publicdisplayrouting">The <see cref="IPublicDisplayRouting"/> on which to apply the feedback.</param>
    public delegate void PublicDisplayRoutingStringInputSigDelegate(StringInputSig stringInputSig, IPublicDisplayRouting publicdisplayrouting);

    /// <summary>
    /// PublicDisplayRouting
    /// </summary>
    internal partial class PublicDisplayRouting : IPublicDisplayRouting, IDisposable
    {
        #region Standard CH5 Component members

        private ComponentMediator ComponentMediator { get; set; }

        public object UserObject { get; set; }

        /// <summary>
        /// Gets the ControlJoinId a.k.a. SmartObjectId.  This Id identifies the extender symbol.
        /// </summary>
        public uint ControlJoinId { get; private set; }

        private IList<BasicTriListWithSmartObject> _devices;

        /// <summary>
        /// Gets the list of devices.
        /// </summary>
        public IList<BasicTriListWithSmartObject> Devices { get { return _devices; } }

        #endregion

        #region Joins

        private static class Joins
        {
            /// <summary>
            /// Digital signals,
            /// </summary>
            internal static class Booleans
            {
                /// <summary>
                /// Output or Event digital joinInfo from panel to Control System: PublicDisplays.PublicDisplayRouting.Display10Button.Press
                /// PublicDisplays.PublicDisplayRouting.Display 10 Button.Press
                /// </summary>
                public const uint Display10Button_PressEvent = 2;

                /// <summary>
                /// Output or Event digital joinInfo from panel to Control System: PublicDisplays.PublicDisplayRouting.Display11Button.Press
                /// PublicDisplays.PublicDisplayRouting.Display 11 Button.Press
                /// </summary>
                public const uint Display11Button_PressEvent = 3;

                /// <summary>
                /// Output or Event digital joinInfo from panel to Control System: PublicDisplays.PublicDisplayRouting.Display12Button.Press
                /// PublicDisplays.PublicDisplayRouting.Display 12 Button.Press
                /// </summary>
                public const uint Display12Button_PressEvent = 4;

                /// <summary>
                /// Output or Event digital joinInfo from panel to Control System: PublicDisplays.PublicDisplayRouting.Display13Button.Press
                /// PublicDisplays.PublicDisplayRouting.Display 13 Button.Press
                /// </summary>
                public const uint Display13Button_PressEvent = 5;

                /// <summary>
                /// Output or Event digital joinInfo from panel to Control System: PublicDisplays.PublicDisplayRouting.Display14Button.Press
                /// PublicDisplays.PublicDisplayRouting.Display 14 Button.Press
                /// </summary>
                public const uint Display14Button_PressEvent = 6;

                /// <summary>
                /// Output or Event digital joinInfo from panel to Control System: PublicDisplays.PublicDisplayRouting.Display15Button.Press
                /// PublicDisplays.PublicDisplayRouting.Display 15 Button.Press
                /// </summary>
                public const uint Display15Button_PressEvent = 7;

                /// <summary>
                /// Output or Event digital joinInfo from panel to Control System: PublicDisplays.PublicDisplayRouting.Display16Button.Press
                /// PublicDisplays.PublicDisplayRouting.Display 16 Button.Press
                /// </summary>
                public const uint Display16Button_PressEvent = 8;

                /// <summary>
                /// Output or Event digital joinInfo from panel to Control System: PublicDisplays.PublicDisplayRouting.Display17Button.Press
                /// PublicDisplays.PublicDisplayRouting.Display 17 Button.Press
                /// </summary>
                public const uint Display17Button_PressEvent = 9;

                /// <summary>
                /// Output or Event digital joinInfo from panel to Control System: PublicDisplays.PublicDisplayRouting.Display18Button.Press
                /// PublicDisplays.PublicDisplayRouting.Display 18 Button.Press
                /// </summary>
                public const uint Display18Button_PressEvent = 10;

                /// <summary>
                /// Output or Event digital joinInfo from panel to Control System: PublicDisplays.PublicDisplayRouting.Display19Button.Press
                /// PublicDisplays.PublicDisplayRouting.Display 19 Button.Press
                /// </summary>
                public const uint Display19Button_PressEvent = 11;

                /// <summary>
                /// Output or Event digital joinInfo from panel to Control System: PublicDisplays.PublicDisplayRouting.Display1Button.Press
                /// PublicDisplays.PublicDisplayRouting.Display 1 Button.Press
                /// </summary>
                public const uint Display1Button_PressEvent = 12;

                /// <summary>
                /// Output or Event digital joinInfo from panel to Control System: PublicDisplays.PublicDisplayRouting.Display20Button.Press
                /// PublicDisplays.PublicDisplayRouting.Display 20 Button.Press
                /// </summary>
                public const uint Display20Button_PressEvent = 13;

                /// <summary>
                /// Output or Event digital joinInfo from panel to Control System: PublicDisplays.PublicDisplayRouting.Display2Button.Press
                /// PublicDisplays.PublicDisplayRouting.Display 2 Button.Press
                /// </summary>
                public const uint Display2Button_PressEvent = 14;

                /// <summary>
                /// Output or Event digital joinInfo from panel to Control System: PublicDisplays.PublicDisplayRouting.Display3Button.Press
                /// PublicDisplays.PublicDisplayRouting.Display 3 Button.Press
                /// </summary>
                public const uint Display3Button_PressEvent = 15;

                /// <summary>
                /// Output or Event digital joinInfo from panel to Control System: PublicDisplays.PublicDisplayRouting.Display4Button.Press
                /// PublicDisplays.PublicDisplayRouting.Display 4 Button.Press
                /// </summary>
                public const uint Display4Button_PressEvent = 16;

                /// <summary>
                /// Output or Event digital joinInfo from panel to Control System: PublicDisplays.PublicDisplayRouting.Display5Button.Press
                /// PublicDisplays.PublicDisplayRouting.Display 5 Button.Press
                /// </summary>
                public const uint Display5Button_PressEvent = 17;

                /// <summary>
                /// Output or Event digital joinInfo from panel to Control System: PublicDisplays.PublicDisplayRouting.Display6Button.Press
                /// PublicDisplays.PublicDisplayRouting.Display 6 Button.Press
                /// </summary>
                public const uint Display6Button_PressEvent = 18;

                /// <summary>
                /// Output or Event digital joinInfo from panel to Control System: PublicDisplays.PublicDisplayRouting.Display7Button.Press
                /// PublicDisplays.PublicDisplayRouting.Display 7 Button.Press
                /// </summary>
                public const uint Display7Button_PressEvent = 19;

                /// <summary>
                /// Output or Event digital joinInfo from panel to Control System: PublicDisplays.PublicDisplayRouting.Display8Button.Press
                /// PublicDisplays.PublicDisplayRouting.Display 8 Button.Press
                /// </summary>
                public const uint Display8Button_PressEvent = 20;

                /// <summary>
                /// Output or Event digital joinInfo from panel to Control System: PublicDisplays.PublicDisplayRouting.Display9Button.Press
                /// PublicDisplays.PublicDisplayRouting.Display 9 Button.Press
                /// </summary>
                public const uint Display9Button_PressEvent = 21;

                /// <summary>
                /// Output or Event digital joinInfo from panel to Control System: PublicDisplays.PublicDisplayRouting.Source1Button.Press
                /// PublicDisplays.PublicDisplayRouting.Source 1 Button.Press
                /// </summary>
                public const uint Source1Button_PressEvent = 22;

                /// <summary>
                /// Output or Event digital joinInfo from panel to Control System: PublicDisplays.PublicDisplayRouting.Source2Button.Press
                /// PublicDisplays.PublicDisplayRouting.Source 2 Button.Press
                /// </summary>
                public const uint Source2Button_PressEvent = 23;

                /// <summary>
                /// Output or Event digital joinInfo from panel to Control System: PublicDisplays.PublicDisplayRouting.Source3Button.Press
                /// PublicDisplays.PublicDisplayRouting.Source 3 Button.Press
                /// </summary>
                public const uint Source3Button_PressEvent = 24;

                /// <summary>
                /// Output or Event digital joinInfo from panel to Control System: PublicDisplays.PublicDisplayRouting.Source4Button.Press
                /// PublicDisplays.PublicDisplayRouting.Source 4 Button.Press
                /// </summary>
                public const uint Source4Button_PressEvent = 25;

                /// <summary>
                /// Output or Event digital joinInfo from panel to Control System: PublicDisplays.PublicDisplayRouting.Source5Button.Press
                /// PublicDisplays.PublicDisplayRouting.Source 5 Button.Press
                /// </summary>
                public const uint Source5Button_PressEvent = 26;

                /// <summary>
                /// Output or Event digital joinInfo from panel to Control System: PublicDisplays.PublicDisplayRouting.Source6Button.Press
                /// PublicDisplays.PublicDisplayRouting.Source 6 Button.Press
                /// </summary>
                public const uint Source6Button_PressEvent = 27;

                /// <summary>
                /// Output or Event digital joinInfo from panel to Control System: PublicDisplays.PublicDisplayRouting.Source7Button.Press
                /// PublicDisplays.PublicDisplayRouting.Source 7 Button.Press
                /// </summary>
                public const uint Source7Button_PressEvent = 28;

                /// <summary>
                /// Output or Event digital joinInfo from panel to Control System: PublicDisplays.PublicDisplayRouting.Source8Button.Press
                /// PublicDisplays.PublicDisplayRouting.Source 8 Button.Press
                /// </summary>
                public const uint Source8Button_PressEvent = 29;

                /// <summary>
                /// Output or Event digital joinInfo from panel to Control System: PublicDisplays.PublicDisplayRouting.Source9Button.Press
                /// PublicDisplays.PublicDisplayRouting.Source 9 Button.Press
                /// </summary>
                public const uint Source9Button_PressEvent = 30;

                /// <summary>
                /// Output or Event digital joinInfo from panel to Control System: PublicDisplays.PublicDisplayRouting.SourceClearButton.Press
                /// PublicDisplays.PublicDisplayRouting.Source Clear Button.Press
                /// </summary>
                public const uint SourceClearButton_PressEvent = 31;


                /// <summary>
                /// Input or Feedback digital joinInfo from Control System to panel: PublicDisplays.PublicDisplayRouting.Display10Button.Visibility_fb
                /// PublicDisplays.PublicDisplayRouting.Display 10 Button.Visibility
                /// </summary>
                public const uint Display10Button_Visibility_fbState = 1;

                /// <summary>
                /// Input or Feedback digital joinInfo from Control System to panel: PublicDisplays.PublicDisplayRouting.Display11Button.Visibility_fb
                /// PublicDisplays.PublicDisplayRouting.Display 11 Button.Visibility
                /// </summary>
                public const uint Display11Button_Visibility_fbState = 2;

                /// <summary>
                /// Input or Feedback digital joinInfo from Control System to panel: PublicDisplays.PublicDisplayRouting.Display12Button.Visibility_fb
                /// PublicDisplays.PublicDisplayRouting.Display 12 Button.Visibility
                /// </summary>
                public const uint Display12Button_Visibility_fbState = 3;

                /// <summary>
                /// Input or Feedback digital joinInfo from Control System to panel: PublicDisplays.PublicDisplayRouting.Display13Button.Visibility_fb
                /// PublicDisplays.PublicDisplayRouting.Display 13 Button.Visibility
                /// </summary>
                public const uint Display13Button_Visibility_fbState = 4;

                /// <summary>
                /// Input or Feedback digital joinInfo from Control System to panel: PublicDisplays.PublicDisplayRouting.Display14Button.Visibility_fb
                /// PublicDisplays.PublicDisplayRouting.Display 14 Button.Visibility
                /// </summary>
                public const uint Display14Button_Visibility_fbState = 5;

                /// <summary>
                /// Input or Feedback digital joinInfo from Control System to panel: PublicDisplays.PublicDisplayRouting.Display15Button.Visibility_fb
                /// PublicDisplays.PublicDisplayRouting.Display 15 Button.Visibility
                /// </summary>
                public const uint Display15Button_Visibility_fbState = 6;

                /// <summary>
                /// Input or Feedback digital joinInfo from Control System to panel: PublicDisplays.PublicDisplayRouting.Display16Button.Visibility_fb
                /// PublicDisplays.PublicDisplayRouting.Display 16 Button.Visibility
                /// </summary>
                public const uint Display16Button_Visibility_fbState = 7;

                /// <summary>
                /// Input or Feedback digital joinInfo from Control System to panel: PublicDisplays.PublicDisplayRouting.Display17Button.Visibility_fb
                /// PublicDisplays.PublicDisplayRouting.Display 17 Button.Visibility
                /// </summary>
                public const uint Display17Button_Visibility_fbState = 8;

                /// <summary>
                /// Input or Feedback digital joinInfo from Control System to panel: PublicDisplays.PublicDisplayRouting.Display18Button.Visibility_fb
                /// PublicDisplays.PublicDisplayRouting.Display 18 Button.Visibility
                /// </summary>
                public const uint Display18Button_Visibility_fbState = 9;

                /// <summary>
                /// Input or Feedback digital joinInfo from Control System to panel: PublicDisplays.PublicDisplayRouting.Display19Button.Visibility_fb
                /// PublicDisplays.PublicDisplayRouting.Display 19 Button.Visibility
                /// </summary>
                public const uint Display19Button_Visibility_fbState = 10;

                /// <summary>
                /// Input or Feedback digital joinInfo from Control System to panel: PublicDisplays.PublicDisplayRouting.Display1Button.Visibility_fb
                /// PublicDisplays.PublicDisplayRouting.Display 1 Button.Visibility
                /// </summary>
                public const uint Display1Button_Visibility_fbState = 11;

                /// <summary>
                /// Input or Feedback digital joinInfo from Control System to panel: PublicDisplays.PublicDisplayRouting.Display20Button.Visibility_fb
                /// PublicDisplays.PublicDisplayRouting.Display 20 Button.Visibility
                /// </summary>
                public const uint Display20Button_Visibility_fbState = 12;

                /// <summary>
                /// Input or Feedback digital joinInfo from Control System to panel: PublicDisplays.PublicDisplayRouting.Display2Button.Visibility_fb
                /// PublicDisplays.PublicDisplayRouting.Display 2 Button.Visibility
                /// </summary>
                public const uint Display2Button_Visibility_fbState = 13;

                /// <summary>
                /// Input or Feedback digital joinInfo from Control System to panel: PublicDisplays.PublicDisplayRouting.Display3Button.Visibility_fb
                /// PublicDisplays.PublicDisplayRouting.Display 3 Button.Visibility
                /// </summary>
                public const uint Display3Button_Visibility_fbState = 14;

                /// <summary>
                /// Input or Feedback digital joinInfo from Control System to panel: PublicDisplays.PublicDisplayRouting.Display4Button.Visibility_fb
                /// PublicDisplays.PublicDisplayRouting.Display 4 Button.Visibility
                /// </summary>
                public const uint Display4Button_Visibility_fbState = 15;

                /// <summary>
                /// Input or Feedback digital joinInfo from Control System to panel: PublicDisplays.PublicDisplayRouting.Display5Button.Visibility_fb
                /// PublicDisplays.PublicDisplayRouting.Display 5 Button.Visibility
                /// </summary>
                public const uint Display5Button_Visibility_fbState = 16;

                /// <summary>
                /// Input or Feedback digital joinInfo from Control System to panel: PublicDisplays.PublicDisplayRouting.Display6Button.Visibility_fb
                /// PublicDisplays.PublicDisplayRouting.Display 6 Button.Visibility
                /// </summary>
                public const uint Display6Button_Visibility_fbState = 17;

                /// <summary>
                /// Input or Feedback digital joinInfo from Control System to panel: PublicDisplays.PublicDisplayRouting.Display7Button.Visibility_fb
                /// PublicDisplays.PublicDisplayRouting.Display 7 Button.Visibility
                /// </summary>
                public const uint Display7Button_Visibility_fbState = 18;

                /// <summary>
                /// Input or Feedback digital joinInfo from Control System to panel: PublicDisplays.PublicDisplayRouting.Display8Button.Visibility_fb
                /// PublicDisplays.PublicDisplayRouting.Display 8 Button.Visibility
                /// </summary>
                public const uint Display8Button_Visibility_fbState = 19;

                /// <summary>
                /// Input or Feedback digital joinInfo from Control System to panel: PublicDisplays.PublicDisplayRouting.Display9Button.Visibility_fb
                /// PublicDisplays.PublicDisplayRouting.Display 9 Button.Visibility
                /// </summary>
                public const uint Display9Button_Visibility_fbState = 20;

                /// <summary>
                /// Input or Feedback digital joinInfo from Control System to panel: PublicDisplays.PublicDisplayRouting.Source1Button.Visibility_fb
                /// PublicDisplays.PublicDisplayRouting.Source 1 Button.Visibility
                /// </summary>
                public const uint Source1Button_Visibility_fbState = 21;

                /// <summary>
                /// Input or Feedback digital joinInfo from Control System to panel: PublicDisplays.PublicDisplayRouting.Source2Button.Visibility_fb
                /// PublicDisplays.PublicDisplayRouting.Source 2 Button.Visibility
                /// </summary>
                public const uint Source2Button_Visibility_fbState = 22;

                /// <summary>
                /// Input or Feedback digital joinInfo from Control System to panel: PublicDisplays.PublicDisplayRouting.Source3Button.Visibility_fb
                /// PublicDisplays.PublicDisplayRouting.Source 3 Button.Visibility
                /// </summary>
                public const uint Source3Button_Visibility_fbState = 23;

                /// <summary>
                /// Input or Feedback digital joinInfo from Control System to panel: PublicDisplays.PublicDisplayRouting.Source4Button.Visibility_fb
                /// PublicDisplays.PublicDisplayRouting.Source 4 Button.Visibility
                /// </summary>
                public const uint Source4Button_Visibility_fbState = 24;

                /// <summary>
                /// Input or Feedback digital joinInfo from Control System to panel: PublicDisplays.PublicDisplayRouting.Source5Button.Visibility_fb
                /// PublicDisplays.PublicDisplayRouting.Source 5 Button.Visibility
                /// </summary>
                public const uint Source5Button_Visibility_fbState = 25;

                /// <summary>
                /// Input or Feedback digital joinInfo from Control System to panel: PublicDisplays.PublicDisplayRouting.Source6Button.Visibility_fb
                /// PublicDisplays.PublicDisplayRouting.Source 6 Button.Visibility
                /// </summary>
                public const uint Source6Button_Visibility_fbState = 26;

                /// <summary>
                /// Input or Feedback digital joinInfo from Control System to panel: PublicDisplays.PublicDisplayRouting.Source7Button.Visibility_fb
                /// PublicDisplays.PublicDisplayRouting.Source 7 Button.Visibility
                /// </summary>
                public const uint Source7Button_Visibility_fbState = 27;

                /// <summary>
                /// Input or Feedback digital joinInfo from Control System to panel: PublicDisplays.PublicDisplayRouting.Source8Button.Visibility_fb
                /// PublicDisplays.PublicDisplayRouting.Source 8 Button.Visibility
                /// </summary>
                public const uint Source8Button_Visibility_fbState = 28;

                /// <summary>
                /// Input or Feedback digital joinInfo from Control System to panel: PublicDisplays.PublicDisplayRouting.Source9Button.Visibility_fb
                /// PublicDisplays.PublicDisplayRouting.Source 9 Button.Visibility
                /// </summary>
                public const uint Source9Button_Visibility_fbState = 29;

                /// <summary>
                /// Input or Feedback digital joinInfo from Control System to panel: PublicDisplays.PublicDisplayRouting.SourceClearButton.Visibility_fb
                /// PublicDisplays.PublicDisplayRouting.Source Clear Button.Visibility
                /// </summary>
                public const uint SourceClearButton_Visibility_fbState = 30;

                /// <summary>
                /// Input or Feedback digital joinInfo from Control System to panel: PublicDisplays.PublicDisplayRouting.Display10Label.Visibility_fb
                /// PublicDisplays.PublicDisplayRouting.Display 10 Label.Visibility
                /// </summary>
                public const uint Display10Label_Visibility_fbState = 31;

                /// <summary>
                /// Input or Feedback digital joinInfo from Control System to panel: PublicDisplays.PublicDisplayRouting.Display11Label.Visibility_fb
                /// PublicDisplays.PublicDisplayRouting.Display 11 Label.Visibility
                /// </summary>
                public const uint Display11Label_Visibility_fbState = 32;

                /// <summary>
                /// Input or Feedback digital joinInfo from Control System to panel: PublicDisplays.PublicDisplayRouting.Display12Label.Visibility_fb
                /// PublicDisplays.PublicDisplayRouting.Display 12 Label.Visibility
                /// </summary>
                public const uint Display12Label_Visibility_fbState = 33;

                /// <summary>
                /// Input or Feedback digital joinInfo from Control System to panel: PublicDisplays.PublicDisplayRouting.Display13Label.Visibility_fb
                /// PublicDisplays.PublicDisplayRouting.Display 13 Label.Visibility
                /// </summary>
                public const uint Display13Label_Visibility_fbState = 34;

                /// <summary>
                /// Input or Feedback digital joinInfo from Control System to panel: PublicDisplays.PublicDisplayRouting.Display14Label.Visibility_fb
                /// PublicDisplays.PublicDisplayRouting.Display 14 Label.Visibility
                /// </summary>
                public const uint Display14Label_Visibility_fbState = 35;

                /// <summary>
                /// Input or Feedback digital joinInfo from Control System to panel: PublicDisplays.PublicDisplayRouting.Display15Label.Visibility_fb
                /// PublicDisplays.PublicDisplayRouting.Display 15 Label.Visibility
                /// </summary>
                public const uint Display15Label_Visibility_fbState = 36;

                /// <summary>
                /// Input or Feedback digital joinInfo from Control System to panel: PublicDisplays.PublicDisplayRouting.Display16Label.Visibility_fb
                /// PublicDisplays.PublicDisplayRouting.Display 16 Label.Visibility
                /// </summary>
                public const uint Display16Label_Visibility_fbState = 37;

                /// <summary>
                /// Input or Feedback digital joinInfo from Control System to panel: PublicDisplays.PublicDisplayRouting.Display17Label.Visibility_fb
                /// PublicDisplays.PublicDisplayRouting.Display 17 Label.Visibility
                /// </summary>
                public const uint Display17Label_Visibility_fbState = 38;

                /// <summary>
                /// Input or Feedback digital joinInfo from Control System to panel: PublicDisplays.PublicDisplayRouting.Display18Label.Visibility_fb
                /// PublicDisplays.PublicDisplayRouting.Display 18 Label.Visibility
                /// </summary>
                public const uint Display18Label_Visibility_fbState = 39;

                /// <summary>
                /// Input or Feedback digital joinInfo from Control System to panel: PublicDisplays.PublicDisplayRouting.Display19Label.Visibility_fb
                /// PublicDisplays.PublicDisplayRouting.Display 19 Label.Visibility
                /// </summary>
                public const uint Display19Label_Visibility_fbState = 40;

                /// <summary>
                /// Input or Feedback digital joinInfo from Control System to panel: PublicDisplays.PublicDisplayRouting.Display1Label.Visibility_fb
                /// PublicDisplays.PublicDisplayRouting.Display 1 Label.Visibility
                /// </summary>
                public const uint Display1Label_Visibility_fbState = 41;

                /// <summary>
                /// Input or Feedback digital joinInfo from Control System to panel: PublicDisplays.PublicDisplayRouting.Display20Label.Visibility_fb
                /// PublicDisplays.PublicDisplayRouting.Display 20 Label.Visibility
                /// </summary>
                public const uint Display20Label_Visibility_fbState = 42;

                /// <summary>
                /// Input or Feedback digital joinInfo from Control System to panel: PublicDisplays.PublicDisplayRouting.Display2Label.Visibility_fb
                /// PublicDisplays.PublicDisplayRouting.Display 2 Label.Visibility
                /// </summary>
                public const uint Display2Label_Visibility_fbState = 43;

                /// <summary>
                /// Input or Feedback digital joinInfo from Control System to panel: PublicDisplays.PublicDisplayRouting.Display3Label.Visibility_fb
                /// PublicDisplays.PublicDisplayRouting.Display 3 Label.Visibility
                /// </summary>
                public const uint Display3Label_Visibility_fbState = 44;

                /// <summary>
                /// Input or Feedback digital joinInfo from Control System to panel: PublicDisplays.PublicDisplayRouting.Display4Label.Visibility_fb
                /// PublicDisplays.PublicDisplayRouting.Display 4 Label.Visibility
                /// </summary>
                public const uint Display4Label_Visibility_fbState = 45;

                /// <summary>
                /// Input or Feedback digital joinInfo from Control System to panel: PublicDisplays.PublicDisplayRouting.Display5Label.Visibility_fb
                /// PublicDisplays.PublicDisplayRouting.Display 5 Label.Visibility
                /// </summary>
                public const uint Display5Label_Visibility_fbState = 46;

                /// <summary>
                /// Input or Feedback digital joinInfo from Control System to panel: PublicDisplays.PublicDisplayRouting.Display6Label.Visibility_fb
                /// PublicDisplays.PublicDisplayRouting.Display 6 Label.Visibility
                /// </summary>
                public const uint Display6Label_Visibility_fbState = 47;

                /// <summary>
                /// Input or Feedback digital joinInfo from Control System to panel: PublicDisplays.PublicDisplayRouting.Display7Label.Visibility_fb
                /// PublicDisplays.PublicDisplayRouting.Display 7 Label.Visibility
                /// </summary>
                public const uint Display7Label_Visibility_fbState = 48;

                /// <summary>
                /// Input or Feedback digital joinInfo from Control System to panel: PublicDisplays.PublicDisplayRouting.Display8Label.Visibility_fb
                /// PublicDisplays.PublicDisplayRouting.Display 8 Label.Visibility
                /// </summary>
                public const uint Display8Label_Visibility_fbState = 49;

                /// <summary>
                /// Input or Feedback digital joinInfo from Control System to panel: PublicDisplays.PublicDisplayRouting.Display9Label.Visibility_fb
                /// PublicDisplays.PublicDisplayRouting.Display 9 Label.Visibility
                /// </summary>
                public const uint Display9Label_Visibility_fbState = 50;

                /// <summary>
                /// Input or Feedback digital joinInfo from Control System to panel: PublicDisplays.PublicDisplayRouting.Visibility_fb
                /// Public Display Routing.Visibility
                /// </summary>
                public const uint PublicDisplayRouting_Visibility_fbState = 51;

                /// <summary>
                /// Input or Feedback digital joinInfo from Control System to panel: PublicDisplays.PublicDisplayRouting.Source1Button.Selected
                /// PublicDisplays.PublicDisplayRouting.Source 1 Button.Selected
                /// </summary>
                public const uint Source1Button_SelectedState = 53;

                /// <summary>
                /// Input or Feedback digital joinInfo from Control System to panel: PublicDisplays.PublicDisplayRouting.Source2Button.Selected
                /// PublicDisplays.PublicDisplayRouting.Source 2 Button.Selected
                /// </summary>
                public const uint Source2Button_SelectedState = 54;

                /// <summary>
                /// Input or Feedback digital joinInfo from Control System to panel: PublicDisplays.PublicDisplayRouting.Source3Button.Selected
                /// PublicDisplays.PublicDisplayRouting.Source 3 Button.Selected
                /// </summary>
                public const uint Source3Button_SelectedState = 55;

                /// <summary>
                /// Input or Feedback digital joinInfo from Control System to panel: PublicDisplays.PublicDisplayRouting.Source4Button.Selected
                /// PublicDisplays.PublicDisplayRouting.Source 4 Button.Selected
                /// </summary>
                public const uint Source4Button_SelectedState = 56;

                /// <summary>
                /// Input or Feedback digital joinInfo from Control System to panel: PublicDisplays.PublicDisplayRouting.Source5Button.Selected
                /// PublicDisplays.PublicDisplayRouting.Source 5 Button.Selected
                /// </summary>
                public const uint Source5Button_SelectedState = 57;

                /// <summary>
                /// Input or Feedback digital joinInfo from Control System to panel: PublicDisplays.PublicDisplayRouting.Source6Button.Selected
                /// PublicDisplays.PublicDisplayRouting.Source 6 Button.Selected
                /// </summary>
                public const uint Source6Button_SelectedState = 58;

                /// <summary>
                /// Input or Feedback digital joinInfo from Control System to panel: PublicDisplays.PublicDisplayRouting.Source7Button.Selected
                /// PublicDisplays.PublicDisplayRouting.Source 7 Button.Selected
                /// </summary>
                public const uint Source7Button_SelectedState = 59;

                /// <summary>
                /// Input or Feedback digital joinInfo from Control System to panel: PublicDisplays.PublicDisplayRouting.Source8Button.Selected
                /// PublicDisplays.PublicDisplayRouting.Source 8 Button.Selected
                /// </summary>
                public const uint Source8Button_SelectedState = 60;

                /// <summary>
                /// Input or Feedback digital joinInfo from Control System to panel: PublicDisplays.PublicDisplayRouting.Source9Button.Selected
                /// PublicDisplays.PublicDisplayRouting.Source 9 Button.Selected
                /// </summary>
                public const uint Source9Button_SelectedState = 61;

                /// <summary>
                /// Input or Feedback digital joinInfo from Control System to panel: PublicDisplays.PublicDisplayRouting.SourceClearButton.Selected
                /// PublicDisplays.PublicDisplayRouting.Source Clear Button.Selected
                /// </summary>
                public const uint SourceClearButton_SelectedState = 62;

            }
            /// <summary>
            /// Serial signals.
            /// </summary>
            internal static class Strings
            {

                /// <summary>
                /// Input or Feedback serial joinInfo from Control System to panel: PublicDisplays.PublicDisplayRouting.Display10Button.IndirectRichText
                /// PublicDisplays.PublicDisplayRouting.Display 10 Button.Indirect Rich Text
                /// </summary>
                public const uint Display10Button_IndirectRichTextState = 1;
                /// <summary>
                /// Input or Feedback serial joinInfo from Control System to panel: PublicDisplays.PublicDisplayRouting.Display10Label.IndirectRichText
                /// PublicDisplays.PublicDisplayRouting.Display 10 Label.Indirect Rich Text
                /// </summary>
                public const uint Display10Label_IndirectRichTextState = 2;
                /// <summary>
                /// Input or Feedback serial joinInfo from Control System to panel: PublicDisplays.PublicDisplayRouting.Display11Button.IndirectRichText
                /// PublicDisplays.PublicDisplayRouting.Display 11 Button.Indirect Rich Text
                /// </summary>
                public const uint Display11Button_IndirectRichTextState = 3;
                /// <summary>
                /// Input or Feedback serial joinInfo from Control System to panel: PublicDisplays.PublicDisplayRouting.Display11Label.IndirectRichText
                /// PublicDisplays.PublicDisplayRouting.Display 11 Label.Indirect Rich Text
                /// </summary>
                public const uint Display11Label_IndirectRichTextState = 4;
                /// <summary>
                /// Input or Feedback serial joinInfo from Control System to panel: PublicDisplays.PublicDisplayRouting.Display12Button.IndirectRichText
                /// PublicDisplays.PublicDisplayRouting.Display 12 Button.Indirect Rich Text
                /// </summary>
                public const uint Display12Button_IndirectRichTextState = 5;
                /// <summary>
                /// Input or Feedback serial joinInfo from Control System to panel: PublicDisplays.PublicDisplayRouting.Display12Label.IndirectRichText
                /// PublicDisplays.PublicDisplayRouting.Display 12 Label.Indirect Rich Text
                /// </summary>
                public const uint Display12Label_IndirectRichTextState = 6;
                /// <summary>
                /// Input or Feedback serial joinInfo from Control System to panel: PublicDisplays.PublicDisplayRouting.Display13Button.IndirectRichText
                /// PublicDisplays.PublicDisplayRouting.Display 13 Button.Indirect Rich Text
                /// </summary>
                public const uint Display13Button_IndirectRichTextState = 7;
                /// <summary>
                /// Input or Feedback serial joinInfo from Control System to panel: PublicDisplays.PublicDisplayRouting.Display13Label.IndirectRichText
                /// PublicDisplays.PublicDisplayRouting.Display 13 Label.Indirect Rich Text
                /// </summary>
                public const uint Display13Label_IndirectRichTextState = 8;
                /// <summary>
                /// Input or Feedback serial joinInfo from Control System to panel: PublicDisplays.PublicDisplayRouting.Display14Button.IndirectRichText
                /// PublicDisplays.PublicDisplayRouting.Display 14 Button.Indirect Rich Text
                /// </summary>
                public const uint Display14Button_IndirectRichTextState = 9;
                /// <summary>
                /// Input or Feedback serial joinInfo from Control System to panel: PublicDisplays.PublicDisplayRouting.Display14Label.IndirectRichText
                /// PublicDisplays.PublicDisplayRouting.Display 14 Label.Indirect Rich Text
                /// </summary>
                public const uint Display14Label_IndirectRichTextState = 10;
                /// <summary>
                /// Input or Feedback serial joinInfo from Control System to panel: PublicDisplays.PublicDisplayRouting.Display15Button.IndirectRichText
                /// PublicDisplays.PublicDisplayRouting.Display 15 Button.Indirect Rich Text
                /// </summary>
                public const uint Display15Button_IndirectRichTextState = 11;
                /// <summary>
                /// Input or Feedback serial joinInfo from Control System to panel: PublicDisplays.PublicDisplayRouting.Display15Label.IndirectRichText
                /// PublicDisplays.PublicDisplayRouting.Display 15 Label.Indirect Rich Text
                /// </summary>
                public const uint Display15Label_IndirectRichTextState = 12;
                /// <summary>
                /// Input or Feedback serial joinInfo from Control System to panel: PublicDisplays.PublicDisplayRouting.Display16Button.IndirectRichText
                /// PublicDisplays.PublicDisplayRouting.Display 16 Button.Indirect Rich Text
                /// </summary>
                public const uint Display16Button_IndirectRichTextState = 13;
                /// <summary>
                /// Input or Feedback serial joinInfo from Control System to panel: PublicDisplays.PublicDisplayRouting.Display16Label.IndirectRichText
                /// PublicDisplays.PublicDisplayRouting.Display 16 Label.Indirect Rich Text
                /// </summary>
                public const uint Display16Label_IndirectRichTextState = 14;
                /// <summary>
                /// Input or Feedback serial joinInfo from Control System to panel: PublicDisplays.PublicDisplayRouting.Display17Button.IndirectRichText
                /// PublicDisplays.PublicDisplayRouting.Display 17 Button.Indirect Rich Text
                /// </summary>
                public const uint Display17Button_IndirectRichTextState = 15;
                /// <summary>
                /// Input or Feedback serial joinInfo from Control System to panel: PublicDisplays.PublicDisplayRouting.Display17Label.IndirectRichText
                /// PublicDisplays.PublicDisplayRouting.Display 17 Label.Indirect Rich Text
                /// </summary>
                public const uint Display17Label_IndirectRichTextState = 16;
                /// <summary>
                /// Input or Feedback serial joinInfo from Control System to panel: PublicDisplays.PublicDisplayRouting.Display18Button.IndirectRichText
                /// PublicDisplays.PublicDisplayRouting.Display 18 Button.Indirect Rich Text
                /// </summary>
                public const uint Display18Button_IndirectRichTextState = 17;
                /// <summary>
                /// Input or Feedback serial joinInfo from Control System to panel: PublicDisplays.PublicDisplayRouting.Display18Label.IndirectRichText
                /// PublicDisplays.PublicDisplayRouting.Display 18 Label.Indirect Rich Text
                /// </summary>
                public const uint Display18Label_IndirectRichTextState = 18;
                /// <summary>
                /// Input or Feedback serial joinInfo from Control System to panel: PublicDisplays.PublicDisplayRouting.Display19Button.IndirectRichText
                /// PublicDisplays.PublicDisplayRouting.Display 19 Button.Indirect Rich Text
                /// </summary>
                public const uint Display19Button_IndirectRichTextState = 19;
                /// <summary>
                /// Input or Feedback serial joinInfo from Control System to panel: PublicDisplays.PublicDisplayRouting.Display19Label.IndirectRichText
                /// PublicDisplays.PublicDisplayRouting.Display 19 Label.Indirect Rich Text
                /// </summary>
                public const uint Display19Label_IndirectRichTextState = 20;
                /// <summary>
                /// Input or Feedback serial joinInfo from Control System to panel: PublicDisplays.PublicDisplayRouting.Display1Button.IndirectRichText
                /// PublicDisplays.PublicDisplayRouting.Display 1 Button.Indirect Rich Text
                /// </summary>
                public const uint Display1Button_IndirectRichTextState = 21;
                /// <summary>
                /// Input or Feedback serial joinInfo from Control System to panel: PublicDisplays.PublicDisplayRouting.Display1Label.IndirectRichText
                /// PublicDisplays.PublicDisplayRouting.Display 1 Label.Indirect Rich Text
                /// </summary>
                public const uint Display1Label_IndirectRichTextState = 22;
                /// <summary>
                /// Input or Feedback serial joinInfo from Control System to panel: PublicDisplays.PublicDisplayRouting.Display20Button.IndirectRichText
                /// PublicDisplays.PublicDisplayRouting.Display 20 Button.Indirect Rich Text
                /// </summary>
                public const uint Display20Button_IndirectRichTextState = 23;
                /// <summary>
                /// Input or Feedback serial joinInfo from Control System to panel: PublicDisplays.PublicDisplayRouting.Display20Label.IndirectRichText
                /// PublicDisplays.PublicDisplayRouting.Display 20 Label.Indirect Rich Text
                /// </summary>
                public const uint Display20Label_IndirectRichTextState = 24;
                /// <summary>
                /// Input or Feedback serial joinInfo from Control System to panel: PublicDisplays.PublicDisplayRouting.Display2Button.IndirectRichText
                /// PublicDisplays.PublicDisplayRouting.Display 2 Button.Indirect Rich Text
                /// </summary>
                public const uint Display2Button_IndirectRichTextState = 25;
                /// <summary>
                /// Input or Feedback serial joinInfo from Control System to panel: PublicDisplays.PublicDisplayRouting.Display2Label.IndirectRichText
                /// PublicDisplays.PublicDisplayRouting.Display 2 Label.Indirect Rich Text
                /// </summary>
                public const uint Display2Label_IndirectRichTextState = 26;
                /// <summary>
                /// Input or Feedback serial joinInfo from Control System to panel: PublicDisplays.PublicDisplayRouting.Display3Button.IndirectRichText
                /// PublicDisplays.PublicDisplayRouting.Display 3 Button.Indirect Rich Text
                /// </summary>
                public const uint Display3Button_IndirectRichTextState = 27;
                /// <summary>
                /// Input or Feedback serial joinInfo from Control System to panel: PublicDisplays.PublicDisplayRouting.Display3Label.IndirectRichText
                /// PublicDisplays.PublicDisplayRouting.Display 3 Label.Indirect Rich Text
                /// </summary>
                public const uint Display3Label_IndirectRichTextState = 28;
                /// <summary>
                /// Input or Feedback serial joinInfo from Control System to panel: PublicDisplays.PublicDisplayRouting.Display4Button.IndirectRichText
                /// PublicDisplays.PublicDisplayRouting.Display 4 Button.Indirect Rich Text
                /// </summary>
                public const uint Display4Button_IndirectRichTextState = 29;
                /// <summary>
                /// Input or Feedback serial joinInfo from Control System to panel: PublicDisplays.PublicDisplayRouting.Display4Label.IndirectRichText
                /// PublicDisplays.PublicDisplayRouting.Display 4 Label.Indirect Rich Text
                /// </summary>
                public const uint Display4Label_IndirectRichTextState = 30;
                /// <summary>
                /// Input or Feedback serial joinInfo from Control System to panel: PublicDisplays.PublicDisplayRouting.Display5Button.IndirectRichText
                /// PublicDisplays.PublicDisplayRouting.Display 5 Button.Indirect Rich Text
                /// </summary>
                public const uint Display5Button_IndirectRichTextState = 31;
                /// <summary>
                /// Input or Feedback serial joinInfo from Control System to panel: PublicDisplays.PublicDisplayRouting.Display5Label.IndirectRichText
                /// PublicDisplays.PublicDisplayRouting.Display 5 Label.Indirect Rich Text
                /// </summary>
                public const uint Display5Label_IndirectRichTextState = 32;
                /// <summary>
                /// Input or Feedback serial joinInfo from Control System to panel: PublicDisplays.PublicDisplayRouting.Display6Button.IndirectRichText
                /// PublicDisplays.PublicDisplayRouting.Display 6 Button.Indirect Rich Text
                /// </summary>
                public const uint Display6Button_IndirectRichTextState = 33;
                /// <summary>
                /// Input or Feedback serial joinInfo from Control System to panel: PublicDisplays.PublicDisplayRouting.Display6Label.IndirectRichText
                /// PublicDisplays.PublicDisplayRouting.Display 6 Label.Indirect Rich Text
                /// </summary>
                public const uint Display6Label_IndirectRichTextState = 34;
                /// <summary>
                /// Input or Feedback serial joinInfo from Control System to panel: PublicDisplays.PublicDisplayRouting.Display7Button.IndirectRichText
                /// PublicDisplays.PublicDisplayRouting.Display 7 Button.Indirect Rich Text
                /// </summary>
                public const uint Display7Button_IndirectRichTextState = 35;
                /// <summary>
                /// Input or Feedback serial joinInfo from Control System to panel: PublicDisplays.PublicDisplayRouting.Display7Label.IndirectRichText
                /// PublicDisplays.PublicDisplayRouting.Display 7 Label.Indirect Rich Text
                /// </summary>
                public const uint Display7Label_IndirectRichTextState = 36;
                /// <summary>
                /// Input or Feedback serial joinInfo from Control System to panel: PublicDisplays.PublicDisplayRouting.Display8Button.IndirectRichText
                /// PublicDisplays.PublicDisplayRouting.Display 8 Button.Indirect Rich Text
                /// </summary>
                public const uint Display8Button_IndirectRichTextState = 37;
                /// <summary>
                /// Input or Feedback serial joinInfo from Control System to panel: PublicDisplays.PublicDisplayRouting.Display8Label.IndirectRichText
                /// PublicDisplays.PublicDisplayRouting.Display 8 Label.Indirect Rich Text
                /// </summary>
                public const uint Display8Label_IndirectRichTextState = 38;
                /// <summary>
                /// Input or Feedback serial joinInfo from Control System to panel: PublicDisplays.PublicDisplayRouting.Display9Button.IndirectRichText
                /// PublicDisplays.PublicDisplayRouting.Display 9 Button.Indirect Rich Text
                /// </summary>
                public const uint Display9Button_IndirectRichTextState = 39;
                /// <summary>
                /// Input or Feedback serial joinInfo from Control System to panel: PublicDisplays.PublicDisplayRouting.Display9Label.IndirectRichText
                /// PublicDisplays.PublicDisplayRouting.Display 9 Label.Indirect Rich Text
                /// </summary>
                public const uint Display9Label_IndirectRichTextState = 40;
                /// <summary>
                /// Input or Feedback serial joinInfo from Control System to panel: PublicDisplays.PublicDisplayRouting.Source1Button.IndirectRichText
                /// PublicDisplays.PublicDisplayRouting.Source 1 Button.Indirect Rich Text
                /// </summary>
                public const uint Source1Button_IndirectRichTextState = 41;
                /// <summary>
                /// Input or Feedback serial joinInfo from Control System to panel: PublicDisplays.PublicDisplayRouting.Source2Button.IndirectRichText
                /// PublicDisplays.PublicDisplayRouting.Source 2 Button.Indirect Rich Text
                /// </summary>
                public const uint Source2Button_IndirectRichTextState = 42;
                /// <summary>
                /// Input or Feedback serial joinInfo from Control System to panel: PublicDisplays.PublicDisplayRouting.Source3Button.IndirectRichText
                /// PublicDisplays.PublicDisplayRouting.Source 3 Button.Indirect Rich Text
                /// </summary>
                public const uint Source3Button_IndirectRichTextState = 43;
                /// <summary>
                /// Input or Feedback serial joinInfo from Control System to panel: PublicDisplays.PublicDisplayRouting.Source4Button.IndirectRichText
                /// PublicDisplays.PublicDisplayRouting.Source 4 Button.Indirect Rich Text
                /// </summary>
                public const uint Source4Button_IndirectRichTextState = 44;
                /// <summary>
                /// Input or Feedback serial joinInfo from Control System to panel: PublicDisplays.PublicDisplayRouting.Source5Button.IndirectRichText
                /// PublicDisplays.PublicDisplayRouting.Source 5 Button.Indirect Rich Text
                /// </summary>
                public const uint Source5Button_IndirectRichTextState = 45;
                /// <summary>
                /// Input or Feedback serial joinInfo from Control System to panel: PublicDisplays.PublicDisplayRouting.Source6Button.IndirectRichText
                /// PublicDisplays.PublicDisplayRouting.Source 6 Button.Indirect Rich Text
                /// </summary>
                public const uint Source6Button_IndirectRichTextState = 46;
                /// <summary>
                /// Input or Feedback serial joinInfo from Control System to panel: PublicDisplays.PublicDisplayRouting.Source7Button.IndirectRichText
                /// PublicDisplays.PublicDisplayRouting.Source 7 Button.Indirect Rich Text
                /// </summary>
                public const uint Source7Button_IndirectRichTextState = 47;
                /// <summary>
                /// Input or Feedback serial joinInfo from Control System to panel: PublicDisplays.PublicDisplayRouting.Source8Button.IndirectRichText
                /// PublicDisplays.PublicDisplayRouting.Source 8 Button.Indirect Rich Text
                /// </summary>
                public const uint Source8Button_IndirectRichTextState = 48;
                /// <summary>
                /// Input or Feedback serial joinInfo from Control System to panel: PublicDisplays.PublicDisplayRouting.Source9Button.IndirectRichText
                /// PublicDisplays.PublicDisplayRouting.Source 9 Button.Indirect Rich Text
                /// </summary>
                public const uint Source9Button_IndirectRichTextState = 49;
                /// <summary>
                /// Input or Feedback serial joinInfo from Control System to panel: PublicDisplays.PublicDisplayRouting.SourceClearButton.IndirectRichText
                /// PublicDisplays.PublicDisplayRouting.Source Clear Button.Indirect Rich Text
                /// </summary>
                public const uint SourceClearButton_IndirectRichTextState = 50;
                /// <summary>
                /// Input or Feedback serial joinInfo from Control System to panel: PublicDisplays.PublicDisplayRouting.Source1Button.Icon
                /// PublicDisplays.PublicDisplayRouting.Source 1 Button.Icon
                /// </summary>
                public const uint Source1Button_IconState = 51;
                /// <summary>
                /// Input or Feedback serial joinInfo from Control System to panel: PublicDisplays.PublicDisplayRouting.Source2Button.Icon
                /// PublicDisplays.PublicDisplayRouting.Source 2 Button.Icon
                /// </summary>
                public const uint Source2Button_IconState = 52;
                /// <summary>
                /// Input or Feedback serial joinInfo from Control System to panel: PublicDisplays.PublicDisplayRouting.Source3Button.Icon
                /// PublicDisplays.PublicDisplayRouting.Source 3 Button.Icon
                /// </summary>
                public const uint Source3Button_IconState = 53;
                /// <summary>
                /// Input or Feedback serial joinInfo from Control System to panel: PublicDisplays.PublicDisplayRouting.Source4Button.Icon
                /// PublicDisplays.PublicDisplayRouting.Source 4 Button.Icon
                /// </summary>
                public const uint Source4Button_IconState = 54;
                /// <summary>
                /// Input or Feedback serial joinInfo from Control System to panel: PublicDisplays.PublicDisplayRouting.Source5Button.Icon
                /// PublicDisplays.PublicDisplayRouting.Source 5 Button.Icon
                /// </summary>
                public const uint Source5Button_IconState = 55;
                /// <summary>
                /// Input or Feedback serial joinInfo from Control System to panel: PublicDisplays.PublicDisplayRouting.Source6Button.Icon
                /// PublicDisplays.PublicDisplayRouting.Source 6 Button.Icon
                /// </summary>
                public const uint Source6Button_IconState = 56;
                /// <summary>
                /// Input or Feedback serial joinInfo from Control System to panel: PublicDisplays.PublicDisplayRouting.Source7Button.Icon
                /// PublicDisplays.PublicDisplayRouting.Source 7 Button.Icon
                /// </summary>
                public const uint Source7Button_IconState = 57;
                /// <summary>
                /// Input or Feedback serial joinInfo from Control System to panel: PublicDisplays.PublicDisplayRouting.Source8Button.Icon
                /// PublicDisplays.PublicDisplayRouting.Source 8 Button.Icon
                /// </summary>
                public const uint Source8Button_IconState = 58;
                /// <summary>
                /// Input or Feedback serial joinInfo from Control System to panel: PublicDisplays.PublicDisplayRouting.Source9Button.Icon
                /// PublicDisplays.PublicDisplayRouting.Source 9 Button.Icon
                /// </summary>
                public const uint Source9Button_IconState = 59;
                /// <summary>
                /// Input or Feedback serial joinInfo from Control System to panel: PublicDisplays.PublicDisplayRouting.SourceClearButton.Icon
                /// PublicDisplays.PublicDisplayRouting.Source Clear Button.Icon
                /// </summary>
                public const uint SourceClearButton_IconState = 60;
            }
        }

        #endregion

        #region Construction and Initialization

        /// <summary>
        /// Initializes a new instance of the <see cref="PublicDisplayRouting"/> component class.
        /// </summary>
        /// <param name="componentMediator">The <see cref="ComponentMediator"/> used to instantiate the component.</param>
        /// <param name="controlJoinId">The SmartObjectId at which to create the component.</param>
        /// <param name="itemCount">The number of items.</param>
        internal PublicDisplayRouting(ComponentMediator componentMediator, uint controlJoinId, uint? itemCount)
        {
            ComponentMediator = componentMediator;
            Initialize(controlJoinId, itemCount);
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PublicDisplayRouting"/> component class.
        /// </summary>
        /// <param name="componentMediator">The <see cref="ComponentMediator"/> used to instantiate the component.</param>
        /// <param name="controlJoinId">The SmartObjectId at which to create the component.</param>
        internal PublicDisplayRouting(ComponentMediator componentMediator, uint controlJoinId) : this(componentMediator, controlJoinId, null)
        {
        }

        /// <summary>
        /// Initializes a new instance with default itemCount.
        /// </summary>
        /// <param name="controlJoinId">The SmartObjectId at which to create the component.</param>
        private void Initialize(uint controlJoinId)
        {
            Initialize(controlJoinId, null);
        }

        private Dictionary<string, Indexes> _indexLookup = new Dictionary<string, Indexes>();

        /// <summary>
        /// Initializes a new instance of the <see cref="PublicDisplayRouting"/> component class.
        /// </summary>
        /// <param name="controlJoinId">The SmartObjectId at which to create the component.</param>
        /// <param name="itemCount">The number of items.</param>
        private void Initialize(uint controlJoinId, uint? itemCount)
        {
            ControlJoinId = controlJoinId; 
 
            _devices = new List<BasicTriListWithSmartObject>(); 
 
            ComponentMediator.ConfigureBooleanEvent(controlJoinId, Joins.Booleans.Display10Button_PressEvent, onDisplay10Button_Press);
            ComponentMediator.ConfigureBooleanEvent(controlJoinId, Joins.Booleans.Display11Button_PressEvent, onDisplay11Button_Press);
            ComponentMediator.ConfigureBooleanEvent(controlJoinId, Joins.Booleans.Display12Button_PressEvent, onDisplay12Button_Press);
            ComponentMediator.ConfigureBooleanEvent(controlJoinId, Joins.Booleans.Display13Button_PressEvent, onDisplay13Button_Press);
            ComponentMediator.ConfigureBooleanEvent(controlJoinId, Joins.Booleans.Display14Button_PressEvent, onDisplay14Button_Press);
            ComponentMediator.ConfigureBooleanEvent(controlJoinId, Joins.Booleans.Display15Button_PressEvent, onDisplay15Button_Press);
            ComponentMediator.ConfigureBooleanEvent(controlJoinId, Joins.Booleans.Display16Button_PressEvent, onDisplay16Button_Press);
            ComponentMediator.ConfigureBooleanEvent(controlJoinId, Joins.Booleans.Display17Button_PressEvent, onDisplay17Button_Press);
            ComponentMediator.ConfigureBooleanEvent(controlJoinId, Joins.Booleans.Display18Button_PressEvent, onDisplay18Button_Press);
            ComponentMediator.ConfigureBooleanEvent(controlJoinId, Joins.Booleans.Display19Button_PressEvent, onDisplay19Button_Press);
            ComponentMediator.ConfigureBooleanEvent(controlJoinId, Joins.Booleans.Display1Button_PressEvent, onDisplay1Button_Press);
            ComponentMediator.ConfigureBooleanEvent(controlJoinId, Joins.Booleans.Display20Button_PressEvent, onDisplay20Button_Press);
            ComponentMediator.ConfigureBooleanEvent(controlJoinId, Joins.Booleans.Display2Button_PressEvent, onDisplay2Button_Press);
            ComponentMediator.ConfigureBooleanEvent(controlJoinId, Joins.Booleans.Display3Button_PressEvent, onDisplay3Button_Press);
            ComponentMediator.ConfigureBooleanEvent(controlJoinId, Joins.Booleans.Display4Button_PressEvent, onDisplay4Button_Press);
            ComponentMediator.ConfigureBooleanEvent(controlJoinId, Joins.Booleans.Display5Button_PressEvent, onDisplay5Button_Press);
            ComponentMediator.ConfigureBooleanEvent(controlJoinId, Joins.Booleans.Display6Button_PressEvent, onDisplay6Button_Press);
            ComponentMediator.ConfigureBooleanEvent(controlJoinId, Joins.Booleans.Display7Button_PressEvent, onDisplay7Button_Press);
            ComponentMediator.ConfigureBooleanEvent(controlJoinId, Joins.Booleans.Display8Button_PressEvent, onDisplay8Button_Press);
            ComponentMediator.ConfigureBooleanEvent(controlJoinId, Joins.Booleans.Display9Button_PressEvent, onDisplay9Button_Press);
            ComponentMediator.ConfigureBooleanEvent(controlJoinId, Joins.Booleans.Source1Button_PressEvent, onSource1Button_Press);
            ComponentMediator.ConfigureBooleanEvent(controlJoinId, Joins.Booleans.Source2Button_PressEvent, onSource2Button_Press);
            ComponentMediator.ConfigureBooleanEvent(controlJoinId, Joins.Booleans.Source3Button_PressEvent, onSource3Button_Press);
            ComponentMediator.ConfigureBooleanEvent(controlJoinId, Joins.Booleans.Source4Button_PressEvent, onSource4Button_Press);
            ComponentMediator.ConfigureBooleanEvent(controlJoinId, Joins.Booleans.Source5Button_PressEvent, onSource5Button_Press);
            ComponentMediator.ConfigureBooleanEvent(controlJoinId, Joins.Booleans.Source6Button_PressEvent, onSource6Button_Press);
            ComponentMediator.ConfigureBooleanEvent(controlJoinId, Joins.Booleans.Source7Button_PressEvent, onSource7Button_Press);
            ComponentMediator.ConfigureBooleanEvent(controlJoinId, Joins.Booleans.Source8Button_PressEvent, onSource8Button_Press);
            ComponentMediator.ConfigureBooleanEvent(controlJoinId, Joins.Booleans.Source9Button_PressEvent, onSource9Button_Press);
            ComponentMediator.ConfigureBooleanEvent(controlJoinId, Joins.Booleans.SourceClearButton_PressEvent, onSourceClearButton_Press);
        }

        public void AddDevice(BasicTriListWithSmartObject device)
        {
            Devices.Add(device);
            ComponentMediator.HookSmartObjectEvents(device.SmartObjects[ControlJoinId]);
        }

        public void RemoveDevice(BasicTriListWithSmartObject device)
        {
            Devices.Remove(device);
            ComponentMediator.UnHookSmartObjectEvents(device.SmartObjects[ControlJoinId]);
        }

        #endregion

        #region CH5 Contract

        /// <inheritdoc/>
        public event EventHandler<UIEventArgs> Display10Button_PressEvent;
        private void onDisplay10Button_Press(SmartObjectEventArgs eventArgs)
        {
            EventHandler<UIEventArgs> handler = Display10Button_PressEvent;
            if (handler != null)
                handler(this, UIEventArgs.CreateEventArgs(eventArgs));
        }

        /// <inheritdoc/>
        public event EventHandler<UIEventArgs> Display11Button_PressEvent;
        private void onDisplay11Button_Press(SmartObjectEventArgs eventArgs)
        {
            EventHandler<UIEventArgs> handler = Display11Button_PressEvent;
            if (handler != null)
                handler(this, UIEventArgs.CreateEventArgs(eventArgs));
        }

        /// <inheritdoc/>
        public event EventHandler<UIEventArgs> Display12Button_PressEvent;
        private void onDisplay12Button_Press(SmartObjectEventArgs eventArgs)
        {
            EventHandler<UIEventArgs> handler = Display12Button_PressEvent;
            if (handler != null)
                handler(this, UIEventArgs.CreateEventArgs(eventArgs));
        }

        /// <inheritdoc/>
        public event EventHandler<UIEventArgs> Display13Button_PressEvent;
        private void onDisplay13Button_Press(SmartObjectEventArgs eventArgs)
        {
            EventHandler<UIEventArgs> handler = Display13Button_PressEvent;
            if (handler != null)
                handler(this, UIEventArgs.CreateEventArgs(eventArgs));
        }

        /// <inheritdoc/>
        public event EventHandler<UIEventArgs> Display14Button_PressEvent;
        private void onDisplay14Button_Press(SmartObjectEventArgs eventArgs)
        {
            EventHandler<UIEventArgs> handler = Display14Button_PressEvent;
            if (handler != null)
                handler(this, UIEventArgs.CreateEventArgs(eventArgs));
        }

        /// <inheritdoc/>
        public event EventHandler<UIEventArgs> Display15Button_PressEvent;
        private void onDisplay15Button_Press(SmartObjectEventArgs eventArgs)
        {
            EventHandler<UIEventArgs> handler = Display15Button_PressEvent;
            if (handler != null)
                handler(this, UIEventArgs.CreateEventArgs(eventArgs));
        }

        /// <inheritdoc/>
        public event EventHandler<UIEventArgs> Display16Button_PressEvent;
        private void onDisplay16Button_Press(SmartObjectEventArgs eventArgs)
        {
            EventHandler<UIEventArgs> handler = Display16Button_PressEvent;
            if (handler != null)
                handler(this, UIEventArgs.CreateEventArgs(eventArgs));
        }

        /// <inheritdoc/>
        public event EventHandler<UIEventArgs> Display17Button_PressEvent;
        private void onDisplay17Button_Press(SmartObjectEventArgs eventArgs)
        {
            EventHandler<UIEventArgs> handler = Display17Button_PressEvent;
            if (handler != null)
                handler(this, UIEventArgs.CreateEventArgs(eventArgs));
        }

        /// <inheritdoc/>
        public event EventHandler<UIEventArgs> Display18Button_PressEvent;
        private void onDisplay18Button_Press(SmartObjectEventArgs eventArgs)
        {
            EventHandler<UIEventArgs> handler = Display18Button_PressEvent;
            if (handler != null)
                handler(this, UIEventArgs.CreateEventArgs(eventArgs));
        }

        /// <inheritdoc/>
        public event EventHandler<UIEventArgs> Display19Button_PressEvent;
        private void onDisplay19Button_Press(SmartObjectEventArgs eventArgs)
        {
            EventHandler<UIEventArgs> handler = Display19Button_PressEvent;
            if (handler != null)
                handler(this, UIEventArgs.CreateEventArgs(eventArgs));
        }

        /// <inheritdoc/>
        public event EventHandler<UIEventArgs> Display1Button_PressEvent;
        private void onDisplay1Button_Press(SmartObjectEventArgs eventArgs)
        {
            EventHandler<UIEventArgs> handler = Display1Button_PressEvent;
            if (handler != null)
                handler(this, UIEventArgs.CreateEventArgs(eventArgs));
        }

        /// <inheritdoc/>
        public event EventHandler<UIEventArgs> Display20Button_PressEvent;
        private void onDisplay20Button_Press(SmartObjectEventArgs eventArgs)
        {
            EventHandler<UIEventArgs> handler = Display20Button_PressEvent;
            if (handler != null)
                handler(this, UIEventArgs.CreateEventArgs(eventArgs));
        }

        /// <inheritdoc/>
        public event EventHandler<UIEventArgs> Display2Button_PressEvent;
        private void onDisplay2Button_Press(SmartObjectEventArgs eventArgs)
        {
            EventHandler<UIEventArgs> handler = Display2Button_PressEvent;
            if (handler != null)
                handler(this, UIEventArgs.CreateEventArgs(eventArgs));
        }

        /// <inheritdoc/>
        public event EventHandler<UIEventArgs> Display3Button_PressEvent;
        private void onDisplay3Button_Press(SmartObjectEventArgs eventArgs)
        {
            EventHandler<UIEventArgs> handler = Display3Button_PressEvent;
            if (handler != null)
                handler(this, UIEventArgs.CreateEventArgs(eventArgs));
        }

        /// <inheritdoc/>
        public event EventHandler<UIEventArgs> Display4Button_PressEvent;
        private void onDisplay4Button_Press(SmartObjectEventArgs eventArgs)
        {
            EventHandler<UIEventArgs> handler = Display4Button_PressEvent;
            if (handler != null)
                handler(this, UIEventArgs.CreateEventArgs(eventArgs));
        }

        /// <inheritdoc/>
        public event EventHandler<UIEventArgs> Display5Button_PressEvent;
        private void onDisplay5Button_Press(SmartObjectEventArgs eventArgs)
        {
            EventHandler<UIEventArgs> handler = Display5Button_PressEvent;
            if (handler != null)
                handler(this, UIEventArgs.CreateEventArgs(eventArgs));
        }

        /// <inheritdoc/>
        public event EventHandler<UIEventArgs> Display6Button_PressEvent;
        private void onDisplay6Button_Press(SmartObjectEventArgs eventArgs)
        {
            EventHandler<UIEventArgs> handler = Display6Button_PressEvent;
            if (handler != null)
                handler(this, UIEventArgs.CreateEventArgs(eventArgs));
        }

        /// <inheritdoc/>
        public event EventHandler<UIEventArgs> Display7Button_PressEvent;
        private void onDisplay7Button_Press(SmartObjectEventArgs eventArgs)
        {
            EventHandler<UIEventArgs> handler = Display7Button_PressEvent;
            if (handler != null)
                handler(this, UIEventArgs.CreateEventArgs(eventArgs));
        }

        /// <inheritdoc/>
        public event EventHandler<UIEventArgs> Display8Button_PressEvent;
        private void onDisplay8Button_Press(SmartObjectEventArgs eventArgs)
        {
            EventHandler<UIEventArgs> handler = Display8Button_PressEvent;
            if (handler != null)
                handler(this, UIEventArgs.CreateEventArgs(eventArgs));
        }

        /// <inheritdoc/>
        public event EventHandler<UIEventArgs> Display9Button_PressEvent;
        private void onDisplay9Button_Press(SmartObjectEventArgs eventArgs)
        {
            EventHandler<UIEventArgs> handler = Display9Button_PressEvent;
            if (handler != null)
                handler(this, UIEventArgs.CreateEventArgs(eventArgs));
        }

        /// <inheritdoc/>
        public event EventHandler<UIEventArgs> Source1Button_PressEvent;
        private void onSource1Button_Press(SmartObjectEventArgs eventArgs)
        {
            EventHandler<UIEventArgs> handler = Source1Button_PressEvent;
            if (handler != null)
                handler(this, UIEventArgs.CreateEventArgs(eventArgs));
        }

        /// <inheritdoc/>
        public event EventHandler<UIEventArgs> Source2Button_PressEvent;
        private void onSource2Button_Press(SmartObjectEventArgs eventArgs)
        {
            EventHandler<UIEventArgs> handler = Source2Button_PressEvent;
            if (handler != null)
                handler(this, UIEventArgs.CreateEventArgs(eventArgs));
        }

        /// <inheritdoc/>
        public event EventHandler<UIEventArgs> Source3Button_PressEvent;
        private void onSource3Button_Press(SmartObjectEventArgs eventArgs)
        {
            EventHandler<UIEventArgs> handler = Source3Button_PressEvent;
            if (handler != null)
                handler(this, UIEventArgs.CreateEventArgs(eventArgs));
        }

        /// <inheritdoc/>
        public event EventHandler<UIEventArgs> Source4Button_PressEvent;
        private void onSource4Button_Press(SmartObjectEventArgs eventArgs)
        {
            EventHandler<UIEventArgs> handler = Source4Button_PressEvent;
            if (handler != null)
                handler(this, UIEventArgs.CreateEventArgs(eventArgs));
        }

        /// <inheritdoc/>
        public event EventHandler<UIEventArgs> Source5Button_PressEvent;
        private void onSource5Button_Press(SmartObjectEventArgs eventArgs)
        {
            EventHandler<UIEventArgs> handler = Source5Button_PressEvent;
            if (handler != null)
                handler(this, UIEventArgs.CreateEventArgs(eventArgs));
        }

        /// <inheritdoc/>
        public event EventHandler<UIEventArgs> Source6Button_PressEvent;
        private void onSource6Button_Press(SmartObjectEventArgs eventArgs)
        {
            EventHandler<UIEventArgs> handler = Source6Button_PressEvent;
            if (handler != null)
                handler(this, UIEventArgs.CreateEventArgs(eventArgs));
        }

        /// <inheritdoc/>
        public event EventHandler<UIEventArgs> Source7Button_PressEvent;
        private void onSource7Button_Press(SmartObjectEventArgs eventArgs)
        {
            EventHandler<UIEventArgs> handler = Source7Button_PressEvent;
            if (handler != null)
                handler(this, UIEventArgs.CreateEventArgs(eventArgs));
        }

        /// <inheritdoc/>
        public event EventHandler<UIEventArgs> Source8Button_PressEvent;
        private void onSource8Button_Press(SmartObjectEventArgs eventArgs)
        {
            EventHandler<UIEventArgs> handler = Source8Button_PressEvent;
            if (handler != null)
                handler(this, UIEventArgs.CreateEventArgs(eventArgs));
        }

        /// <inheritdoc/>
        public event EventHandler<UIEventArgs> Source9Button_PressEvent;
        private void onSource9Button_Press(SmartObjectEventArgs eventArgs)
        {
            EventHandler<UIEventArgs> handler = Source9Button_PressEvent;
            if (handler != null)
                handler(this, UIEventArgs.CreateEventArgs(eventArgs));
        }

        /// <inheritdoc/>
        public event EventHandler<UIEventArgs> SourceClearButton_PressEvent;
        private void onSourceClearButton_Press(SmartObjectEventArgs eventArgs)
        {
            EventHandler<UIEventArgs> handler = SourceClearButton_PressEvent;
            if (handler != null)
                handler(this, UIEventArgs.CreateEventArgs(eventArgs));
        }

        /// <inheritdoc/>
        public void Display10Button_Visibility_fb(PublicDisplayRoutingBoolInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].BooleanInput[Joins.Booleans.Display10Button_Visibility_fbState], this);
            }
        }

        /// <inheritdoc/>
        public void Display10Button_Visibility_fb(bool digital)
        {
            Display10Button_Visibility_fb((sig, component) => sig.BoolValue = digital);
        }
        /// <inheritdoc/>
        public void Display10Label_Visibility_fb(PublicDisplayRoutingBoolInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].BooleanInput[Joins.Booleans.Display10Label_Visibility_fbState], this);
            }
        }

        /// <inheritdoc/>
        public void Display10Label_Visibility_fb(bool digital)
        {
            Display10Label_Visibility_fb((sig, component) => sig.BoolValue = digital);
        }
        /// <inheritdoc/>
        public void Display11Button_Visibility_fb(PublicDisplayRoutingBoolInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].BooleanInput[Joins.Booleans.Display11Button_Visibility_fbState], this);
            }
        }

        /// <inheritdoc/>
        public void Display11Button_Visibility_fb(bool digital)
        {
            Display11Button_Visibility_fb((sig, component) => sig.BoolValue = digital);
        }
        /// <inheritdoc/>
        public void Display11Label_Visibility_fb(PublicDisplayRoutingBoolInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].BooleanInput[Joins.Booleans.Display11Label_Visibility_fbState], this);
            }
        }

        /// <inheritdoc/>
        public void Display11Label_Visibility_fb(bool digital)
        {
            Display11Label_Visibility_fb((sig, component) => sig.BoolValue = digital);
        }
        /// <inheritdoc/>
        public void Display12Button_Visibility_fb(PublicDisplayRoutingBoolInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].BooleanInput[Joins.Booleans.Display12Button_Visibility_fbState], this);
            }
        }

        /// <inheritdoc/>
        public void Display12Button_Visibility_fb(bool digital)
        {
            Display12Button_Visibility_fb((sig, component) => sig.BoolValue = digital);
        }
        /// <inheritdoc/>
        public void Display12Label_Visibility_fb(PublicDisplayRoutingBoolInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].BooleanInput[Joins.Booleans.Display12Label_Visibility_fbState], this);
            }
        }

        /// <inheritdoc/>
        public void Display12Label_Visibility_fb(bool digital)
        {
            Display12Label_Visibility_fb((sig, component) => sig.BoolValue = digital);
        }
        /// <inheritdoc/>
        public void Display13Button_Visibility_fb(PublicDisplayRoutingBoolInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].BooleanInput[Joins.Booleans.Display13Button_Visibility_fbState], this);
            }
        }

        /// <inheritdoc/>
        public void Display13Button_Visibility_fb(bool digital)
        {
            Display13Button_Visibility_fb((sig, component) => sig.BoolValue = digital);
        }
        /// <inheritdoc/>
        public void Display13Label_Visibility_fb(PublicDisplayRoutingBoolInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].BooleanInput[Joins.Booleans.Display13Label_Visibility_fbState], this);
            }
        }

        /// <inheritdoc/>
        public void Display13Label_Visibility_fb(bool digital)
        {
            Display13Label_Visibility_fb((sig, component) => sig.BoolValue = digital);
        }
        /// <inheritdoc/>
        public void Display14Button_Visibility_fb(PublicDisplayRoutingBoolInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].BooleanInput[Joins.Booleans.Display14Button_Visibility_fbState], this);
            }
        }

        /// <inheritdoc/>
        public void Display14Button_Visibility_fb(bool digital)
        {
            Display14Button_Visibility_fb((sig, component) => sig.BoolValue = digital);
        }
        /// <inheritdoc/>
        public void Display14Label_Visibility_fb(PublicDisplayRoutingBoolInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].BooleanInput[Joins.Booleans.Display14Label_Visibility_fbState], this);
            }
        }

        /// <inheritdoc/>
        public void Display14Label_Visibility_fb(bool digital)
        {
            Display14Label_Visibility_fb((sig, component) => sig.BoolValue = digital);
        }
        /// <inheritdoc/>
        public void Display15Button_Visibility_fb(PublicDisplayRoutingBoolInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].BooleanInput[Joins.Booleans.Display15Button_Visibility_fbState], this);
            }
        }

        /// <inheritdoc/>
        public void Display15Button_Visibility_fb(bool digital)
        {
            Display15Button_Visibility_fb((sig, component) => sig.BoolValue = digital);
        }
        /// <inheritdoc/>
        public void Display15Label_Visibility_fb(PublicDisplayRoutingBoolInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].BooleanInput[Joins.Booleans.Display15Label_Visibility_fbState], this);
            }
        }

        /// <inheritdoc/>
        public void Display15Label_Visibility_fb(bool digital)
        {
            Display15Label_Visibility_fb((sig, component) => sig.BoolValue = digital);
        }
        /// <inheritdoc/>
        public void Display16Button_Visibility_fb(PublicDisplayRoutingBoolInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].BooleanInput[Joins.Booleans.Display16Button_Visibility_fbState], this);
            }
        }

        /// <inheritdoc/>
        public void Display16Button_Visibility_fb(bool digital)
        {
            Display16Button_Visibility_fb((sig, component) => sig.BoolValue = digital);
        }
        /// <inheritdoc/>
        public void Display16Label_Visibility_fb(PublicDisplayRoutingBoolInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].BooleanInput[Joins.Booleans.Display16Label_Visibility_fbState], this);
            }
        }

        /// <inheritdoc/>
        public void Display16Label_Visibility_fb(bool digital)
        {
            Display16Label_Visibility_fb((sig, component) => sig.BoolValue = digital);
        }
        /// <inheritdoc/>
        public void Display17Button_Visibility_fb(PublicDisplayRoutingBoolInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].BooleanInput[Joins.Booleans.Display17Button_Visibility_fbState], this);
            }
        }

        /// <inheritdoc/>
        public void Display17Button_Visibility_fb(bool digital)
        {
            Display17Button_Visibility_fb((sig, component) => sig.BoolValue = digital);
        }
        /// <inheritdoc/>
        public void Display17Label_Visibility_fb(PublicDisplayRoutingBoolInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].BooleanInput[Joins.Booleans.Display17Label_Visibility_fbState], this);
            }
        }

        /// <inheritdoc/>
        public void Display17Label_Visibility_fb(bool digital)
        {
            Display17Label_Visibility_fb((sig, component) => sig.BoolValue = digital);
        }
        /// <inheritdoc/>
        public void Display18Button_Visibility_fb(PublicDisplayRoutingBoolInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].BooleanInput[Joins.Booleans.Display18Button_Visibility_fbState], this);
            }
        }

        /// <inheritdoc/>
        public void Display18Button_Visibility_fb(bool digital)
        {
            Display18Button_Visibility_fb((sig, component) => sig.BoolValue = digital);
        }
        /// <inheritdoc/>
        public void Display18Label_Visibility_fb(PublicDisplayRoutingBoolInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].BooleanInput[Joins.Booleans.Display18Label_Visibility_fbState], this);
            }
        }

        /// <inheritdoc/>
        public void Display18Label_Visibility_fb(bool digital)
        {
            Display18Label_Visibility_fb((sig, component) => sig.BoolValue = digital);
        }
        /// <inheritdoc/>
        public void Display19Button_Visibility_fb(PublicDisplayRoutingBoolInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].BooleanInput[Joins.Booleans.Display19Button_Visibility_fbState], this);
            }
        }

        /// <inheritdoc/>
        public void Display19Button_Visibility_fb(bool digital)
        {
            Display19Button_Visibility_fb((sig, component) => sig.BoolValue = digital);
        }
        /// <inheritdoc/>
        public void Display19Label_Visibility_fb(PublicDisplayRoutingBoolInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].BooleanInput[Joins.Booleans.Display19Label_Visibility_fbState], this);
            }
        }

        /// <inheritdoc/>
        public void Display19Label_Visibility_fb(bool digital)
        {
            Display19Label_Visibility_fb((sig, component) => sig.BoolValue = digital);
        }
        /// <inheritdoc/>
        public void Display1Button_Visibility_fb(PublicDisplayRoutingBoolInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].BooleanInput[Joins.Booleans.Display1Button_Visibility_fbState], this);
            }
        }

        /// <inheritdoc/>
        public void Display1Button_Visibility_fb(bool digital)
        {
            Display1Button_Visibility_fb((sig, component) => sig.BoolValue = digital);
        }
        /// <inheritdoc/>
        public void Display1Label_Visibility_fb(PublicDisplayRoutingBoolInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].BooleanInput[Joins.Booleans.Display1Label_Visibility_fbState], this);
            }
        }

        /// <inheritdoc/>
        public void Display1Label_Visibility_fb(bool digital)
        {
            Display1Label_Visibility_fb((sig, component) => sig.BoolValue = digital);
        }
        /// <inheritdoc/>
        public void Display20Button_Visibility_fb(PublicDisplayRoutingBoolInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].BooleanInput[Joins.Booleans.Display20Button_Visibility_fbState], this);
            }
        }

        /// <inheritdoc/>
        public void Display20Button_Visibility_fb(bool digital)
        {
            Display20Button_Visibility_fb((sig, component) => sig.BoolValue = digital);
        }
        /// <inheritdoc/>
        public void Display20Label_Visibility_fb(PublicDisplayRoutingBoolInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].BooleanInput[Joins.Booleans.Display20Label_Visibility_fbState], this);
            }
        }

        /// <inheritdoc/>
        public void Display20Label_Visibility_fb(bool digital)
        {
            Display20Label_Visibility_fb((sig, component) => sig.BoolValue = digital);
        }
        /// <inheritdoc/>
        public void Display2Button_Visibility_fb(PublicDisplayRoutingBoolInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].BooleanInput[Joins.Booleans.Display2Button_Visibility_fbState], this);
            }
        }

        /// <inheritdoc/>
        public void Display2Button_Visibility_fb(bool digital)
        {
            Display2Button_Visibility_fb((sig, component) => sig.BoolValue = digital);
        }
        /// <inheritdoc/>
        public void Display2Label_Visibility_fb(PublicDisplayRoutingBoolInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].BooleanInput[Joins.Booleans.Display2Label_Visibility_fbState], this);
            }
        }

        /// <inheritdoc/>
        public void Display2Label_Visibility_fb(bool digital)
        {
            Display2Label_Visibility_fb((sig, component) => sig.BoolValue = digital);
        }
        /// <inheritdoc/>
        public void Display3Button_Visibility_fb(PublicDisplayRoutingBoolInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].BooleanInput[Joins.Booleans.Display3Button_Visibility_fbState], this);
            }
        }

        /// <inheritdoc/>
        public void Display3Button_Visibility_fb(bool digital)
        {
            Display3Button_Visibility_fb((sig, component) => sig.BoolValue = digital);
        }
        /// <inheritdoc/>
        public void Display3Label_Visibility_fb(PublicDisplayRoutingBoolInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].BooleanInput[Joins.Booleans.Display3Label_Visibility_fbState], this);
            }
        }

        /// <inheritdoc/>
        public void Display3Label_Visibility_fb(bool digital)
        {
            Display3Label_Visibility_fb((sig, component) => sig.BoolValue = digital);
        }
        /// <inheritdoc/>
        public void Display4Button_Visibility_fb(PublicDisplayRoutingBoolInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].BooleanInput[Joins.Booleans.Display4Button_Visibility_fbState], this);
            }
        }

        /// <inheritdoc/>
        public void Display4Button_Visibility_fb(bool digital)
        {
            Display4Button_Visibility_fb((sig, component) => sig.BoolValue = digital);
        }
        /// <inheritdoc/>
        public void Display4Label_Visibility_fb(PublicDisplayRoutingBoolInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].BooleanInput[Joins.Booleans.Display4Label_Visibility_fbState], this);
            }
        }

        /// <inheritdoc/>
        public void Display4Label_Visibility_fb(bool digital)
        {
            Display4Label_Visibility_fb((sig, component) => sig.BoolValue = digital);
        }
        /// <inheritdoc/>
        public void Display5Button_Visibility_fb(PublicDisplayRoutingBoolInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].BooleanInput[Joins.Booleans.Display5Button_Visibility_fbState], this);
            }
        }

        /// <inheritdoc/>
        public void Display5Button_Visibility_fb(bool digital)
        {
            Display5Button_Visibility_fb((sig, component) => sig.BoolValue = digital);
        }
        /// <inheritdoc/>
        public void Display5Label_Visibility_fb(PublicDisplayRoutingBoolInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].BooleanInput[Joins.Booleans.Display5Label_Visibility_fbState], this);
            }
        }

        /// <inheritdoc/>
        public void Display5Label_Visibility_fb(bool digital)
        {
            Display5Label_Visibility_fb((sig, component) => sig.BoolValue = digital);
        }
        /// <inheritdoc/>
        public void Display6Button_Visibility_fb(PublicDisplayRoutingBoolInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].BooleanInput[Joins.Booleans.Display6Button_Visibility_fbState], this);
            }
        }

        /// <inheritdoc/>
        public void Display6Button_Visibility_fb(bool digital)
        {
            Display6Button_Visibility_fb((sig, component) => sig.BoolValue = digital);
        }
        /// <inheritdoc/>
        public void Display6Label_Visibility_fb(PublicDisplayRoutingBoolInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].BooleanInput[Joins.Booleans.Display6Label_Visibility_fbState], this);
            }
        }

        /// <inheritdoc/>
        public void Display6Label_Visibility_fb(bool digital)
        {
            Display6Label_Visibility_fb((sig, component) => sig.BoolValue = digital);
        }
        /// <inheritdoc/>
        public void Display7Button_Visibility_fb(PublicDisplayRoutingBoolInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].BooleanInput[Joins.Booleans.Display7Button_Visibility_fbState], this);
            }
        }

        /// <inheritdoc/>
        public void Display7Button_Visibility_fb(bool digital)
        {
            Display7Button_Visibility_fb((sig, component) => sig.BoolValue = digital);
        }
        /// <inheritdoc/>
        public void Display7Label_Visibility_fb(PublicDisplayRoutingBoolInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].BooleanInput[Joins.Booleans.Display7Label_Visibility_fbState], this);
            }
        }

        /// <inheritdoc/>
        public void Display7Label_Visibility_fb(bool digital)
        {
            Display7Label_Visibility_fb((sig, component) => sig.BoolValue = digital);
        }
        /// <inheritdoc/>
        public void Display8Button_Visibility_fb(PublicDisplayRoutingBoolInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].BooleanInput[Joins.Booleans.Display8Button_Visibility_fbState], this);
            }
        }

        /// <inheritdoc/>
        public void Display8Button_Visibility_fb(bool digital)
        {
            Display8Button_Visibility_fb((sig, component) => sig.BoolValue = digital);
        }
        /// <inheritdoc/>
        public void Display8Label_Visibility_fb(PublicDisplayRoutingBoolInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].BooleanInput[Joins.Booleans.Display8Label_Visibility_fbState], this);
            }
        }

        /// <inheritdoc/>
        public void Display8Label_Visibility_fb(bool digital)
        {
            Display8Label_Visibility_fb((sig, component) => sig.BoolValue = digital);
        }
        /// <inheritdoc/>
        public void Display9Button_Visibility_fb(PublicDisplayRoutingBoolInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].BooleanInput[Joins.Booleans.Display9Button_Visibility_fbState], this);
            }
        }

        /// <inheritdoc/>
        public void Display9Button_Visibility_fb(bool digital)
        {
            Display9Button_Visibility_fb((sig, component) => sig.BoolValue = digital);
        }
        /// <inheritdoc/>
        public void Display9Label_Visibility_fb(PublicDisplayRoutingBoolInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].BooleanInput[Joins.Booleans.Display9Label_Visibility_fbState], this);
            }
        }

        /// <inheritdoc/>
        public void Display9Label_Visibility_fb(bool digital)
        {
            Display9Label_Visibility_fb((sig, component) => sig.BoolValue = digital);
        }
        /// <inheritdoc/>
        public void PublicDisplayRouting_Visibility_fb(PublicDisplayRoutingBoolInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].BooleanInput[Joins.Booleans.PublicDisplayRouting_Visibility_fbState], this);
            }
        }

        /// <inheritdoc/>
        public void PublicDisplayRouting_Visibility_fb(bool digital)
        {
            PublicDisplayRouting_Visibility_fb((sig, component) => sig.BoolValue = digital);
        }
        /// <inheritdoc/>
        public void Source1Button_Selected(PublicDisplayRoutingBoolInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].BooleanInput[Joins.Booleans.Source1Button_SelectedState], this);
            }
        }

        /// <inheritdoc/>
        public void Source1Button_Selected(bool digital)
        {
            Source1Button_Selected((sig, component) => sig.BoolValue = digital);
        }
        /// <inheritdoc/>
        public void Source1Button_Visibility_fb(PublicDisplayRoutingBoolInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].BooleanInput[Joins.Booleans.Source1Button_Visibility_fbState], this);
            }
        }

        /// <inheritdoc/>
        public void Source1Button_Visibility_fb(bool digital)
        {
            Source1Button_Visibility_fb((sig, component) => sig.BoolValue = digital);
        }
        /// <inheritdoc/>
        public void Source2Button_Selected(PublicDisplayRoutingBoolInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].BooleanInput[Joins.Booleans.Source2Button_SelectedState], this);
            }
        }

        /// <inheritdoc/>
        public void Source2Button_Selected(bool digital)
        {
            Source2Button_Selected((sig, component) => sig.BoolValue = digital);
        }
        /// <inheritdoc/>
        public void Source2Button_Visibility_fb(PublicDisplayRoutingBoolInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].BooleanInput[Joins.Booleans.Source2Button_Visibility_fbState], this);
            }
        }

        /// <inheritdoc/>
        public void Source2Button_Visibility_fb(bool digital)
        {
            Source2Button_Visibility_fb((sig, component) => sig.BoolValue = digital);
        }
        /// <inheritdoc/>
        public void Source3Button_Selected(PublicDisplayRoutingBoolInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].BooleanInput[Joins.Booleans.Source3Button_SelectedState], this);
            }
        }

        /// <inheritdoc/>
        public void Source3Button_Selected(bool digital)
        {
            Source3Button_Selected((sig, component) => sig.BoolValue = digital);
        }
        /// <inheritdoc/>
        public void Source3Button_Visibility_fb(PublicDisplayRoutingBoolInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].BooleanInput[Joins.Booleans.Source3Button_Visibility_fbState], this);
            }
        }

        /// <inheritdoc/>
        public void Source3Button_Visibility_fb(bool digital)
        {
            Source3Button_Visibility_fb((sig, component) => sig.BoolValue = digital);
        }
        /// <inheritdoc/>
        public void Source4Button_Selected(PublicDisplayRoutingBoolInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].BooleanInput[Joins.Booleans.Source4Button_SelectedState], this);
            }
        }

        /// <inheritdoc/>
        public void Source4Button_Selected(bool digital)
        {
            Source4Button_Selected((sig, component) => sig.BoolValue = digital);
        }
        /// <inheritdoc/>
        public void Source4Button_Visibility_fb(PublicDisplayRoutingBoolInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].BooleanInput[Joins.Booleans.Source4Button_Visibility_fbState], this);
            }
        }

        /// <inheritdoc/>
        public void Source4Button_Visibility_fb(bool digital)
        {
            Source4Button_Visibility_fb((sig, component) => sig.BoolValue = digital);
        }
        /// <inheritdoc/>
        public void Source5Button_Selected(PublicDisplayRoutingBoolInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].BooleanInput[Joins.Booleans.Source5Button_SelectedState], this);
            }
        }

        /// <inheritdoc/>
        public void Source5Button_Selected(bool digital)
        {
            Source5Button_Selected((sig, component) => sig.BoolValue = digital);
        }
        /// <inheritdoc/>
        public void Source5Button_Visibility_fb(PublicDisplayRoutingBoolInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].BooleanInput[Joins.Booleans.Source5Button_Visibility_fbState], this);
            }
        }

        /// <inheritdoc/>
        public void Source5Button_Visibility_fb(bool digital)
        {
            Source5Button_Visibility_fb((sig, component) => sig.BoolValue = digital);
        }
        /// <inheritdoc/>
        public void Source6Button_Selected(PublicDisplayRoutingBoolInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].BooleanInput[Joins.Booleans.Source6Button_SelectedState], this);
            }
        }

        /// <inheritdoc/>
        public void Source6Button_Selected(bool digital)
        {
            Source6Button_Selected((sig, component) => sig.BoolValue = digital);
        }
        /// <inheritdoc/>
        public void Source6Button_Visibility_fb(PublicDisplayRoutingBoolInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].BooleanInput[Joins.Booleans.Source6Button_Visibility_fbState], this);
            }
        }

        /// <inheritdoc/>
        public void Source6Button_Visibility_fb(bool digital)
        {
            Source6Button_Visibility_fb((sig, component) => sig.BoolValue = digital);
        }
        /// <inheritdoc/>
        public void Source7Button_Selected(PublicDisplayRoutingBoolInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].BooleanInput[Joins.Booleans.Source7Button_SelectedState], this);
            }
        }

        /// <inheritdoc/>
        public void Source7Button_Selected(bool digital)
        {
            Source7Button_Selected((sig, component) => sig.BoolValue = digital);
        }
        /// <inheritdoc/>
        public void Source7Button_Visibility_fb(PublicDisplayRoutingBoolInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].BooleanInput[Joins.Booleans.Source7Button_Visibility_fbState], this);
            }
        }

        /// <inheritdoc/>
        public void Source7Button_Visibility_fb(bool digital)
        {
            Source7Button_Visibility_fb((sig, component) => sig.BoolValue = digital);
        }
        /// <inheritdoc/>
        public void Source8Button_Selected(PublicDisplayRoutingBoolInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].BooleanInput[Joins.Booleans.Source8Button_SelectedState], this);
            }
        }

        /// <inheritdoc/>
        public void Source8Button_Selected(bool digital)
        {
            Source8Button_Selected((sig, component) => sig.BoolValue = digital);
        }
        /// <inheritdoc/>
        public void Source8Button_Visibility_fb(PublicDisplayRoutingBoolInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].BooleanInput[Joins.Booleans.Source8Button_Visibility_fbState], this);
            }
        }

        /// <inheritdoc/>
        public void Source8Button_Visibility_fb(bool digital)
        {
            Source8Button_Visibility_fb((sig, component) => sig.BoolValue = digital);
        }
        /// <inheritdoc/>
        public void Source9Button_Selected(PublicDisplayRoutingBoolInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].BooleanInput[Joins.Booleans.Source9Button_SelectedState], this);
            }
        }

        /// <inheritdoc/>
        public void Source9Button_Selected(bool digital)
        {
            Source9Button_Selected((sig, component) => sig.BoolValue = digital);
        }
        /// <inheritdoc/>
        public void Source9Button_Visibility_fb(PublicDisplayRoutingBoolInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].BooleanInput[Joins.Booleans.Source9Button_Visibility_fbState], this);
            }
        }

        /// <inheritdoc/>
        public void Source9Button_Visibility_fb(bool digital)
        {
            Source9Button_Visibility_fb((sig, component) => sig.BoolValue = digital);
        }
        /// <inheritdoc/>
        public void SourceClearButton_Selected(PublicDisplayRoutingBoolInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].BooleanInput[Joins.Booleans.SourceClearButton_SelectedState], this);
            }
        }

        /// <inheritdoc/>
        public void SourceClearButton_Selected(bool digital)
        {
            SourceClearButton_Selected((sig, component) => sig.BoolValue = digital);
        }
        /// <inheritdoc/>
        public void SourceClearButton_Visibility_fb(PublicDisplayRoutingBoolInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].BooleanInput[Joins.Booleans.SourceClearButton_Visibility_fbState], this);
            }
        }

        /// <inheritdoc/>
        public void SourceClearButton_Visibility_fb(bool digital)
        {
            SourceClearButton_Visibility_fb((sig, component) => sig.BoolValue = digital);
        }


        /// <inheritdoc/>
        public void Display10Button_IndirectRichText(PublicDisplayRoutingStringInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].StringInput[Joins.Strings.Display10Button_IndirectRichTextState], this);
            }
        }

        /// <inheritdoc/>
        public void Display10Button_IndirectRichText(string serial)
        {
            Display10Button_IndirectRichText((sig, component) => sig.StringValue = serial);
        }
        /// <inheritdoc/>
        public void Display10Label_IndirectRichText(PublicDisplayRoutingStringInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].StringInput[Joins.Strings.Display10Label_IndirectRichTextState], this);
            }
        }

        /// <inheritdoc/>
        public void Display10Label_IndirectRichText(string serial)
        {
            Display10Label_IndirectRichText((sig, component) => sig.StringValue = serial);
        }
        /// <inheritdoc/>
        public void Display11Button_IndirectRichText(PublicDisplayRoutingStringInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].StringInput[Joins.Strings.Display11Button_IndirectRichTextState], this);
            }
        }

        /// <inheritdoc/>
        public void Display11Button_IndirectRichText(string serial)
        {
            Display11Button_IndirectRichText((sig, component) => sig.StringValue = serial);
        }
        /// <inheritdoc/>
        public void Display11Label_IndirectRichText(PublicDisplayRoutingStringInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].StringInput[Joins.Strings.Display11Label_IndirectRichTextState], this);
            }
        }

        /// <inheritdoc/>
        public void Display11Label_IndirectRichText(string serial)
        {
            Display11Label_IndirectRichText((sig, component) => sig.StringValue = serial);
        }
        /// <inheritdoc/>
        public void Display12Button_IndirectRichText(PublicDisplayRoutingStringInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].StringInput[Joins.Strings.Display12Button_IndirectRichTextState], this);
            }
        }

        /// <inheritdoc/>
        public void Display12Button_IndirectRichText(string serial)
        {
            Display12Button_IndirectRichText((sig, component) => sig.StringValue = serial);
        }
        /// <inheritdoc/>
        public void Display12Label_IndirectRichText(PublicDisplayRoutingStringInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].StringInput[Joins.Strings.Display12Label_IndirectRichTextState], this);
            }
        }

        /// <inheritdoc/>
        public void Display12Label_IndirectRichText(string serial)
        {
            Display12Label_IndirectRichText((sig, component) => sig.StringValue = serial);
        }
        /// <inheritdoc/>
        public void Display13Button_IndirectRichText(PublicDisplayRoutingStringInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].StringInput[Joins.Strings.Display13Button_IndirectRichTextState], this);
            }
        }

        /// <inheritdoc/>
        public void Display13Button_IndirectRichText(string serial)
        {
            Display13Button_IndirectRichText((sig, component) => sig.StringValue = serial);
        }
        /// <inheritdoc/>
        public void Display13Label_IndirectRichText(PublicDisplayRoutingStringInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].StringInput[Joins.Strings.Display13Label_IndirectRichTextState], this);
            }
        }

        /// <inheritdoc/>
        public void Display13Label_IndirectRichText(string serial)
        {
            Display13Label_IndirectRichText((sig, component) => sig.StringValue = serial);
        }
        /// <inheritdoc/>
        public void Display14Button_IndirectRichText(PublicDisplayRoutingStringInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].StringInput[Joins.Strings.Display14Button_IndirectRichTextState], this);
            }
        }

        /// <inheritdoc/>
        public void Display14Button_IndirectRichText(string serial)
        {
            Display14Button_IndirectRichText((sig, component) => sig.StringValue = serial);
        }
        /// <inheritdoc/>
        public void Display14Label_IndirectRichText(PublicDisplayRoutingStringInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].StringInput[Joins.Strings.Display14Label_IndirectRichTextState], this);
            }
        }

        /// <inheritdoc/>
        public void Display14Label_IndirectRichText(string serial)
        {
            Display14Label_IndirectRichText((sig, component) => sig.StringValue = serial);
        }
        /// <inheritdoc/>
        public void Display15Button_IndirectRichText(PublicDisplayRoutingStringInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].StringInput[Joins.Strings.Display15Button_IndirectRichTextState], this);
            }
        }

        /// <inheritdoc/>
        public void Display15Button_IndirectRichText(string serial)
        {
            Display15Button_IndirectRichText((sig, component) => sig.StringValue = serial);
        }
        /// <inheritdoc/>
        public void Display15Label_IndirectRichText(PublicDisplayRoutingStringInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].StringInput[Joins.Strings.Display15Label_IndirectRichTextState], this);
            }
        }

        /// <inheritdoc/>
        public void Display15Label_IndirectRichText(string serial)
        {
            Display15Label_IndirectRichText((sig, component) => sig.StringValue = serial);
        }
        /// <inheritdoc/>
        public void Display16Button_IndirectRichText(PublicDisplayRoutingStringInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].StringInput[Joins.Strings.Display16Button_IndirectRichTextState], this);
            }
        }

        /// <inheritdoc/>
        public void Display16Button_IndirectRichText(string serial)
        {
            Display16Button_IndirectRichText((sig, component) => sig.StringValue = serial);
        }
        /// <inheritdoc/>
        public void Display16Label_IndirectRichText(PublicDisplayRoutingStringInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].StringInput[Joins.Strings.Display16Label_IndirectRichTextState], this);
            }
        }

        /// <inheritdoc/>
        public void Display16Label_IndirectRichText(string serial)
        {
            Display16Label_IndirectRichText((sig, component) => sig.StringValue = serial);
        }
        /// <inheritdoc/>
        public void Display17Button_IndirectRichText(PublicDisplayRoutingStringInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].StringInput[Joins.Strings.Display17Button_IndirectRichTextState], this);
            }
        }

        /// <inheritdoc/>
        public void Display17Button_IndirectRichText(string serial)
        {
            Display17Button_IndirectRichText((sig, component) => sig.StringValue = serial);
        }
        /// <inheritdoc/>
        public void Display17Label_IndirectRichText(PublicDisplayRoutingStringInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].StringInput[Joins.Strings.Display17Label_IndirectRichTextState], this);
            }
        }

        /// <inheritdoc/>
        public void Display17Label_IndirectRichText(string serial)
        {
            Display17Label_IndirectRichText((sig, component) => sig.StringValue = serial);
        }
        /// <inheritdoc/>
        public void Display18Button_IndirectRichText(PublicDisplayRoutingStringInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].StringInput[Joins.Strings.Display18Button_IndirectRichTextState], this);
            }
        }

        /// <inheritdoc/>
        public void Display18Button_IndirectRichText(string serial)
        {
            Display18Button_IndirectRichText((sig, component) => sig.StringValue = serial);
        }
        /// <inheritdoc/>
        public void Display18Label_IndirectRichText(PublicDisplayRoutingStringInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].StringInput[Joins.Strings.Display18Label_IndirectRichTextState], this);
            }
        }

        /// <inheritdoc/>
        public void Display18Label_IndirectRichText(string serial)
        {
            Display18Label_IndirectRichText((sig, component) => sig.StringValue = serial);
        }
        /// <inheritdoc/>
        public void Display19Button_IndirectRichText(PublicDisplayRoutingStringInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].StringInput[Joins.Strings.Display19Button_IndirectRichTextState], this);
            }
        }

        /// <inheritdoc/>
        public void Display19Button_IndirectRichText(string serial)
        {
            Display19Button_IndirectRichText((sig, component) => sig.StringValue = serial);
        }
        /// <inheritdoc/>
        public void Display19Label_IndirectRichText(PublicDisplayRoutingStringInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].StringInput[Joins.Strings.Display19Label_IndirectRichTextState], this);
            }
        }

        /// <inheritdoc/>
        public void Display19Label_IndirectRichText(string serial)
        {
            Display19Label_IndirectRichText((sig, component) => sig.StringValue = serial);
        }
        /// <inheritdoc/>
        public void Display1Button_IndirectRichText(PublicDisplayRoutingStringInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].StringInput[Joins.Strings.Display1Button_IndirectRichTextState], this);
            }
        }

        /// <inheritdoc/>
        public void Display1Button_IndirectRichText(string serial)
        {
            Display1Button_IndirectRichText((sig, component) => sig.StringValue = serial);
        }
        /// <inheritdoc/>
        public void Display1Label_IndirectRichText(PublicDisplayRoutingStringInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].StringInput[Joins.Strings.Display1Label_IndirectRichTextState], this);
            }
        }

        /// <inheritdoc/>
        public void Display1Label_IndirectRichText(string serial)
        {
            Display1Label_IndirectRichText((sig, component) => sig.StringValue = serial);
        }
        /// <inheritdoc/>
        public void Display20Button_IndirectRichText(PublicDisplayRoutingStringInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].StringInput[Joins.Strings.Display20Button_IndirectRichTextState], this);
            }
        }

        /// <inheritdoc/>
        public void Display20Button_IndirectRichText(string serial)
        {
            Display20Button_IndirectRichText((sig, component) => sig.StringValue = serial);
        }
        /// <inheritdoc/>
        public void Display20Label_IndirectRichText(PublicDisplayRoutingStringInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].StringInput[Joins.Strings.Display20Label_IndirectRichTextState], this);
            }
        }

        /// <inheritdoc/>
        public void Display20Label_IndirectRichText(string serial)
        {
            Display20Label_IndirectRichText((sig, component) => sig.StringValue = serial);
        }
        /// <inheritdoc/>
        public void Display2Button_IndirectRichText(PublicDisplayRoutingStringInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].StringInput[Joins.Strings.Display2Button_IndirectRichTextState], this);
            }
        }

        /// <inheritdoc/>
        public void Display2Button_IndirectRichText(string serial)
        {
            Display2Button_IndirectRichText((sig, component) => sig.StringValue = serial);
        }
        /// <inheritdoc/>
        public void Display2Label_IndirectRichText(PublicDisplayRoutingStringInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].StringInput[Joins.Strings.Display2Label_IndirectRichTextState], this);
            }
        }

        /// <inheritdoc/>
        public void Display2Label_IndirectRichText(string serial)
        {
            Display2Label_IndirectRichText((sig, component) => sig.StringValue = serial);
        }
        /// <inheritdoc/>
        public void Display3Button_IndirectRichText(PublicDisplayRoutingStringInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].StringInput[Joins.Strings.Display3Button_IndirectRichTextState], this);
            }
        }

        /// <inheritdoc/>
        public void Display3Button_IndirectRichText(string serial)
        {
            Display3Button_IndirectRichText((sig, component) => sig.StringValue = serial);
        }
        /// <inheritdoc/>
        public void Display3Label_IndirectRichText(PublicDisplayRoutingStringInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].StringInput[Joins.Strings.Display3Label_IndirectRichTextState], this);
            }
        }

        /// <inheritdoc/>
        public void Display3Label_IndirectRichText(string serial)
        {
            Display3Label_IndirectRichText((sig, component) => sig.StringValue = serial);
        }
        /// <inheritdoc/>
        public void Display4Button_IndirectRichText(PublicDisplayRoutingStringInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].StringInput[Joins.Strings.Display4Button_IndirectRichTextState], this);
            }
        }

        /// <inheritdoc/>
        public void Display4Button_IndirectRichText(string serial)
        {
            Display4Button_IndirectRichText((sig, component) => sig.StringValue = serial);
        }
        /// <inheritdoc/>
        public void Display4Label_IndirectRichText(PublicDisplayRoutingStringInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].StringInput[Joins.Strings.Display4Label_IndirectRichTextState], this);
            }
        }

        /// <inheritdoc/>
        public void Display4Label_IndirectRichText(string serial)
        {
            Display4Label_IndirectRichText((sig, component) => sig.StringValue = serial);
        }
        /// <inheritdoc/>
        public void Display5Button_IndirectRichText(PublicDisplayRoutingStringInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].StringInput[Joins.Strings.Display5Button_IndirectRichTextState], this);
            }
        }

        /// <inheritdoc/>
        public void Display5Button_IndirectRichText(string serial)
        {
            Display5Button_IndirectRichText((sig, component) => sig.StringValue = serial);
        }
        /// <inheritdoc/>
        public void Display5Label_IndirectRichText(PublicDisplayRoutingStringInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].StringInput[Joins.Strings.Display5Label_IndirectRichTextState], this);
            }
        }

        /// <inheritdoc/>
        public void Display5Label_IndirectRichText(string serial)
        {
            Display5Label_IndirectRichText((sig, component) => sig.StringValue = serial);
        }
        /// <inheritdoc/>
        public void Display6Button_IndirectRichText(PublicDisplayRoutingStringInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].StringInput[Joins.Strings.Display6Button_IndirectRichTextState], this);
            }
        }

        /// <inheritdoc/>
        public void Display6Button_IndirectRichText(string serial)
        {
            Display6Button_IndirectRichText((sig, component) => sig.StringValue = serial);
        }
        /// <inheritdoc/>
        public void Display6Label_IndirectRichText(PublicDisplayRoutingStringInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].StringInput[Joins.Strings.Display6Label_IndirectRichTextState], this);
            }
        }

        /// <inheritdoc/>
        public void Display6Label_IndirectRichText(string serial)
        {
            Display6Label_IndirectRichText((sig, component) => sig.StringValue = serial);
        }
        /// <inheritdoc/>
        public void Display7Button_IndirectRichText(PublicDisplayRoutingStringInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].StringInput[Joins.Strings.Display7Button_IndirectRichTextState], this);
            }
        }

        /// <inheritdoc/>
        public void Display7Button_IndirectRichText(string serial)
        {
            Display7Button_IndirectRichText((sig, component) => sig.StringValue = serial);
        }
        /// <inheritdoc/>
        public void Display7Label_IndirectRichText(PublicDisplayRoutingStringInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].StringInput[Joins.Strings.Display7Label_IndirectRichTextState], this);
            }
        }

        /// <inheritdoc/>
        public void Display7Label_IndirectRichText(string serial)
        {
            Display7Label_IndirectRichText((sig, component) => sig.StringValue = serial);
        }
        /// <inheritdoc/>
        public void Display8Button_IndirectRichText(PublicDisplayRoutingStringInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].StringInput[Joins.Strings.Display8Button_IndirectRichTextState], this);
            }
        }

        /// <inheritdoc/>
        public void Display8Button_IndirectRichText(string serial)
        {
            Display8Button_IndirectRichText((sig, component) => sig.StringValue = serial);
        }
        /// <inheritdoc/>
        public void Display8Label_IndirectRichText(PublicDisplayRoutingStringInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].StringInput[Joins.Strings.Display8Label_IndirectRichTextState], this);
            }
        }

        /// <inheritdoc/>
        public void Display8Label_IndirectRichText(string serial)
        {
            Display8Label_IndirectRichText((sig, component) => sig.StringValue = serial);
        }
        /// <inheritdoc/>
        public void Display9Button_IndirectRichText(PublicDisplayRoutingStringInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].StringInput[Joins.Strings.Display9Button_IndirectRichTextState], this);
            }
        }

        /// <inheritdoc/>
        public void Display9Button_IndirectRichText(string serial)
        {
            Display9Button_IndirectRichText((sig, component) => sig.StringValue = serial);
        }
        /// <inheritdoc/>
        public void Display9Label_IndirectRichText(PublicDisplayRoutingStringInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].StringInput[Joins.Strings.Display9Label_IndirectRichTextState], this);
            }
        }

        /// <inheritdoc/>
        public void Display9Label_IndirectRichText(string serial)
        {
            Display9Label_IndirectRichText((sig, component) => sig.StringValue = serial);
        }
        /// <inheritdoc/>
        public void Source1Button_Icon(PublicDisplayRoutingStringInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].StringInput[Joins.Strings.Source1Button_IconState], this);
            }
        }

        /// <inheritdoc/>
        public void Source1Button_Icon(string serial)
        {
            Source1Button_Icon((sig, component) => sig.StringValue = serial);
        }
        /// <inheritdoc/>
        public void Source1Button_IndirectRichText(PublicDisplayRoutingStringInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].StringInput[Joins.Strings.Source1Button_IndirectRichTextState], this);
            }
        }

        /// <inheritdoc/>
        public void Source1Button_IndirectRichText(string serial)
        {
            Source1Button_IndirectRichText((sig, component) => sig.StringValue = serial);
        }
        /// <inheritdoc/>
        public void Source2Button_Icon(PublicDisplayRoutingStringInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].StringInput[Joins.Strings.Source2Button_IconState], this);
            }
        }

        /// <inheritdoc/>
        public void Source2Button_Icon(string serial)
        {
            Source2Button_Icon((sig, component) => sig.StringValue = serial);
        }
        /// <inheritdoc/>
        public void Source2Button_IndirectRichText(PublicDisplayRoutingStringInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].StringInput[Joins.Strings.Source2Button_IndirectRichTextState], this);
            }
        }

        /// <inheritdoc/>
        public void Source2Button_IndirectRichText(string serial)
        {
            Source2Button_IndirectRichText((sig, component) => sig.StringValue = serial);
        }
        /// <inheritdoc/>
        public void Source3Button_Icon(PublicDisplayRoutingStringInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].StringInput[Joins.Strings.Source3Button_IconState], this);
            }
        }

        /// <inheritdoc/>
        public void Source3Button_Icon(string serial)
        {
            Source3Button_Icon((sig, component) => sig.StringValue = serial);
        }
        /// <inheritdoc/>
        public void Source3Button_IndirectRichText(PublicDisplayRoutingStringInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].StringInput[Joins.Strings.Source3Button_IndirectRichTextState], this);
            }
        }

        /// <inheritdoc/>
        public void Source3Button_IndirectRichText(string serial)
        {
            Source3Button_IndirectRichText((sig, component) => sig.StringValue = serial);
        }
        /// <inheritdoc/>
        public void Source4Button_Icon(PublicDisplayRoutingStringInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].StringInput[Joins.Strings.Source4Button_IconState], this);
            }
        }

        /// <inheritdoc/>
        public void Source4Button_Icon(string serial)
        {
            Source4Button_Icon((sig, component) => sig.StringValue = serial);
        }
        /// <inheritdoc/>
        public void Source4Button_IndirectRichText(PublicDisplayRoutingStringInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].StringInput[Joins.Strings.Source4Button_IndirectRichTextState], this);
            }
        }

        /// <inheritdoc/>
        public void Source4Button_IndirectRichText(string serial)
        {
            Source4Button_IndirectRichText((sig, component) => sig.StringValue = serial);
        }
        /// <inheritdoc/>
        public void Source5Button_Icon(PublicDisplayRoutingStringInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].StringInput[Joins.Strings.Source5Button_IconState], this);
            }
        }

        /// <inheritdoc/>
        public void Source5Button_Icon(string serial)
        {
            Source5Button_Icon((sig, component) => sig.StringValue = serial);
        }
        /// <inheritdoc/>
        public void Source5Button_IndirectRichText(PublicDisplayRoutingStringInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].StringInput[Joins.Strings.Source5Button_IndirectRichTextState], this);
            }
        }

        /// <inheritdoc/>
        public void Source5Button_IndirectRichText(string serial)
        {
            Source5Button_IndirectRichText((sig, component) => sig.StringValue = serial);
        }
        /// <inheritdoc/>
        public void Source6Button_Icon(PublicDisplayRoutingStringInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].StringInput[Joins.Strings.Source6Button_IconState], this);
            }
        }

        /// <inheritdoc/>
        public void Source6Button_Icon(string serial)
        {
            Source6Button_Icon((sig, component) => sig.StringValue = serial);
        }
        /// <inheritdoc/>
        public void Source6Button_IndirectRichText(PublicDisplayRoutingStringInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].StringInput[Joins.Strings.Source6Button_IndirectRichTextState], this);
            }
        }

        /// <inheritdoc/>
        public void Source6Button_IndirectRichText(string serial)
        {
            Source6Button_IndirectRichText((sig, component) => sig.StringValue = serial);
        }
        /// <inheritdoc/>
        public void Source7Button_Icon(PublicDisplayRoutingStringInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].StringInput[Joins.Strings.Source7Button_IconState], this);
            }
        }

        /// <inheritdoc/>
        public void Source7Button_Icon(string serial)
        {
            Source7Button_Icon((sig, component) => sig.StringValue = serial);
        }
        /// <inheritdoc/>
        public void Source7Button_IndirectRichText(PublicDisplayRoutingStringInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].StringInput[Joins.Strings.Source7Button_IndirectRichTextState], this);
            }
        }

        /// <inheritdoc/>
        public void Source7Button_IndirectRichText(string serial)
        {
            Source7Button_IndirectRichText((sig, component) => sig.StringValue = serial);
        }
        /// <inheritdoc/>
        public void Source8Button_Icon(PublicDisplayRoutingStringInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].StringInput[Joins.Strings.Source8Button_IconState], this);
            }
        }

        /// <inheritdoc/>
        public void Source8Button_Icon(string serial)
        {
            Source8Button_Icon((sig, component) => sig.StringValue = serial);
        }
        /// <inheritdoc/>
        public void Source8Button_IndirectRichText(PublicDisplayRoutingStringInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].StringInput[Joins.Strings.Source8Button_IndirectRichTextState], this);
            }
        }

        /// <inheritdoc/>
        public void Source8Button_IndirectRichText(string serial)
        {
            Source8Button_IndirectRichText((sig, component) => sig.StringValue = serial);
        }
        /// <inheritdoc/>
        public void Source9Button_Icon(PublicDisplayRoutingStringInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].StringInput[Joins.Strings.Source9Button_IconState], this);
            }
        }

        /// <inheritdoc/>
        public void Source9Button_Icon(string serial)
        {
            Source9Button_Icon((sig, component) => sig.StringValue = serial);
        }
        /// <inheritdoc/>
        public void Source9Button_IndirectRichText(PublicDisplayRoutingStringInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].StringInput[Joins.Strings.Source9Button_IndirectRichTextState], this);
            }
        }

        /// <inheritdoc/>
        public void Source9Button_IndirectRichText(string serial)
        {
            Source9Button_IndirectRichText((sig, component) => sig.StringValue = serial);
        }
        /// <inheritdoc/>
        public void SourceClearButton_Icon(PublicDisplayRoutingStringInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].StringInput[Joins.Strings.SourceClearButton_IconState], this);
            }
        }

        /// <inheritdoc/>
        public void SourceClearButton_Icon(string serial)
        {
            SourceClearButton_Icon((sig, component) => sig.StringValue = serial);
        }
        /// <inheritdoc/>
        public void SourceClearButton_IndirectRichText(PublicDisplayRoutingStringInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].StringInput[Joins.Strings.SourceClearButton_IndirectRichTextState], this);
            }
        }

        /// <inheritdoc/>
        public void SourceClearButton_IndirectRichText(string serial)
        {
            SourceClearButton_IndirectRichText((sig, component) => sig.StringValue = serial);
        }

        #endregion

        #region Overrides

        public override int GetHashCode()
        {
            return (int)ControlJoinId;
        }

        public override string ToString()
        {
            return string.Format("Contract: {0} Component: {1} HashCode: {2} {3}", "PublicDisplayRouting", GetType().Name, GetHashCode(), UserObject != null ? "UserObject: " + UserObject : null);
        }

        #endregion

        #region IDisposable

        public bool IsDisposed { get; set; }

        public void Dispose()
        {
            if (IsDisposed)
                return;

            IsDisposed = true;

            Display10Button_PressEvent = null;
            Display11Button_PressEvent = null;
            Display12Button_PressEvent = null;
            Display13Button_PressEvent = null;
            Display14Button_PressEvent = null;
            Display15Button_PressEvent = null;
            Display16Button_PressEvent = null;
            Display17Button_PressEvent = null;
            Display18Button_PressEvent = null;
            Display19Button_PressEvent = null;
            Display1Button_PressEvent = null;
            Display20Button_PressEvent = null;
            Display2Button_PressEvent = null;
            Display3Button_PressEvent = null;
            Display4Button_PressEvent = null;
            Display5Button_PressEvent = null;
            Display6Button_PressEvent = null;
            Display7Button_PressEvent = null;
            Display8Button_PressEvent = null;
            Display9Button_PressEvent = null;
            Source1Button_PressEvent = null;
            Source2Button_PressEvent = null;
            Source3Button_PressEvent = null;
            Source4Button_PressEvent = null;
            Source5Button_PressEvent = null;
            Source6Button_PressEvent = null;
            Source7Button_PressEvent = null;
            Source8Button_PressEvent = null;
            Source9Button_PressEvent = null;
            SourceClearButton_PressEvent = null;
        }

        #endregion
    }
}
