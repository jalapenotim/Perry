//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by CrestronConstruct.
//     AppHost:     2.601.10.0
//     UI Plugin:   1.4201.17.0
//
//     Project:     SLRC-User
//     Version:     1.0.0.0
//     Sdk:         CH5:2.16.0
//     Strategy:    Modern
//     IndexOnly:   False
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq;
using Crestron.SimplSharp;
using Crestron.SimplSharpPro;
using Crestron.SimplSharpPro.DeviceSupport;
using SLRCUser;

namespace SLRCUser.PoolAudio
{

    /// <summary>
    /// Pool Audio
    /// </summary>
    public partial interface IPoolAudio 
    {
        object UserObject { get; set; }

        /// <summary>
        /// Event Bleachers Off Button.Press (from panel to Control System)
        /// </summary>
        event EventHandler<UIEventArgs> BleachersOffButton_PressEvent;

        /// <summary>
        /// Event Bleachers On Button.Press (from panel to Control System)
        /// </summary>
        event EventHandler<UIEventArgs> BleachersOnButton_PressEvent;

        /// <summary>
        /// Event Perimeter Off Button.Press (from panel to Control System)
        /// </summary>
        event EventHandler<UIEventArgs> PerimeterOffButton_PressEvent;

        /// <summary>
        /// Event Perimeter On Button.Press (from panel to Control System)
        /// </summary>
        event EventHandler<UIEventArgs> PerimeterOnButton_PressEvent;

        /// <summary>
        /// Pool Audio.VisibilityJoin Feedback
        /// </summary>
        /// <param name="callback">The bool delegate to update the panel.</param>
        void PoolAudio_VisibilityJoin(PoolAudioBoolInputSigDelegate callback);

        /// <summary>
        /// Pool Audio.VisibilityJoin Feedback
        /// </summary>
        /// <param name="digital">The bool to update the panel.</param>
        void PoolAudio_VisibilityJoin(bool digital);

        /// <summary>
        /// Bleachers Off Button.Selected Feedback
        /// </summary>
        /// <param name="callback">The bool delegate to update the panel.</param>
        void BleachersOffButton_Selected(PoolAudioBoolInputSigDelegate callback);

        /// <summary>
        /// Bleachers Off Button.Selected Feedback
        /// </summary>
        /// <param name="digital">The bool to update the panel.</param>
        void BleachersOffButton_Selected(bool digital);

        /// <summary>
        /// Bleachers On Button.Selected Feedback
        /// </summary>
        /// <param name="callback">The bool delegate to update the panel.</param>
        void BleachersOnButton_Selected(PoolAudioBoolInputSigDelegate callback);

        /// <summary>
        /// Bleachers On Button.Selected Feedback
        /// </summary>
        /// <param name="digital">The bool to update the panel.</param>
        void BleachersOnButton_Selected(bool digital);

        /// <summary>
        /// Perimeter Off Button.Selected Feedback
        /// </summary>
        /// <param name="callback">The bool delegate to update the panel.</param>
        void PerimeterOffButton_Selected(PoolAudioBoolInputSigDelegate callback);

        /// <summary>
        /// Perimeter Off Button.Selected Feedback
        /// </summary>
        /// <param name="digital">The bool to update the panel.</param>
        void PerimeterOffButton_Selected(bool digital);

        /// <summary>
        /// Perimeter On Button.Selected Feedback
        /// </summary>
        /// <param name="callback">The bool delegate to update the panel.</param>
        void PerimeterOnButton_Selected(PoolAudioBoolInputSigDelegate callback);

        /// <summary>
        /// Perimeter On Button.Selected Feedback
        /// </summary>
        /// <param name="digital">The bool to update the panel.</param>
        void PerimeterOnButton_Selected(bool digital);

        /// <summary>
        /// ComplexComponent Header
        /// </summary>
        SLRCUser.PoolAudio.IHeader Header { get; }

        /// <summary>
        /// ComplexComponent Fieldhouse-Pool Audio Controls
        /// </summary>
        SLRCUser.PoolAudio.OfficeWidgetList.IOfficeWidgetList OfficeWidgetList { get; }

        /// <summary>
        /// ComplexComponent Building Mute
        /// </summary>
        SLRCUser.PoolAudio.IBuildingMute BuildingMute { get; }

        /// <summary>
        /// ComplexComponent Fieldhouse-Pool Audio Controls
        /// </summary>
        SLRCUser.PoolAudio.IBuildingProgramWidget BuildingProgramWidget { get; }

        /// <summary>
        /// ComplexComponent Fieldhouse-Pool Audio Controls
        /// </summary>
        SLRCUser.PoolAudio.BoothWidgetList.IBoothWidgetList BoothWidgetList { get; }
    }

    /// <summary>
    /// Digital callback used in feedback events.
    /// </summary>
    /// <param name="boolInputSig">The <see cref="BoolInputSig"/> joinInfo data.</param>
    /// <param name="poolaudio">The <see cref="IPoolAudio"/> on which to apply the feedback.</param>
    public delegate void PoolAudioBoolInputSigDelegate(BoolInputSig boolInputSig, IPoolAudio poolaudio);

    /// <summary>
    /// Pool Audio
    /// </summary>
    internal partial class PoolAudio : IPoolAudio, IDisposable
    {
        #region Standard CH5 Component members

        private ComponentMediator ComponentMediator { get; set; }

        public object UserObject { get; set; }

        /// <summary>
        /// Gets the ControlJoinId a.k.a. SmartObjectId.  This Id identifies the extender symbol.
        /// </summary>
        public uint ControlJoinId { get; private set; }

        private IList<BasicTriListWithSmartObject> _devices;

        /// <summary>
        /// Gets the list of devices.
        /// </summary>
        public IList<BasicTriListWithSmartObject> Devices { get { return _devices; } }

        #endregion

        #region Joins

        private static class Joins
        {
            /// <summary>
            /// Digital signals,
            /// </summary>
            internal static class Booleans
            {
                /// <summary>
                /// Output or Event digital joinInfo from panel to Control System: PoolAudio.BleachersOffButton.Press
                /// Bleachers Off Button.Press
                /// </summary>
                public const uint BleachersOffButton_PressEvent = 3;

                /// <summary>
                /// Output or Event digital joinInfo from panel to Control System: PoolAudio.BleachersOnButton.Press
                /// Bleachers On Button.Press
                /// </summary>
                public const uint BleachersOnButton_PressEvent = 4;

                /// <summary>
                /// Output or Event digital joinInfo from panel to Control System: PoolAudio.PerimeterOffButton.Press
                /// Perimeter Off Button.Press
                /// </summary>
                public const uint PerimeterOffButton_PressEvent = 5;

                /// <summary>
                /// Output or Event digital joinInfo from panel to Control System: PoolAudio.PerimeterOnButton.Press
                /// Perimeter On Button.Press
                /// </summary>
                public const uint PerimeterOnButton_PressEvent = 6;


                /// <summary>
                /// Input or Feedback digital joinInfo from Control System to panel: PoolAudioVisibilityJoin
                /// Pool Audio.VisibilityJoin
                /// </summary>
                public const uint PoolAudio_VisibilityJoinState = 1;

                /// <summary>
                /// Input or Feedback digital joinInfo from Control System to panel: PoolAudio.BleachersOffButton.Selected
                /// Bleachers Off Button.Selected
                /// </summary>
                public const uint BleachersOffButton_SelectedState = 4;

                /// <summary>
                /// Input or Feedback digital joinInfo from Control System to panel: PoolAudio.BleachersOnButton.Selected
                /// Bleachers On Button.Selected
                /// </summary>
                public const uint BleachersOnButton_SelectedState = 5;

                /// <summary>
                /// Input or Feedback digital joinInfo from Control System to panel: PoolAudio.PerimeterOffButton.Selected
                /// Perimeter Off Button.Selected
                /// </summary>
                public const uint PerimeterOffButton_SelectedState = 6;

                /// <summary>
                /// Input or Feedback digital joinInfo from Control System to panel: PoolAudio.PerimeterOnButton.Selected
                /// Perimeter On Button.Selected
                /// </summary>
                public const uint PerimeterOnButton_SelectedState = 7;

            }
        }

        #endregion

        #region Construction and Initialization

        /// <summary>
        /// Initializes a new instance of the <see cref="PoolAudio"/> component class.
        /// </summary>
        /// <param name="componentMediator">The <see cref="ComponentMediator"/> used to instantiate the component.</param>
        /// <param name="controlJoinId">The SmartObjectId at which to create the component.</param>
        /// <param name="itemCount">The number of items.</param>
        internal PoolAudio(ComponentMediator componentMediator, uint controlJoinId, uint? itemCount)
        {
            ComponentMediator = componentMediator;
            Initialize(controlJoinId, itemCount);
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PoolAudio"/> component class.
        /// </summary>
        /// <param name="componentMediator">The <see cref="ComponentMediator"/> used to instantiate the component.</param>
        /// <param name="controlJoinId">The SmartObjectId at which to create the component.</param>
        internal PoolAudio(ComponentMediator componentMediator, uint controlJoinId) : this(componentMediator, controlJoinId, null)
        {
        }

        /// <summary>
        /// Initializes a new instance with default itemCount.
        /// </summary>
        /// <param name="controlJoinId">The SmartObjectId at which to create the component.</param>
        private void Initialize(uint controlJoinId)
        {
            Initialize(controlJoinId, null);
        }

        private Dictionary<string, Indexes> _indexLookup = new Dictionary<string, Indexes>();

        /// <summary>
        /// Initializes a new instance of the <see cref="PoolAudio"/> component class.
        /// </summary>
        /// <param name="controlJoinId">The SmartObjectId at which to create the component.</param>
        /// <param name="itemCount">The number of items.</param>
        private void Initialize(uint controlJoinId, uint? itemCount)
        {
            ControlJoinId = controlJoinId; 
 
            _devices = new List<BasicTriListWithSmartObject>(); 
 
            ComponentMediator.ConfigureBooleanEvent(controlJoinId, Joins.Booleans.BleachersOffButton_PressEvent, onBleachersOffButton_Press);
            ComponentMediator.ConfigureBooleanEvent(controlJoinId, Joins.Booleans.BleachersOnButton_PressEvent, onBleachersOnButton_Press);
            ComponentMediator.ConfigureBooleanEvent(controlJoinId, Joins.Booleans.PerimeterOffButton_PressEvent, onPerimeterOffButton_Press);
            ComponentMediator.ConfigureBooleanEvent(controlJoinId, Joins.Booleans.PerimeterOnButton_PressEvent, onPerimeterOnButton_Press);
            Header = new SLRCUser.PoolAudio.Header(ComponentMediator, 2);
            OfficeWidgetList = new SLRCUser.PoolAudio.OfficeWidgetList.OfficeWidgetList(ComponentMediator, 4);
            BuildingMute = new SLRCUser.PoolAudio.BuildingMute(ComponentMediator, 7);
            BuildingProgramWidget = new SLRCUser.PoolAudio.BuildingProgramWidget(ComponentMediator, 8);
            BoothWidgetList = new SLRCUser.PoolAudio.BoothWidgetList.BoothWidgetList(ComponentMediator, 9);
        }

        public void AddDevice(BasicTriListWithSmartObject device)
        {
            Devices.Add(device);
            ComponentMediator.HookSmartObjectEvents(device.SmartObjects[ControlJoinId]);

            ((SLRCUser.PoolAudio.Header)Header).AddDevice(device);

            ((SLRCUser.PoolAudio.OfficeWidgetList.OfficeWidgetList)OfficeWidgetList).AddDevice(device);

            ((SLRCUser.PoolAudio.BuildingMute)BuildingMute).AddDevice(device);

            ((SLRCUser.PoolAudio.BuildingProgramWidget)BuildingProgramWidget).AddDevice(device);

            ((SLRCUser.PoolAudio.BoothWidgetList.BoothWidgetList)BoothWidgetList).AddDevice(device);
        }

        public void RemoveDevice(BasicTriListWithSmartObject device)
        {
            Devices.Remove(device);
            ComponentMediator.UnHookSmartObjectEvents(device.SmartObjects[ControlJoinId]);

            ((SLRCUser.PoolAudio.Header)Header).RemoveDevice(device);

            ((SLRCUser.PoolAudio.OfficeWidgetList.OfficeWidgetList)OfficeWidgetList).RemoveDevice(device);

            ((SLRCUser.PoolAudio.BuildingMute)BuildingMute).RemoveDevice(device);

            ((SLRCUser.PoolAudio.BuildingProgramWidget)BuildingProgramWidget).RemoveDevice(device);

            ((SLRCUser.PoolAudio.BoothWidgetList.BoothWidgetList)BoothWidgetList).RemoveDevice(device);
        }

        #endregion

        #region CH5 Contract

        /// <inheritdoc/>
        public event EventHandler<UIEventArgs> BleachersOffButton_PressEvent;
        private void onBleachersOffButton_Press(SmartObjectEventArgs eventArgs)
        {
            EventHandler<UIEventArgs> handler = BleachersOffButton_PressEvent;
            if (handler != null)
                handler(this, UIEventArgs.CreateEventArgs(eventArgs));
        }

        /// <inheritdoc/>
        public event EventHandler<UIEventArgs> BleachersOnButton_PressEvent;
        private void onBleachersOnButton_Press(SmartObjectEventArgs eventArgs)
        {
            EventHandler<UIEventArgs> handler = BleachersOnButton_PressEvent;
            if (handler != null)
                handler(this, UIEventArgs.CreateEventArgs(eventArgs));
        }

        /// <inheritdoc/>
        public event EventHandler<UIEventArgs> PerimeterOffButton_PressEvent;
        private void onPerimeterOffButton_Press(SmartObjectEventArgs eventArgs)
        {
            EventHandler<UIEventArgs> handler = PerimeterOffButton_PressEvent;
            if (handler != null)
                handler(this, UIEventArgs.CreateEventArgs(eventArgs));
        }

        /// <inheritdoc/>
        public event EventHandler<UIEventArgs> PerimeterOnButton_PressEvent;
        private void onPerimeterOnButton_Press(SmartObjectEventArgs eventArgs)
        {
            EventHandler<UIEventArgs> handler = PerimeterOnButton_PressEvent;
            if (handler != null)
                handler(this, UIEventArgs.CreateEventArgs(eventArgs));
        }

        /// <inheritdoc/>
        public void BleachersOffButton_Selected(PoolAudioBoolInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].BooleanInput[Joins.Booleans.BleachersOffButton_SelectedState], this);
            }
        }

        /// <inheritdoc/>
        public void BleachersOffButton_Selected(bool digital)
        {
            BleachersOffButton_Selected((sig, component) => sig.BoolValue = digital);
        }
        /// <inheritdoc/>
        public void BleachersOnButton_Selected(PoolAudioBoolInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].BooleanInput[Joins.Booleans.BleachersOnButton_SelectedState], this);
            }
        }

        /// <inheritdoc/>
        public void BleachersOnButton_Selected(bool digital)
        {
            BleachersOnButton_Selected((sig, component) => sig.BoolValue = digital);
        }
        /// <inheritdoc/>
        public void PerimeterOffButton_Selected(PoolAudioBoolInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].BooleanInput[Joins.Booleans.PerimeterOffButton_SelectedState], this);
            }
        }

        /// <inheritdoc/>
        public void PerimeterOffButton_Selected(bool digital)
        {
            PerimeterOffButton_Selected((sig, component) => sig.BoolValue = digital);
        }
        /// <inheritdoc/>
        public void PerimeterOnButton_Selected(PoolAudioBoolInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].BooleanInput[Joins.Booleans.PerimeterOnButton_SelectedState], this);
            }
        }

        /// <inheritdoc/>
        public void PerimeterOnButton_Selected(bool digital)
        {
            PerimeterOnButton_Selected((sig, component) => sig.BoolValue = digital);
        }
        /// <inheritdoc/>
        public void PoolAudio_VisibilityJoin(PoolAudioBoolInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].BooleanInput[Joins.Booleans.PoolAudio_VisibilityJoinState], this);
            }
        }

        /// <inheritdoc/>
        public void PoolAudio_VisibilityJoin(bool digital)
        {
            PoolAudio_VisibilityJoin((sig, component) => sig.BoolValue = digital);
        }

        /// <summary>
        /// ComplexComponent Header
        /// </summary>
        public SLRCUser.PoolAudio.IHeader Header { get; private set; }

        /// <summary>
        /// ComplexComponent OfficeWidgetList
        /// </summary>
        public SLRCUser.PoolAudio.OfficeWidgetList.IOfficeWidgetList OfficeWidgetList { get; private set; }

        /// <summary>
        /// ComplexComponent BuildingMute
        /// </summary>
        public SLRCUser.PoolAudio.IBuildingMute BuildingMute { get; private set; }

        /// <summary>
        /// ComplexComponent BuildingProgramWidget
        /// </summary>
        public SLRCUser.PoolAudio.IBuildingProgramWidget BuildingProgramWidget { get; private set; }

        /// <summary>
        /// ComplexComponent BoothWidgetList
        /// </summary>
        public SLRCUser.PoolAudio.BoothWidgetList.IBoothWidgetList BoothWidgetList { get; private set; }

        #endregion

        #region Overrides

        public override int GetHashCode()
        {
            return (int)ControlJoinId;
        }

        public override string ToString()
        {
            return string.Format("Contract: {0} Component: {1} HashCode: {2} {3}", "PoolAudio", GetType().Name, GetHashCode(), UserObject != null ? "UserObject: " + UserObject : null);
        }

        #endregion

        #region IDisposable

        public bool IsDisposed { get; set; }

        public void Dispose()
        {
            if (IsDisposed)
                return;

            IsDisposed = true;

            BleachersOffButton_PressEvent = null;
            BleachersOnButton_PressEvent = null;
            PerimeterOffButton_PressEvent = null;
            PerimeterOnButton_PressEvent = null;
        }

        #endregion
    }
}
