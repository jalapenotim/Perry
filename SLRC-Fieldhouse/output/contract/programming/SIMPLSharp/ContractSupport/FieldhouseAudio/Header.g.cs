//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by CrestronConstruct.
//     AppHost:     2.601.10.0
//     UI Plugin:   1.4201.17.0
//
//     Project:     SLRC-Fieldhouse
//     Version:     1.0.0.0
//     Sdk:         CH5:2.16.0
//     Strategy:    Modern
//     IndexOnly:   False
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq;
using Crestron.SimplSharp;
using Crestron.SimplSharpPro;
using Crestron.SimplSharpPro.DeviceSupport;
using SLRCFieldhouse;

namespace SLRCFieldhouse.FieldhouseAudio
{

    /// <summary>
    /// Header
    /// </summary>
    public partial interface IHeader 
    {
        object UserObject { get; set; }

        /// <summary>
        /// Event FieldhouseAudio.Header.Lock Button.Press (from panel to Control System)
        /// </summary>
        event EventHandler<UIEventArgs> LockButton_PressEvent;

        /// <summary>
        /// Event FieldhouseAudio.Header.Main Page Button.Press (from panel to Control System)
        /// </summary>
        event EventHandler<UIEventArgs> MainPageButton_PressEvent;

        /// <summary>
        /// FieldhouseAudio.Header.Main Page Button.Visibility Feedback
        /// </summary>
        /// <param name="callback">The bool delegate to update the panel.</param>
        void MainPageButton_Visibility_fb(HeaderBoolInputSigDelegate callback);

        /// <summary>
        /// FieldhouseAudio.Header.Main Page Button.Visibility Feedback
        /// </summary>
        /// <param name="digital">The bool to update the panel.</param>
        void MainPageButton_Visibility_fb(bool digital);

        /// <summary>
        /// FieldhouseAudio.Header.Page Name Text.Indirect Rich Text Feedback
        /// </summary>
        /// <param name="callback">The <see cref="string"/> delegate to update the panel.</param>
        void PageNameText_IndirectRichText(HeaderStringInputSigDelegate callback);

        /// <summary>
        /// FieldhouseAudio.Header.Page Name Text.Indirect Rich Text Feedback
        /// </summary>
        /// <param name="serial">The <see cref="string"/> to update the panel.</param>
        void PageNameText_IndirectRichText(string serial);
    }

    /// <summary>
    /// Digital callback used in feedback events.
    /// </summary>
    /// <param name="boolInputSig">The <see cref="BoolInputSig"/> joinInfo data.</param>
    /// <param name="header">The <see cref="IHeader"/> on which to apply the feedback.</param>
    public delegate void HeaderBoolInputSigDelegate(BoolInputSig boolInputSig, IHeader header);
    /// <summary>
    /// Digital callback used in feedback events.
    /// </summary>
    /// <param name="stringInputSig">The <see cref="StringInputSig"/> joinInfo data.</param>
    /// <param name="header">The <see cref="IHeader"/> on which to apply the feedback.</param>
    public delegate void HeaderStringInputSigDelegate(StringInputSig stringInputSig, IHeader header);

    /// <summary>
    /// Header
    /// </summary>
    internal partial class Header : IHeader, IDisposable
    {
        #region Standard CH5 Component members

        private ComponentMediator ComponentMediator { get; set; }

        public object UserObject { get; set; }

        /// <summary>
        /// Gets the ControlJoinId a.k.a. SmartObjectId.  This Id identifies the extender symbol.
        /// </summary>
        public uint ControlJoinId { get; private set; }

        private IList<BasicTriListWithSmartObject> _devices;

        /// <summary>
        /// Gets the list of devices.
        /// </summary>
        public IList<BasicTriListWithSmartObject> Devices { get { return _devices; } }

        #endregion

        #region Joins

        private static class Joins
        {
            /// <summary>
            /// Digital signals,
            /// </summary>
            internal static class Booleans
            {
                /// <summary>
                /// Output or Event digital joinInfo from panel to Control System: FieldhouseAudio.Header.LockButton.Press
                /// FieldhouseAudio.Header.Lock Button.Press
                /// </summary>
                public const uint LockButton_PressEvent = 2;

                /// <summary>
                /// Output or Event digital joinInfo from panel to Control System: FieldhouseAudio.Header.MainPageButton.Press
                /// FieldhouseAudio.Header.Main Page Button.Press
                /// </summary>
                public const uint MainPageButton_PressEvent = 3;


                /// <summary>
                /// Input or Feedback digital joinInfo from Control System to panel: FieldhouseAudio.Header.MainPageButton.Visibility_fb
                /// FieldhouseAudio.Header.Main Page Button.Visibility
                /// </summary>
                public const uint MainPageButton_Visibility_fbState = 1;

            }
            /// <summary>
            /// Serial signals.
            /// </summary>
            internal static class Strings
            {

                /// <summary>
                /// Input or Feedback serial joinInfo from Control System to panel: FieldhouseAudio.Header.PageNameText.IndirectRichText
                /// FieldhouseAudio.Header.Page Name Text.Indirect Rich Text
                /// </summary>
                public const uint PageNameText_IndirectRichTextState = 1;
            }
        }

        #endregion

        #region Construction and Initialization

        /// <summary>
        /// Initializes a new instance of the <see cref="Header"/> component class.
        /// </summary>
        /// <param name="componentMediator">The <see cref="ComponentMediator"/> used to instantiate the component.</param>
        /// <param name="controlJoinId">The SmartObjectId at which to create the component.</param>
        /// <param name="itemCount">The number of items.</param>
        internal Header(ComponentMediator componentMediator, uint controlJoinId, uint? itemCount)
        {
            ComponentMediator = componentMediator;
            Initialize(controlJoinId, itemCount);
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="Header"/> component class.
        /// </summary>
        /// <param name="componentMediator">The <see cref="ComponentMediator"/> used to instantiate the component.</param>
        /// <param name="controlJoinId">The SmartObjectId at which to create the component.</param>
        internal Header(ComponentMediator componentMediator, uint controlJoinId) : this(componentMediator, controlJoinId, null)
        {
        }

        /// <summary>
        /// Initializes a new instance with default itemCount.
        /// </summary>
        /// <param name="controlJoinId">The SmartObjectId at which to create the component.</param>
        private void Initialize(uint controlJoinId)
        {
            Initialize(controlJoinId, null);
        }

        private Dictionary<string, Indexes> _indexLookup = new Dictionary<string, Indexes>();

        /// <summary>
        /// Initializes a new instance of the <see cref="Header"/> component class.
        /// </summary>
        /// <param name="controlJoinId">The SmartObjectId at which to create the component.</param>
        /// <param name="itemCount">The number of items.</param>
        private void Initialize(uint controlJoinId, uint? itemCount)
        {
            ControlJoinId = controlJoinId; 
 
            _devices = new List<BasicTriListWithSmartObject>(); 
 
            ComponentMediator.ConfigureBooleanEvent(controlJoinId, Joins.Booleans.LockButton_PressEvent, onLockButton_Press);
            ComponentMediator.ConfigureBooleanEvent(controlJoinId, Joins.Booleans.MainPageButton_PressEvent, onMainPageButton_Press);
        }

        public void AddDevice(BasicTriListWithSmartObject device)
        {
            Devices.Add(device);
            ComponentMediator.HookSmartObjectEvents(device.SmartObjects[ControlJoinId]);
        }

        public void RemoveDevice(BasicTriListWithSmartObject device)
        {
            Devices.Remove(device);
            ComponentMediator.UnHookSmartObjectEvents(device.SmartObjects[ControlJoinId]);
        }

        #endregion

        #region CH5 Contract

        /// <inheritdoc/>
        public event EventHandler<UIEventArgs> LockButton_PressEvent;
        private void onLockButton_Press(SmartObjectEventArgs eventArgs)
        {
            EventHandler<UIEventArgs> handler = LockButton_PressEvent;
            if (handler != null)
                handler(this, UIEventArgs.CreateEventArgs(eventArgs));
        }

        /// <inheritdoc/>
        public event EventHandler<UIEventArgs> MainPageButton_PressEvent;
        private void onMainPageButton_Press(SmartObjectEventArgs eventArgs)
        {
            EventHandler<UIEventArgs> handler = MainPageButton_PressEvent;
            if (handler != null)
                handler(this, UIEventArgs.CreateEventArgs(eventArgs));
        }

        /// <inheritdoc/>
        public void MainPageButton_Visibility_fb(HeaderBoolInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].BooleanInput[Joins.Booleans.MainPageButton_Visibility_fbState], this);
            }
        }

        /// <inheritdoc/>
        public void MainPageButton_Visibility_fb(bool digital)
        {
            MainPageButton_Visibility_fb((sig, component) => sig.BoolValue = digital);
        }


        /// <inheritdoc/>
        public void PageNameText_IndirectRichText(HeaderStringInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].StringInput[Joins.Strings.PageNameText_IndirectRichTextState], this);
            }
        }

        /// <inheritdoc/>
        public void PageNameText_IndirectRichText(string serial)
        {
            PageNameText_IndirectRichText((sig, component) => sig.StringValue = serial);
        }

        #endregion

        #region Overrides

        public override int GetHashCode()
        {
            return (int)ControlJoinId;
        }

        public override string ToString()
        {
            return string.Format("Contract: {0} Component: {1} HashCode: {2} {3}", "Header", GetType().Name, GetHashCode(), UserObject != null ? "UserObject: " + UserObject : null);
        }

        #endregion

        #region IDisposable

        public bool IsDisposed { get; set; }

        public void Dispose()
        {
            if (IsDisposed)
                return;

            IsDisposed = true;

            LockButton_PressEvent = null;
            MainPageButton_PressEvent = null;
        }

        #endregion
    }
}
