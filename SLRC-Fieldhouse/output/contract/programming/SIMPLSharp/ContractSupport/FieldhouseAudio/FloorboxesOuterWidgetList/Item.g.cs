//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by CrestronConstruct.
//     AppHost:     2.601.10.0
//     UI Plugin:   1.4201.17.0
//
//     Project:     SLRC-Fieldhouse
//     Version:     1.0.0.0
//     Sdk:         CH5:2.16.0
//     Strategy:    Modern
//     IndexOnly:   False
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq;
using Crestron.SimplSharp;
using Crestron.SimplSharpPro;
using Crestron.SimplSharpPro.DeviceSupport;
using SLRCFieldhouse;

namespace SLRCFieldhouse.FieldhouseAudio.FloorboxesOuterWidgetList
{

    /// <summary>
    /// Allow events by list item and states (feedbacks) to be set by item index.
    /// </summary>
    public partial interface IItemByItem
    {

        /// <summary>
        /// Event FieldhouseAudio.FloorboxesOuterWidgetList.Items[{0}].Zone Volume Down Button.Press (from panel to Control System)
        /// </summary>
        event EventHandler<ItemEventArgs> ZoneVolumeDownButton_PressEvent;

        /// <summary>
        /// Event FieldhouseAudio.FloorboxesOuterWidgetList.Items[{0}].Zone Volume Mute Button.Press (from panel to Control System)
        /// </summary>
        event EventHandler<ItemEventArgs> ZoneVolumeMuteButton_PressEvent;

        /// <summary>
        /// Event FieldhouseAudio.FloorboxesOuterWidgetList.Items[{0}].Zone Volume Up Button.Press (from panel to Control System)
        /// </summary>
        event EventHandler<ItemEventArgs> ZoneVolumeUpButton_PressEvent;

        /// <summary>
        /// FieldhouseAudio.FloorboxesOuterWidgetList.Items[{0}].Zone Volume Mute Button.Selected Feedback
        /// </summary>
        /// <param name="itemIndex">Index of the Widget List (0 based).</param>
        /// <param name="callback">The bool delegate to update the panel.</param>
        void ZoneVolumeMuteButton_Selected(ushort itemIndex, ItemBoolInputSigDelegate callback);

        /// <summary>
        /// FieldhouseAudio.FloorboxesOuterWidgetList.Items[{0}].Zone Volume Mute Button.Selected Feedback
        /// </summary>
        /// <param name="itemIndex">Index of the Widget List (0 based).</param>
        /// <param name="digital">The bool value to send to the panel.</param>
        void ZoneVolumeMuteButton_Selected(ushort itemIndex, bool digital);

        /// <summary>
        /// FieldhouseAudio.FloorboxesOuterWidgetList.Items[{0}].Zone Volume Gauge.Lower Touch fb Feedback
        /// </summary>
        /// <param name="itemIndex">Index of the Widget List (0 based).</param>
        /// <param name="callback">The ushort analog delegate to update the panel.</param>
        void ZoneVolumeGauge_LowerTouchfb(ushort itemIndex, ItemUShortInputSigDelegate callback);

        /// <summary>
        /// {joinInfo.Notes} Feedback
        /// </summary>
        /// <param name=""itemIndex"">Index of the Widget List (0 based).</param>
        /// <param name=""analog"">The ushort analog value to send to the panel.</param>
        void ZoneVolumeGauge_LowerTouchfb(ushort itemIndex, ushort analog);

        /// <summary>
        /// FieldhouseAudio.FloorboxesOuterWidgetList.Items[{0}].Zone Volume Gauge.Lower Touch fb Feedback
        /// </summary>
        /// <param name="itemIndex">Index of the Widget List (0 based).</param>
        /// <param name="analog">The short analog value to send to the panel.</param>
        void ZoneVolumeGauge_LowerTouchfb(ushort itemIndex, short analog);

        /// <summary>
        /// FieldhouseAudio.FloorboxesOuterWidgetList.Items[{0}].Zone Label.Indirect Rich Text Feedback
        /// </summary>
        /// <param name="itemIndex">Index of the Widget List (0 based).</param>
        /// <param name="callback">The <see cref="string"/> delegate to update the panel.</param>
        void ZoneLabel_IndirectRichText(ushort itemIndex, ItemStringInputSigDelegate callback);

        /// <summary>
        /// FieldhouseAudio.FloorboxesOuterWidgetList.Items[{0}].Zone Label.Indirect Rich Text Feedback
        /// </summary>
        /// <param name="itemIndex">Index of the Widget List (0 based).</param>
        /// <param name="serial">The <see cref="string"/> to update the panel.</param>
        void ZoneLabel_IndirectRichText(ushort itemIndex, string serial);

        /// <summary>
        /// FieldhouseAudio.FloorboxesOuterWidgetList.Items[{0}].Zone Volume Mute Button.Icon Feedback
        /// </summary>
        /// <param name="itemIndex">Index of the Widget List (0 based).</param>
        /// <param name="callback">The <see cref="string"/> delegate to update the panel.</param>
        void ZoneVolumeMuteButton_Icon(ushort itemIndex, ItemStringInputSigDelegate callback);

        /// <summary>
        /// FieldhouseAudio.FloorboxesOuterWidgetList.Items[{0}].Zone Volume Mute Button.Icon Feedback
        /// </summary>
        /// <param name="itemIndex">Index of the Widget List (0 based).</param>
        /// <param name="serial">The <see cref="string"/> to update the panel.</param>
        void ZoneVolumeMuteButton_Icon(ushort itemIndex, string serial);
    }


    /// <summary>
    /// Search List
    /// </summary>
    internal partial class Item
    {
        #region CH5 Contract
        /// <inheritdoc/>
        public event EventHandler<ItemEventArgs> ZoneVolumeDownButton_PressEvent;
        private void onZoneVolumeDownButton_Press(IndexedEventArgs eventArgs)
        {
            EventHandler<ItemEventArgs> handler = ZoneVolumeDownButton_PressEvent;
            if (handler != null)
                handler(this, new ItemEventArgs((SmartObjectEventArgs)eventArgs.SigArgs, eventArgs.ItemIndex));
        }

        /// <inheritdoc/>
        public event EventHandler<ItemEventArgs> ZoneVolumeMuteButton_PressEvent;
        private void onZoneVolumeMuteButton_Press(IndexedEventArgs eventArgs)
        {
            EventHandler<ItemEventArgs> handler = ZoneVolumeMuteButton_PressEvent;
            if (handler != null)
                handler(this, new ItemEventArgs((SmartObjectEventArgs)eventArgs.SigArgs, eventArgs.ItemIndex));
        }

        /// <inheritdoc/>
        public event EventHandler<ItemEventArgs> ZoneVolumeUpButton_PressEvent;
        private void onZoneVolumeUpButton_Press(IndexedEventArgs eventArgs)
        {
            EventHandler<ItemEventArgs> handler = ZoneVolumeUpButton_PressEvent;
            if (handler != null)
                handler(this, new ItemEventArgs((SmartObjectEventArgs)eventArgs.SigArgs, eventArgs.ItemIndex));
        }

        /// <summary>
        /// Boolean feedback FieldhouseAudio.FloorboxesOuterWidgetList.Items[{0}].Zone Volume Mute Button.Selected (from Control System to Panel)
        /// </summary>
        public void ZoneVolumeMuteButton_Selected(ushort itemIndex, ItemBoolInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId + itemIndex].BooleanInput[Joins.Booleans.ZoneVolumeMuteButton_SelectedState], this);
            }
        }

        /// <summary>
        /// Boolean feedback FieldhouseAudio.FloorboxesOuterWidgetList.Items[{0}].Zone Volume Mute Button.Selected (from Control System to Panel)
        /// </summary>
        public void ZoneVolumeMuteButton_Selected(ushort itemIndex, bool digital)
        {
            ZoneVolumeMuteButton_Selected(itemIndex, (sig, component) => sig.BoolValue = digital);
        }

        /// <summary>
        /// Numeric feedback FieldhouseAudio.FloorboxesOuterWidgetList.Items[{0}].Zone Volume Gauge.Lower Touch fb
        /// </summary>
        /// <param name="itemIndex">Index of the Widget List (0 based).</param>
        /// <param name="callback">The ushort delegate to update the panel.</param>
        public void ZoneVolumeGauge_LowerTouchfb(ushort itemIndex, ItemUShortInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId + itemIndex].UShortInput[Joins.Numerics.ZoneVolumeGauge_LowerTouchfbState], this);
            }
        }

        /// <summary>
        /// Numeric feedback FieldhouseAudio.FloorboxesOuterWidgetList.Items[{0}].Zone Volume Gauge.Lower Touch fb
        /// </summary>
        /// <param name="itemIndex">Index of the Widget List (0 based).</param>
        /// <param name="analog">The ushort analog to update the panel.</param>
        public void ZoneVolumeGauge_LowerTouchfb(ushort itemIndex, ushort analog)
        {
            ZoneVolumeGauge_LowerTouchfb(itemIndex, (sig, component) => sig.UShortValue = analog);
        }

        /// <summary>
        /// Numeric feedback FieldhouseAudio.FloorboxesOuterWidgetList.Items[{0}].Zone Volume Gauge.Lower Touch fb
        /// </summary>
        /// <param name="itemIndex">Index of the Widget List (0 based).</param>
        /// <param name="analog">The short analog to update the panel.</param>
        public void ZoneVolumeGauge_LowerTouchfb(ushort itemIndex, short analog)
        {
            ZoneVolumeGauge_LowerTouchfb(itemIndex, (sig, component) => sig.ShortValue = analog);
        }

        /// <inheritdoc/>
        public void ZoneLabel_IndirectRichText(ushort itemIndex, ItemStringInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId + itemIndex].StringInput[Joins.Strings.ZoneLabel_IndirectRichTextState], this);
            }
        }

        /// <inheritdoc/>
        public void ZoneLabel_IndirectRichText(ushort itemIndex, string serial)
        {
            ZoneLabel_IndirectRichText(itemIndex, (sig, component) => sig.StringValue = serial);
        }
        /// <inheritdoc/>
        public void ZoneVolumeMuteButton_Icon(ushort itemIndex, ItemStringInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId + itemIndex].StringInput[Joins.Strings.ZoneVolumeMuteButton_IconState], this);
            }
        }

        /// <inheritdoc/>
        public void ZoneVolumeMuteButton_Icon(ushort itemIndex, string serial)
        {
            ZoneVolumeMuteButton_Icon(itemIndex, (sig, component) => sig.StringValue = serial);
        }

        #endregion
    }

    /// <summary>
    /// Items[{0}]
    /// </summary>
    public partial interface IItem : IItemByItem
    {
        object UserObject { get; set; }
    }

    /// <summary>
    /// Digital callback used in feedback events.
    /// </summary>
    /// <param name="boolInputSig">The <see cref="BoolInputSig"/> joinInfo data.</param>
    /// <param name="item">The <see cref="IItem"/> on which to apply the feedback.</param>
    public delegate void ItemBoolInputSigDelegate(BoolInputSig boolInputSig, IItem item);
    /// <summary>
    /// Digital callback used in feedback events.
    /// </summary>
    /// <param name="uShortInputSig">The <see cref="UShortInputSig"/> joinInfo data.</param>
    /// <param name="item">The <see cref="IItem"/> on which to apply the feedback.</param>
    public delegate void ItemUShortInputSigDelegate(UShortInputSig uShortInputSig, IItem item);
    /// <summary>
    /// Digital callback used in feedback events.
    /// </summary>
    /// <param name="stringInputSig">The <see cref="StringInputSig"/> joinInfo data.</param>
    /// <param name="item">The <see cref="IItem"/> on which to apply the feedback.</param>
    public delegate void ItemStringInputSigDelegate(StringInputSig stringInputSig, IItem item);

    /// <summary>
    /// Items[{0}]
    /// </summary>
    internal partial class Item : IItem, IDisposable
    {
        #region Standard CH5 Component members

        private ComponentMediator ComponentMediator { get; set; }

        public object UserObject { get; set; }

        /// <summary>
        /// Gets the ControlJoinId a.k.a. SmartObjectId.  This Id identifies the extender symbol.
        /// </summary>
        public uint ControlJoinId { get; private set; }

        private IList<BasicTriListWithSmartObject> _devices;

        /// <summary>
        /// Gets the list of devices.
        /// </summary>
        public IList<BasicTriListWithSmartObject> Devices { get { return _devices; } }

        #endregion
        /// <summary>
        /// Number of Items.
        /// </summary>
        public uint ItemCount { get; private set; }

        #region Joins

        private static class Joins
        {
            /// <summary>
            /// Digital signals,
            /// </summary>
            internal static class Booleans
            {
                /// <summary>
                /// Output or Event digital joinInfo from panel to Control System: FieldhouseAudio.FloorboxesOuterWidgetList.Items[{0}].FieldhousePoolAudioControlsCONTRACT.ZoneVolumeDownButton.Press
                /// FieldhouseAudio.FloorboxesOuterWidgetList.Items[{0}].Zone Volume Down Button.Press
                /// </summary>
                public const uint ZoneVolumeDownButton_PressEvent = 1201;

                /// <summary>
                /// Output or Event digital joinInfo from panel to Control System: FieldhouseAudio.FloorboxesOuterWidgetList.Items[{0}].FieldhousePoolAudioControlsCONTRACT.ZoneVolumeMuteButton.Press
                /// FieldhouseAudio.FloorboxesOuterWidgetList.Items[{0}].Zone Volume Mute Button.Press
                /// </summary>
                public const uint ZoneVolumeMuteButton_PressEvent = 1202;

                /// <summary>
                /// Output or Event digital joinInfo from panel to Control System: FieldhouseAudio.FloorboxesOuterWidgetList.Items[{0}].FieldhousePoolAudioControlsCONTRACT.ZoneVolumeUpButton.Press
                /// FieldhouseAudio.FloorboxesOuterWidgetList.Items[{0}].Zone Volume Up Button.Press
                /// </summary>
                public const uint ZoneVolumeUpButton_PressEvent = 1203;


                /// <summary>
                /// Input or Feedback digital joinInfo from Control System to panel: FieldhouseAudio.FloorboxesOuterWidgetList.Items[{0}].FieldhousePoolAudioControlsCONTRACT.ZoneVolumeMuteButton.Selected
                /// FieldhouseAudio.FloorboxesOuterWidgetList.Items[{0}].Zone Volume Mute Button.Selected
                /// </summary>
                public const uint ZoneVolumeMuteButton_SelectedState = 1201;

            }
            /// <summary>
            /// Analog signals.
            /// </summary>
            internal static class Numerics
            {
                /// <summary>
                /// Input or Feedback analog joinInfo from Control System to panel: FieldhouseAudio.FloorboxesOuterWidgetList.Items[{0}].FieldhousePoolAudioControlsCONTRACT.ZoneVolumeGauge.LowerTouchfb
                /// FieldhouseAudio.FloorboxesOuterWidgetList.Items[{0}].Zone Volume Gauge.Lower Touch fb
                /// </summary>
                public const uint ZoneVolumeGauge_LowerTouchfbState = 1801;

            }
            /// <summary>
            /// Serial signals.
            /// </summary>
            internal static class Strings
            {
                /// <summary>
                /// Input or Feedback serial joinInfo from Control System to panel: FieldhouseAudio.FloorboxesOuterWidgetList.Items[{0}].FieldhousePoolAudioControlsCONTRACT.ZoneLabel.IndirectRichText
                /// FieldhouseAudio.FloorboxesOuterWidgetList.Items[{0}].Zone Label.Indirect Rich Text
                /// </summary>
                public const uint ZoneLabel_IndirectRichTextState = 1;
                /// <summary>
                /// Input or Feedback serial joinInfo from Control System to panel: FieldhouseAudio.FloorboxesOuterWidgetList.Items[{0}].FieldhousePoolAudioControlsCONTRACT.ZoneVolumeMuteButton.Icon
                /// FieldhouseAudio.FloorboxesOuterWidgetList.Items[{0}].Zone Volume Mute Button.Icon
                /// </summary>
                public const uint ZoneVolumeMuteButton_IconState = 2;
            }
        }

        #endregion

        #region Construction and Initialization

        /// <summary>
        /// Initializes a new instance of the <see cref="Item"/> component class.
        /// </summary>
        /// <param name="componentMediator">The <see cref="ComponentMediator"/> used to instantiate the component.</param>
        /// <param name="controlJoinId">The SmartObjectId at which to create the component.</param>
        /// <param name="itemCount">The number of items.</param>
        internal Item(ComponentMediator componentMediator, uint controlJoinId, uint? itemCount)
        {
            ComponentMediator = componentMediator;
            Initialize(controlJoinId, itemCount);
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="Item"/> component class.
        /// </summary>
        /// <param name="componentMediator">The <see cref="ComponentMediator"/> used to instantiate the component.</param>
        /// <param name="controlJoinId">The SmartObjectId at which to create the component.</param>
        internal Item(ComponentMediator componentMediator, uint controlJoinId) : this(componentMediator, controlJoinId, null)
        {
        }

        /// <summary>
        /// Initializes a new instance with default itemCount.
        /// </summary>
        /// <param name="controlJoinId">The SmartObjectId at which to create the component.</param>
        private void Initialize(uint controlJoinId)
        {
            Initialize(controlJoinId, null);
        }

        private Dictionary<string, Indexes> _indexLookup = new Dictionary<string, Indexes>();

        /// <summary>
        /// Initializes a new instance of the <see cref="Item"/> component class.
        /// </summary>
        /// <param name="controlJoinId">The SmartObjectId at which to create the component.</param>
        /// <param name="itemCount">The number of items.</param>
        private void Initialize(uint controlJoinId, uint? itemCount)
        {
            ControlJoinId = controlJoinId; 
 
            _devices = new List<BasicTriListWithSmartObject>(); 
 
            ItemCount = itemCount.Value;
            for (uint i = 0; i < itemCount.Value; i++)
            {
                ComponentMediator.ConfigureBooleanItemEvent(controlJoinId + i, Joins.Booleans.ZoneVolumeDownButton_PressEvent, GetIndexes, onZoneVolumeDownButton_Press);
                ComponentMediator.ConfigureBooleanItemEvent(controlJoinId + i, Joins.Booleans.ZoneVolumeMuteButton_PressEvent, GetIndexes, onZoneVolumeMuteButton_Press);
                ComponentMediator.ConfigureBooleanItemEvent(controlJoinId + i, Joins.Booleans.ZoneVolumeUpButton_PressEvent, GetIndexes, onZoneVolumeUpButton_Press);
            }
        }

        /// <summary>
        /// Get the offset when using indexed complex components.
        /// </summary>
        /// <param name="controlJoinId">The SmartObjectId of the component.</param>
        /// <param name="join">The join offset.</param>
        /// <param name="eSigType">The join data type.</param>
        private Indexes GetIndexes(uint controlJoinId, uint join, eSigType eSigType)
        {
            return new Indexes((ushort)(controlJoinId - ControlJoinId), 0, false);
        }

        public void AddDevice(BasicTriListWithSmartObject device)
        {
            Devices.Add(device);
        }

        public void RemoveDevice(BasicTriListWithSmartObject device)
        {
            Devices.Remove(device);
        }

        #endregion

        #region CH5 Contract




        #endregion

        #region Overrides

        public override int GetHashCode()
        {
            return (int)ControlJoinId;
        }

        public override string ToString()
        {
            return string.Format("Contract: {0} Component: {1} HashCode: {2} {3}", "Item", GetType().Name, GetHashCode(), UserObject != null ? "UserObject: " + UserObject : null);
        }

        #endregion

        #region IDisposable

        public bool IsDisposed { get; set; }

        public void Dispose()
        {
            if (IsDisposed)
                return;

            IsDisposed = true;

            ZoneVolumeDownButton_PressEvent = null;
            ZoneVolumeMuteButton_PressEvent = null;
            ZoneVolumeUpButton_PressEvent = null;
        }

        #endregion
    }
}
