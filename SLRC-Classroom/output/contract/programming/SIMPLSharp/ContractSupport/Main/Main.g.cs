//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by CrestronConstruct.
//     AppHost:     2.601.10.0
//     UI Plugin:   1.4201.17.0
//
//     Project:     SLRC-Classroom
//     Version:     1.0.0.0
//     Sdk:         CH5:2.16.0
//     Strategy:    Modern
//     IndexOnly:   False
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq;
using Crestron.SimplSharp;
using Crestron.SimplSharpPro;
using Crestron.SimplSharpPro.DeviceSupport;
using SLRCClassroom;

namespace SLRCClassroom.Main
{

    /// <summary>
    /// Main
    /// </summary>
    public partial interface IMain 
    {
        object UserObject { get; set; }

        /// <summary>
        /// Event AV Mute Button.Press (from panel to Control System)
        /// </summary>
        event EventHandler<UIEventArgs> AVMuteButton_PressEvent;

        /// <summary>
        /// Event Combine Button.Press (from panel to Control System)
        /// </summary>
        event EventHandler<UIEventArgs> CombineButton_PressEvent;

        /// <summary>
        /// Event Display Off Button.Press (from panel to Control System)
        /// </summary>
        event EventHandler<UIEventArgs> DisplayOffButton_PressEvent;

        /// <summary>
        /// Event Display On Button.Press (from panel to Control System)
        /// </summary>
        event EventHandler<UIEventArgs> DisplayOnButton_PressEvent;

        /// <summary>
        /// Event Input 1 Button.Press (from panel to Control System)
        /// </summary>
        event EventHandler<UIEventArgs> Input1Button_PressEvent;

        /// <summary>
        /// Event Input 2 Button.Press (from panel to Control System)
        /// </summary>
        event EventHandler<UIEventArgs> Input2Button_PressEvent;

        /// <summary>
        /// Event Input 3 Button.Press (from panel to Control System)
        /// </summary>
        event EventHandler<UIEventArgs> Input3Button_PressEvent;

        /// <summary>
        /// Event Input 4 Button.Press (from panel to Control System)
        /// </summary>
        event EventHandler<UIEventArgs> Input4Button_PressEvent;

        /// <summary>
        /// Event Microphone Button.Press (from panel to Control System)
        /// </summary>
        event EventHandler<UIEventArgs> MicrophoneButton_PressEvent;

        /// <summary>
        /// Event Separate Button.Press (from panel to Control System)
        /// </summary>
        event EventHandler<UIEventArgs> SeparateButton_PressEvent;

        /// <summary>
        /// Event Tools Button.Press (from panel to Control System)
        /// </summary>
        event EventHandler<UIEventArgs> ToolsButton_PressEvent;

        /// <summary>
        /// Event Volume Down Button.Press (from panel to Control System)
        /// </summary>
        event EventHandler<UIEventArgs> VolumeDownButton_PressEvent;

        /// <summary>
        /// Event Volume Mute Button.Press (from panel to Control System)
        /// </summary>
        event EventHandler<UIEventArgs> VolumeMuteButton_PressEvent;

        /// <summary>
        /// Event Volume Up Button.Press (from panel to Control System)
        /// </summary>
        event EventHandler<UIEventArgs> VolumeUpButton_PressEvent;

        /// <summary>
        /// AV Mute Button.Visibility Feedback
        /// </summary>
        /// <param name="callback">The bool delegate to update the panel.</param>
        void AVMuteButton_Visibility_fb(MainBoolInputSigDelegate callback);

        /// <summary>
        /// AV Mute Button.Visibility Feedback
        /// </summary>
        /// <param name="digital">The bool to update the panel.</param>
        void AVMuteButton_Visibility_fb(bool digital);

        /// <summary>
        /// Input 1 Button.Visibility Feedback
        /// </summary>
        /// <param name="callback">The bool delegate to update the panel.</param>
        void Input1Button_Visibility_fb(MainBoolInputSigDelegate callback);

        /// <summary>
        /// Input 1 Button.Visibility Feedback
        /// </summary>
        /// <param name="digital">The bool to update the panel.</param>
        void Input1Button_Visibility_fb(bool digital);

        /// <summary>
        /// Input 2 Button.Visibility Feedback
        /// </summary>
        /// <param name="callback">The bool delegate to update the panel.</param>
        void Input2Button_Visibility_fb(MainBoolInputSigDelegate callback);

        /// <summary>
        /// Input 2 Button.Visibility Feedback
        /// </summary>
        /// <param name="digital">The bool to update the panel.</param>
        void Input2Button_Visibility_fb(bool digital);

        /// <summary>
        /// Input 3 Button.Visibility Feedback
        /// </summary>
        /// <param name="callback">The bool delegate to update the panel.</param>
        void Input3Button_Visibility_fb(MainBoolInputSigDelegate callback);

        /// <summary>
        /// Input 3 Button.Visibility Feedback
        /// </summary>
        /// <param name="digital">The bool to update the panel.</param>
        void Input3Button_Visibility_fb(bool digital);

        /// <summary>
        /// Input 4 Button.Visibility Feedback
        /// </summary>
        /// <param name="callback">The bool delegate to update the panel.</param>
        void Input4Button_Visibility_fb(MainBoolInputSigDelegate callback);

        /// <summary>
        /// Input 4 Button.Visibility Feedback
        /// </summary>
        /// <param name="digital">The bool to update the panel.</param>
        void Input4Button_Visibility_fb(bool digital);

        /// <summary>
        /// Microphone Button.Visibility Feedback
        /// </summary>
        /// <param name="callback">The bool delegate to update the panel.</param>
        void MicrophoneButton_Visibility_fb(MainBoolInputSigDelegate callback);

        /// <summary>
        /// Microphone Button.Visibility Feedback
        /// </summary>
        /// <param name="digital">The bool to update the panel.</param>
        void MicrophoneButton_Visibility_fb(bool digital);

        /// <summary>
        /// Combine-Separate Popup.Visibility Feedback
        /// </summary>
        /// <param name="callback">The bool delegate to update the panel.</param>
        void CombineSeparatePopup_Visibility_fb(MainBoolInputSigDelegate callback);

        /// <summary>
        /// Combine-Separate Popup.Visibility Feedback
        /// </summary>
        /// <param name="digital">The bool to update the panel.</param>
        void CombineSeparatePopup_Visibility_fb(bool digital);

        /// <summary>
        /// Display Processing.Visibility Feedback
        /// </summary>
        /// <param name="callback">The bool delegate to update the panel.</param>
        void DisplayProcessing_Visibility_fb(MainBoolInputSigDelegate callback);

        /// <summary>
        /// Display Processing.Visibility Feedback
        /// </summary>
        /// <param name="digital">The bool to update the panel.</param>
        void DisplayProcessing_Visibility_fb(bool digital);

        /// <summary>
        /// Main.VisibilityJoin Feedback
        /// </summary>
        /// <param name="callback">The bool delegate to update the panel.</param>
        void Main_VisibilityJoin(MainBoolInputSigDelegate callback);

        /// <summary>
        /// Main.VisibilityJoin Feedback
        /// </summary>
        /// <param name="digital">The bool to update the panel.</param>
        void Main_VisibilityJoin(bool digital);

        /// <summary>
        /// AV Mute Button.Enable Feedback
        /// </summary>
        /// <param name="callback">The bool delegate to update the panel.</param>
        void AVMuteButton_Enable(MainBoolInputSigDelegate callback);

        /// <summary>
        /// AV Mute Button.Enable Feedback
        /// </summary>
        /// <param name="digital">The bool to update the panel.</param>
        void AVMuteButton_Enable(bool digital);

        /// <summary>
        /// Input 1 Button.Enable Feedback
        /// </summary>
        /// <param name="callback">The bool delegate to update the panel.</param>
        void Input1Button_Enable(MainBoolInputSigDelegate callback);

        /// <summary>
        /// Input 1 Button.Enable Feedback
        /// </summary>
        /// <param name="digital">The bool to update the panel.</param>
        void Input1Button_Enable(bool digital);

        /// <summary>
        /// Input 2 Button.Enable Feedback
        /// </summary>
        /// <param name="callback">The bool delegate to update the panel.</param>
        void Input2Button_Enable(MainBoolInputSigDelegate callback);

        /// <summary>
        /// Input 2 Button.Enable Feedback
        /// </summary>
        /// <param name="digital">The bool to update the panel.</param>
        void Input2Button_Enable(bool digital);

        /// <summary>
        /// Input 3 Button.Enable Feedback
        /// </summary>
        /// <param name="callback">The bool delegate to update the panel.</param>
        void Input3Button_Enable(MainBoolInputSigDelegate callback);

        /// <summary>
        /// Input 3 Button.Enable Feedback
        /// </summary>
        /// <param name="digital">The bool to update the panel.</param>
        void Input3Button_Enable(bool digital);

        /// <summary>
        /// Input 4 Button.Enable Feedback
        /// </summary>
        /// <param name="callback">The bool delegate to update the panel.</param>
        void Input4Button_Enable(MainBoolInputSigDelegate callback);

        /// <summary>
        /// Input 4 Button.Enable Feedback
        /// </summary>
        /// <param name="digital">The bool to update the panel.</param>
        void Input4Button_Enable(bool digital);

        /// <summary>
        /// Volume Down Button.Enable Feedback
        /// </summary>
        /// <param name="callback">The bool delegate to update the panel.</param>
        void VolumeDownButton_Enable(MainBoolInputSigDelegate callback);

        /// <summary>
        /// Volume Down Button.Enable Feedback
        /// </summary>
        /// <param name="digital">The bool to update the panel.</param>
        void VolumeDownButton_Enable(bool digital);

        /// <summary>
        /// Volume Mute Button.Enable Feedback
        /// </summary>
        /// <param name="callback">The bool delegate to update the panel.</param>
        void VolumeMuteButton_Enable(MainBoolInputSigDelegate callback);

        /// <summary>
        /// Volume Mute Button.Enable Feedback
        /// </summary>
        /// <param name="digital">The bool to update the panel.</param>
        void VolumeMuteButton_Enable(bool digital);

        /// <summary>
        /// Volume Up Button.Enable Feedback
        /// </summary>
        /// <param name="callback">The bool delegate to update the panel.</param>
        void VolumeUpButton_Enable(MainBoolInputSigDelegate callback);

        /// <summary>
        /// Volume Up Button.Enable Feedback
        /// </summary>
        /// <param name="digital">The bool to update the panel.</param>
        void VolumeUpButton_Enable(bool digital);

        /// <summary>
        /// AV Mute Button.Selected Feedback
        /// </summary>
        /// <param name="callback">The bool delegate to update the panel.</param>
        void AVMuteButton_Selected(MainBoolInputSigDelegate callback);

        /// <summary>
        /// AV Mute Button.Selected Feedback
        /// </summary>
        /// <param name="digital">The bool to update the panel.</param>
        void AVMuteButton_Selected(bool digital);

        /// <summary>
        /// Combine Button.Selected Feedback
        /// </summary>
        /// <param name="callback">The bool delegate to update the panel.</param>
        void CombineButton_Selected(MainBoolInputSigDelegate callback);

        /// <summary>
        /// Combine Button.Selected Feedback
        /// </summary>
        /// <param name="digital">The bool to update the panel.</param>
        void CombineButton_Selected(bool digital);

        /// <summary>
        /// Display Off Button.Selected Feedback
        /// </summary>
        /// <param name="callback">The bool delegate to update the panel.</param>
        void DisplayOffButton_Selected(MainBoolInputSigDelegate callback);

        /// <summary>
        /// Display Off Button.Selected Feedback
        /// </summary>
        /// <param name="digital">The bool to update the panel.</param>
        void DisplayOffButton_Selected(bool digital);

        /// <summary>
        /// Display On Button.Selected Feedback
        /// </summary>
        /// <param name="callback">The bool delegate to update the panel.</param>
        void DisplayOnButton_Selected(MainBoolInputSigDelegate callback);

        /// <summary>
        /// Display On Button.Selected Feedback
        /// </summary>
        /// <param name="digital">The bool to update the panel.</param>
        void DisplayOnButton_Selected(bool digital);

        /// <summary>
        /// Input 1 Button.Selected Feedback
        /// </summary>
        /// <param name="callback">The bool delegate to update the panel.</param>
        void Input1Button_Selected(MainBoolInputSigDelegate callback);

        /// <summary>
        /// Input 1 Button.Selected Feedback
        /// </summary>
        /// <param name="digital">The bool to update the panel.</param>
        void Input1Button_Selected(bool digital);

        /// <summary>
        /// Input 2 Button.Selected Feedback
        /// </summary>
        /// <param name="callback">The bool delegate to update the panel.</param>
        void Input2Button_Selected(MainBoolInputSigDelegate callback);

        /// <summary>
        /// Input 2 Button.Selected Feedback
        /// </summary>
        /// <param name="digital">The bool to update the panel.</param>
        void Input2Button_Selected(bool digital);

        /// <summary>
        /// Input 3 Button.Selected Feedback
        /// </summary>
        /// <param name="callback">The bool delegate to update the panel.</param>
        void Input3Button_Selected(MainBoolInputSigDelegate callback);

        /// <summary>
        /// Input 3 Button.Selected Feedback
        /// </summary>
        /// <param name="digital">The bool to update the panel.</param>
        void Input3Button_Selected(bool digital);

        /// <summary>
        /// Input 4 Button.Selected Feedback
        /// </summary>
        /// <param name="callback">The bool delegate to update the panel.</param>
        void Input4Button_Selected(MainBoolInputSigDelegate callback);

        /// <summary>
        /// Input 4 Button.Selected Feedback
        /// </summary>
        /// <param name="digital">The bool to update the panel.</param>
        void Input4Button_Selected(bool digital);

        /// <summary>
        /// Separate Button.Selected Feedback
        /// </summary>
        /// <param name="callback">The bool delegate to update the panel.</param>
        void SeparateButton_Selected(MainBoolInputSigDelegate callback);

        /// <summary>
        /// Separate Button.Selected Feedback
        /// </summary>
        /// <param name="digital">The bool to update the panel.</param>
        void SeparateButton_Selected(bool digital);

        /// <summary>
        /// Volume Mute Button.Selected Feedback
        /// </summary>
        /// <param name="callback">The bool delegate to update the panel.</param>
        void VolumeMuteButton_Selected(MainBoolInputSigDelegate callback);

        /// <summary>
        /// Volume Mute Button.Selected Feedback
        /// </summary>
        /// <param name="digital">The bool to update the panel.</param>
        void VolumeMuteButton_Selected(bool digital);

        /// <summary>
        /// Volume Gauge.Lower Touch fb Feedback
        /// </summary>
        /// <param name="callback">The ushort delegate to update the panel.</param>
        void VolumeGauge_LowerTouchfb(MainUShortInputSigDelegate callback);

        /// <summary>
        /// Volume Gauge.Lower Touch fb Feedback
        /// </summary>
        /// <param name="callback">The ushort analog to update the panel.</param>
        void VolumeGauge_LowerTouchfb(ushort analog);

        /// <summary>
        /// Volume Gauge.Lower Touch fb Feedback
        /// </summary>
        /// <param name="callback">The short analog to update the panel.</param>
        void VolumeGauge_LowerTouchfb(short analog);

        /// <summary>
        /// AV Mute Button.Indirect Rich Text Feedback
        /// </summary>
        /// <param name="callback">The <see cref="string"/> delegate to update the panel.</param>
        void AVMuteButton_IndirectRichText(MainStringInputSigDelegate callback);

        /// <summary>
        /// AV Mute Button.Indirect Rich Text Feedback
        /// </summary>
        /// <param name="serial">The <see cref="string"/> to update the panel.</param>
        void AVMuteButton_IndirectRichText(string serial);

        /// <summary>
        /// Input 1 Button.Indirect Rich Text Feedback
        /// </summary>
        /// <param name="callback">The <see cref="string"/> delegate to update the panel.</param>
        void Input1Button_IndirectRichText(MainStringInputSigDelegate callback);

        /// <summary>
        /// Input 1 Button.Indirect Rich Text Feedback
        /// </summary>
        /// <param name="serial">The <see cref="string"/> to update the panel.</param>
        void Input1Button_IndirectRichText(string serial);

        /// <summary>
        /// Input 2 Button.Indirect Rich Text Feedback
        /// </summary>
        /// <param name="callback">The <see cref="string"/> delegate to update the panel.</param>
        void Input2Button_IndirectRichText(MainStringInputSigDelegate callback);

        /// <summary>
        /// Input 2 Button.Indirect Rich Text Feedback
        /// </summary>
        /// <param name="serial">The <see cref="string"/> to update the panel.</param>
        void Input2Button_IndirectRichText(string serial);

        /// <summary>
        /// Input 3 Button.Indirect Rich Text Feedback
        /// </summary>
        /// <param name="callback">The <see cref="string"/> delegate to update the panel.</param>
        void Input3Button_IndirectRichText(MainStringInputSigDelegate callback);

        /// <summary>
        /// Input 3 Button.Indirect Rich Text Feedback
        /// </summary>
        /// <param name="serial">The <see cref="string"/> to update the panel.</param>
        void Input3Button_IndirectRichText(string serial);

        /// <summary>
        /// Input 4 Button.Indirect Rich Text Feedback
        /// </summary>
        /// <param name="callback">The <see cref="string"/> delegate to update the panel.</param>
        void Input4Button_IndirectRichText(MainStringInputSigDelegate callback);

        /// <summary>
        /// Input 4 Button.Indirect Rich Text Feedback
        /// </summary>
        /// <param name="serial">The <see cref="string"/> to update the panel.</param>
        void Input4Button_IndirectRichText(string serial);

        /// <summary>
        /// Room Name Text.Indirect Rich Text Feedback
        /// </summary>
        /// <param name="callback">The <see cref="string"/> delegate to update the panel.</param>
        void RoomNameText_IndirectRichText(MainStringInputSigDelegate callback);

        /// <summary>
        /// Room Name Text.Indirect Rich Text Feedback
        /// </summary>
        /// <param name="serial">The <see cref="string"/> to update the panel.</param>
        void RoomNameText_IndirectRichText(string serial);

        /// <summary>
        /// AV Mute Button.Icon Feedback
        /// </summary>
        /// <param name="callback">The <see cref="string"/> delegate to update the panel.</param>
        void AVMuteButton_Icon(MainStringInputSigDelegate callback);

        /// <summary>
        /// AV Mute Button.Icon Feedback
        /// </summary>
        /// <param name="serial">The <see cref="string"/> to update the panel.</param>
        void AVMuteButton_Icon(string serial);

        /// <summary>
        /// Input 1 Button.Icon Feedback
        /// </summary>
        /// <param name="callback">The <see cref="string"/> delegate to update the panel.</param>
        void Input1Button_Icon(MainStringInputSigDelegate callback);

        /// <summary>
        /// Input 1 Button.Icon Feedback
        /// </summary>
        /// <param name="serial">The <see cref="string"/> to update the panel.</param>
        void Input1Button_Icon(string serial);

        /// <summary>
        /// Input 2 Button.Icon Feedback
        /// </summary>
        /// <param name="callback">The <see cref="string"/> delegate to update the panel.</param>
        void Input2Button_Icon(MainStringInputSigDelegate callback);

        /// <summary>
        /// Input 2 Button.Icon Feedback
        /// </summary>
        /// <param name="serial">The <see cref="string"/> to update the panel.</param>
        void Input2Button_Icon(string serial);

        /// <summary>
        /// Input 3 Button.Icon Feedback
        /// </summary>
        /// <param name="callback">The <see cref="string"/> delegate to update the panel.</param>
        void Input3Button_Icon(MainStringInputSigDelegate callback);

        /// <summary>
        /// Input 3 Button.Icon Feedback
        /// </summary>
        /// <param name="serial">The <see cref="string"/> to update the panel.</param>
        void Input3Button_Icon(string serial);

        /// <summary>
        /// Input 4 Button.Icon Feedback
        /// </summary>
        /// <param name="callback">The <see cref="string"/> delegate to update the panel.</param>
        void Input4Button_Icon(MainStringInputSigDelegate callback);

        /// <summary>
        /// Input 4 Button.Icon Feedback
        /// </summary>
        /// <param name="serial">The <see cref="string"/> to update the panel.</param>
        void Input4Button_Icon(string serial);

        /// <summary>
        /// ComplexComponent Microphone Widget
        /// </summary>
        SLRCClassroom.Main.IMicrophoneWidget MicrophoneWidget { get; }
    }

    /// <summary>
    /// Digital callback used in feedback events.
    /// </summary>
    /// <param name="boolInputSig">The <see cref="BoolInputSig"/> joinInfo data.</param>
    /// <param name="main">The <see cref="IMain"/> on which to apply the feedback.</param>
    public delegate void MainBoolInputSigDelegate(BoolInputSig boolInputSig, IMain main);
    /// <summary>
    /// Digital callback used in feedback events.
    /// </summary>
    /// <param name="uShortInputSig">The <see cref="UShortInputSig"/> joinInfo data.</param>
    /// <param name="main">The <see cref="IMain"/> on which to apply the feedback.</param>
    public delegate void MainUShortInputSigDelegate(UShortInputSig uShortInputSig, IMain main);
    /// <summary>
    /// Digital callback used in feedback events.
    /// </summary>
    /// <param name="stringInputSig">The <see cref="StringInputSig"/> joinInfo data.</param>
    /// <param name="main">The <see cref="IMain"/> on which to apply the feedback.</param>
    public delegate void MainStringInputSigDelegate(StringInputSig stringInputSig, IMain main);

    /// <summary>
    /// Main
    /// </summary>
    internal partial class Main : IMain, IDisposable
    {
        #region Standard CH5 Component members

        private ComponentMediator ComponentMediator { get; set; }

        public object UserObject { get; set; }

        /// <summary>
        /// Gets the ControlJoinId a.k.a. SmartObjectId.  This Id identifies the extender symbol.
        /// </summary>
        public uint ControlJoinId { get; private set; }

        private IList<BasicTriListWithSmartObject> _devices;

        /// <summary>
        /// Gets the list of devices.
        /// </summary>
        public IList<BasicTriListWithSmartObject> Devices { get { return _devices; } }

        #endregion

        #region Joins

        private static class Joins
        {
            /// <summary>
            /// Digital signals,
            /// </summary>
            internal static class Booleans
            {
                /// <summary>
                /// Output or Event digital joinInfo from panel to Control System: Main.AVMuteButton.Press
                /// AV Mute Button.Press
                /// </summary>
                public const uint AVMuteButton_PressEvent = 1;

                /// <summary>
                /// Output or Event digital joinInfo from panel to Control System: Main.CombineButton.Press
                /// Combine Button.Press
                /// </summary>
                public const uint CombineButton_PressEvent = 2;

                /// <summary>
                /// Output or Event digital joinInfo from panel to Control System: Main.DisplayOffButton.Press
                /// Display Off Button.Press
                /// </summary>
                public const uint DisplayOffButton_PressEvent = 3;

                /// <summary>
                /// Output or Event digital joinInfo from panel to Control System: Main.DisplayOnButton.Press
                /// Display On Button.Press
                /// </summary>
                public const uint DisplayOnButton_PressEvent = 4;

                /// <summary>
                /// Output or Event digital joinInfo from panel to Control System: Main.Input1Button.Press
                /// Input 1 Button.Press
                /// </summary>
                public const uint Input1Button_PressEvent = 5;

                /// <summary>
                /// Output or Event digital joinInfo from panel to Control System: Main.Input2Button.Press
                /// Input 2 Button.Press
                /// </summary>
                public const uint Input2Button_PressEvent = 6;

                /// <summary>
                /// Output or Event digital joinInfo from panel to Control System: Main.Input3Button.Press
                /// Input 3 Button.Press
                /// </summary>
                public const uint Input3Button_PressEvent = 7;

                /// <summary>
                /// Output or Event digital joinInfo from panel to Control System: Main.Input4Button.Press
                /// Input 4 Button.Press
                /// </summary>
                public const uint Input4Button_PressEvent = 8;

                /// <summary>
                /// Output or Event digital joinInfo from panel to Control System: Main.MicrophoneButton.Press
                /// Microphone Button.Press
                /// </summary>
                public const uint MicrophoneButton_PressEvent = 9;

                /// <summary>
                /// Output or Event digital joinInfo from panel to Control System: Main.SeparateButton.Press
                /// Separate Button.Press
                /// </summary>
                public const uint SeparateButton_PressEvent = 10;

                /// <summary>
                /// Output or Event digital joinInfo from panel to Control System: Main.ToolsButton.Press
                /// Tools Button.Press
                /// </summary>
                public const uint ToolsButton_PressEvent = 11;

                /// <summary>
                /// Output or Event digital joinInfo from panel to Control System: Main.VolumeDownButton.Press
                /// Volume Down Button.Press
                /// </summary>
                public const uint VolumeDownButton_PressEvent = 12;

                /// <summary>
                /// Output or Event digital joinInfo from panel to Control System: Main.VolumeMuteButton.Press
                /// Volume Mute Button.Press
                /// </summary>
                public const uint VolumeMuteButton_PressEvent = 13;

                /// <summary>
                /// Output or Event digital joinInfo from panel to Control System: Main.VolumeUpButton.Press
                /// Volume Up Button.Press
                /// </summary>
                public const uint VolumeUpButton_PressEvent = 14;


                /// <summary>
                /// Input or Feedback digital joinInfo from Control System to panel: Main.AVMuteButton.Visibility_fb
                /// AV Mute Button.Visibility
                /// </summary>
                public const uint AVMuteButton_Visibility_fbState = 1;

                /// <summary>
                /// Input or Feedback digital joinInfo from Control System to panel: Main.Input1Button.Visibility_fb
                /// Input 1 Button.Visibility
                /// </summary>
                public const uint Input1Button_Visibility_fbState = 2;

                /// <summary>
                /// Input or Feedback digital joinInfo from Control System to panel: Main.Input2Button.Visibility_fb
                /// Input 2 Button.Visibility
                /// </summary>
                public const uint Input2Button_Visibility_fbState = 3;

                /// <summary>
                /// Input or Feedback digital joinInfo from Control System to panel: Main.Input3Button.Visibility_fb
                /// Input 3 Button.Visibility
                /// </summary>
                public const uint Input3Button_Visibility_fbState = 4;

                /// <summary>
                /// Input or Feedback digital joinInfo from Control System to panel: Main.Input4Button.Visibility_fb
                /// Input 4 Button.Visibility
                /// </summary>
                public const uint Input4Button_Visibility_fbState = 5;

                /// <summary>
                /// Input or Feedback digital joinInfo from Control System to panel: Main.MicrophoneButton.Visibility_fb
                /// Microphone Button.Visibility
                /// </summary>
                public const uint MicrophoneButton_Visibility_fbState = 6;

                /// <summary>
                /// Input or Feedback digital joinInfo from Control System to panel: Main.CombineSeparatePopup.Visibility_fb
                /// Combine-Separate Popup.Visibility
                /// </summary>
                public const uint CombineSeparatePopup_Visibility_fbState = 7;

                /// <summary>
                /// Input or Feedback digital joinInfo from Control System to panel: Main.DisplayProcessing.Visibility_fb
                /// Display Processing.Visibility
                /// </summary>
                public const uint DisplayProcessing_Visibility_fbState = 8;

                /// <summary>
                /// Input or Feedback digital joinInfo from Control System to panel: MainVisibilityJoin
                /// Main.VisibilityJoin
                /// </summary>
                public const uint Main_VisibilityJoinState = 9;

                /// <summary>
                /// Input or Feedback digital joinInfo from Control System to panel: Main.AVMuteButton.Enable
                /// AV Mute Button.Enable
                /// </summary>
                public const uint AVMuteButton_EnableState = 10;

                /// <summary>
                /// Input or Feedback digital joinInfo from Control System to panel: Main.Input1Button.Enable
                /// Input 1 Button.Enable
                /// </summary>
                public const uint Input1Button_EnableState = 11;

                /// <summary>
                /// Input or Feedback digital joinInfo from Control System to panel: Main.Input2Button.Enable
                /// Input 2 Button.Enable
                /// </summary>
                public const uint Input2Button_EnableState = 12;

                /// <summary>
                /// Input or Feedback digital joinInfo from Control System to panel: Main.Input3Button.Enable
                /// Input 3 Button.Enable
                /// </summary>
                public const uint Input3Button_EnableState = 13;

                /// <summary>
                /// Input or Feedback digital joinInfo from Control System to panel: Main.Input4Button.Enable
                /// Input 4 Button.Enable
                /// </summary>
                public const uint Input4Button_EnableState = 14;

                /// <summary>
                /// Input or Feedback digital joinInfo from Control System to panel: Main.VolumeDownButton.Enable
                /// Volume Down Button.Enable
                /// </summary>
                public const uint VolumeDownButton_EnableState = 15;

                /// <summary>
                /// Input or Feedback digital joinInfo from Control System to panel: Main.VolumeMuteButton.Enable
                /// Volume Mute Button.Enable
                /// </summary>
                public const uint VolumeMuteButton_EnableState = 16;

                /// <summary>
                /// Input or Feedback digital joinInfo from Control System to panel: Main.VolumeUpButton.Enable
                /// Volume Up Button.Enable
                /// </summary>
                public const uint VolumeUpButton_EnableState = 17;

                /// <summary>
                /// Input or Feedback digital joinInfo from Control System to panel: Main.AVMuteButton.Selected
                /// AV Mute Button.Selected
                /// </summary>
                public const uint AVMuteButton_SelectedState = 18;

                /// <summary>
                /// Input or Feedback digital joinInfo from Control System to panel: Main.CombineButton.Selected
                /// Combine Button.Selected
                /// </summary>
                public const uint CombineButton_SelectedState = 19;

                /// <summary>
                /// Input or Feedback digital joinInfo from Control System to panel: Main.DisplayOffButton.Selected
                /// Display Off Button.Selected
                /// </summary>
                public const uint DisplayOffButton_SelectedState = 20;

                /// <summary>
                /// Input or Feedback digital joinInfo from Control System to panel: Main.DisplayOnButton.Selected
                /// Display On Button.Selected
                /// </summary>
                public const uint DisplayOnButton_SelectedState = 21;

                /// <summary>
                /// Input or Feedback digital joinInfo from Control System to panel: Main.Input1Button.Selected
                /// Input 1 Button.Selected
                /// </summary>
                public const uint Input1Button_SelectedState = 22;

                /// <summary>
                /// Input or Feedback digital joinInfo from Control System to panel: Main.Input2Button.Selected
                /// Input 2 Button.Selected
                /// </summary>
                public const uint Input2Button_SelectedState = 23;

                /// <summary>
                /// Input or Feedback digital joinInfo from Control System to panel: Main.Input3Button.Selected
                /// Input 3 Button.Selected
                /// </summary>
                public const uint Input3Button_SelectedState = 24;

                /// <summary>
                /// Input or Feedback digital joinInfo from Control System to panel: Main.Input4Button.Selected
                /// Input 4 Button.Selected
                /// </summary>
                public const uint Input4Button_SelectedState = 25;

                /// <summary>
                /// Input or Feedback digital joinInfo from Control System to panel: Main.SeparateButton.Selected
                /// Separate Button.Selected
                /// </summary>
                public const uint SeparateButton_SelectedState = 26;

                /// <summary>
                /// Input or Feedback digital joinInfo from Control System to panel: Main.VolumeMuteButton.Selected
                /// Volume Mute Button.Selected
                /// </summary>
                public const uint VolumeMuteButton_SelectedState = 27;

            }
            /// <summary>
            /// Analog signals.
            /// </summary>
            internal static class Numerics
            {

                /// <summary>
                /// Input or Feedback analog joinInfo from Control System to panel: Main.VolumeGauge.LowerTouchfb
                /// Volume Gauge.Lower Touch fb
                /// </summary>
                public const uint VolumeGauge_LowerTouchfbState = 4;

            }
            /// <summary>
            /// Serial signals.
            /// </summary>
            internal static class Strings
            {

                /// <summary>
                /// Input or Feedback serial joinInfo from Control System to panel: Main.AVMuteButton.IndirectRichText
                /// AV Mute Button.Indirect Rich Text
                /// </summary>
                public const uint AVMuteButton_IndirectRichTextState = 1;
                /// <summary>
                /// Input or Feedback serial joinInfo from Control System to panel: Main.Input1Button.IndirectRichText
                /// Input 1 Button.Indirect Rich Text
                /// </summary>
                public const uint Input1Button_IndirectRichTextState = 2;
                /// <summary>
                /// Input or Feedback serial joinInfo from Control System to panel: Main.Input2Button.IndirectRichText
                /// Input 2 Button.Indirect Rich Text
                /// </summary>
                public const uint Input2Button_IndirectRichTextState = 3;
                /// <summary>
                /// Input or Feedback serial joinInfo from Control System to panel: Main.Input3Button.IndirectRichText
                /// Input 3 Button.Indirect Rich Text
                /// </summary>
                public const uint Input3Button_IndirectRichTextState = 4;
                /// <summary>
                /// Input or Feedback serial joinInfo from Control System to panel: Main.Input4Button.IndirectRichText
                /// Input 4 Button.Indirect Rich Text
                /// </summary>
                public const uint Input4Button_IndirectRichTextState = 5;
                /// <summary>
                /// Input or Feedback serial joinInfo from Control System to panel: Main.RoomNameText.IndirectRichText
                /// Room Name Text.Indirect Rich Text
                /// </summary>
                public const uint RoomNameText_IndirectRichTextState = 6;
                /// <summary>
                /// Input or Feedback serial joinInfo from Control System to panel: Main.AVMuteButton.Icon
                /// AV Mute Button.Icon
                /// </summary>
                public const uint AVMuteButton_IconState = 7;
                /// <summary>
                /// Input or Feedback serial joinInfo from Control System to panel: Main.Input1Button.Icon
                /// Input 1 Button.Icon
                /// </summary>
                public const uint Input1Button_IconState = 8;
                /// <summary>
                /// Input or Feedback serial joinInfo from Control System to panel: Main.Input2Button.Icon
                /// Input 2 Button.Icon
                /// </summary>
                public const uint Input2Button_IconState = 9;
                /// <summary>
                /// Input or Feedback serial joinInfo from Control System to panel: Main.Input3Button.Icon
                /// Input 3 Button.Icon
                /// </summary>
                public const uint Input3Button_IconState = 10;
                /// <summary>
                /// Input or Feedback serial joinInfo from Control System to panel: Main.Input4Button.Icon
                /// Input 4 Button.Icon
                /// </summary>
                public const uint Input4Button_IconState = 11;
            }
        }

        #endregion

        #region Construction and Initialization

        /// <summary>
        /// Initializes a new instance of the <see cref="Main"/> component class.
        /// </summary>
        /// <param name="componentMediator">The <see cref="ComponentMediator"/> used to instantiate the component.</param>
        /// <param name="controlJoinId">The SmartObjectId at which to create the component.</param>
        /// <param name="itemCount">The number of items.</param>
        internal Main(ComponentMediator componentMediator, uint controlJoinId, uint? itemCount)
        {
            ComponentMediator = componentMediator;
            Initialize(controlJoinId, itemCount);
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="Main"/> component class.
        /// </summary>
        /// <param name="componentMediator">The <see cref="ComponentMediator"/> used to instantiate the component.</param>
        /// <param name="controlJoinId">The SmartObjectId at which to create the component.</param>
        internal Main(ComponentMediator componentMediator, uint controlJoinId) : this(componentMediator, controlJoinId, null)
        {
        }

        /// <summary>
        /// Initializes a new instance with default itemCount.
        /// </summary>
        /// <param name="controlJoinId">The SmartObjectId at which to create the component.</param>
        private void Initialize(uint controlJoinId)
        {
            Initialize(controlJoinId, null);
        }

        private Dictionary<string, Indexes> _indexLookup = new Dictionary<string, Indexes>();

        /// <summary>
        /// Initializes a new instance of the <see cref="Main"/> component class.
        /// </summary>
        /// <param name="controlJoinId">The SmartObjectId at which to create the component.</param>
        /// <param name="itemCount">The number of items.</param>
        private void Initialize(uint controlJoinId, uint? itemCount)
        {
            ControlJoinId = controlJoinId; 
 
            _devices = new List<BasicTriListWithSmartObject>(); 
 
            ComponentMediator.ConfigureBooleanEvent(controlJoinId, Joins.Booleans.AVMuteButton_PressEvent, onAVMuteButton_Press);
            ComponentMediator.ConfigureBooleanEvent(controlJoinId, Joins.Booleans.CombineButton_PressEvent, onCombineButton_Press);
            ComponentMediator.ConfigureBooleanEvent(controlJoinId, Joins.Booleans.DisplayOffButton_PressEvent, onDisplayOffButton_Press);
            ComponentMediator.ConfigureBooleanEvent(controlJoinId, Joins.Booleans.DisplayOnButton_PressEvent, onDisplayOnButton_Press);
            ComponentMediator.ConfigureBooleanEvent(controlJoinId, Joins.Booleans.Input1Button_PressEvent, onInput1Button_Press);
            ComponentMediator.ConfigureBooleanEvent(controlJoinId, Joins.Booleans.Input2Button_PressEvent, onInput2Button_Press);
            ComponentMediator.ConfigureBooleanEvent(controlJoinId, Joins.Booleans.Input3Button_PressEvent, onInput3Button_Press);
            ComponentMediator.ConfigureBooleanEvent(controlJoinId, Joins.Booleans.Input4Button_PressEvent, onInput4Button_Press);
            ComponentMediator.ConfigureBooleanEvent(controlJoinId, Joins.Booleans.MicrophoneButton_PressEvent, onMicrophoneButton_Press);
            ComponentMediator.ConfigureBooleanEvent(controlJoinId, Joins.Booleans.SeparateButton_PressEvent, onSeparateButton_Press);
            ComponentMediator.ConfigureBooleanEvent(controlJoinId, Joins.Booleans.ToolsButton_PressEvent, onToolsButton_Press);
            ComponentMediator.ConfigureBooleanEvent(controlJoinId, Joins.Booleans.VolumeDownButton_PressEvent, onVolumeDownButton_Press);
            ComponentMediator.ConfigureBooleanEvent(controlJoinId, Joins.Booleans.VolumeMuteButton_PressEvent, onVolumeMuteButton_Press);
            ComponentMediator.ConfigureBooleanEvent(controlJoinId, Joins.Booleans.VolumeUpButton_PressEvent, onVolumeUpButton_Press);
            MicrophoneWidget = new SLRCClassroom.Main.MicrophoneWidget(ComponentMediator, 3);
        }

        public void AddDevice(BasicTriListWithSmartObject device)
        {
            Devices.Add(device);
            ComponentMediator.HookSmartObjectEvents(device.SmartObjects[ControlJoinId]);

            ((SLRCClassroom.Main.MicrophoneWidget)MicrophoneWidget).AddDevice(device);
        }

        public void RemoveDevice(BasicTriListWithSmartObject device)
        {
            Devices.Remove(device);
            ComponentMediator.UnHookSmartObjectEvents(device.SmartObjects[ControlJoinId]);

            ((SLRCClassroom.Main.MicrophoneWidget)MicrophoneWidget).RemoveDevice(device);
        }

        #endregion

        #region CH5 Contract

        /// <inheritdoc/>
        public event EventHandler<UIEventArgs> AVMuteButton_PressEvent;
        private void onAVMuteButton_Press(SmartObjectEventArgs eventArgs)
        {
            EventHandler<UIEventArgs> handler = AVMuteButton_PressEvent;
            if (handler != null)
                handler(this, UIEventArgs.CreateEventArgs(eventArgs));
        }

        /// <inheritdoc/>
        public event EventHandler<UIEventArgs> CombineButton_PressEvent;
        private void onCombineButton_Press(SmartObjectEventArgs eventArgs)
        {
            EventHandler<UIEventArgs> handler = CombineButton_PressEvent;
            if (handler != null)
                handler(this, UIEventArgs.CreateEventArgs(eventArgs));
        }

        /// <inheritdoc/>
        public event EventHandler<UIEventArgs> DisplayOffButton_PressEvent;
        private void onDisplayOffButton_Press(SmartObjectEventArgs eventArgs)
        {
            EventHandler<UIEventArgs> handler = DisplayOffButton_PressEvent;
            if (handler != null)
                handler(this, UIEventArgs.CreateEventArgs(eventArgs));
        }

        /// <inheritdoc/>
        public event EventHandler<UIEventArgs> DisplayOnButton_PressEvent;
        private void onDisplayOnButton_Press(SmartObjectEventArgs eventArgs)
        {
            EventHandler<UIEventArgs> handler = DisplayOnButton_PressEvent;
            if (handler != null)
                handler(this, UIEventArgs.CreateEventArgs(eventArgs));
        }

        /// <inheritdoc/>
        public event EventHandler<UIEventArgs> Input1Button_PressEvent;
        private void onInput1Button_Press(SmartObjectEventArgs eventArgs)
        {
            EventHandler<UIEventArgs> handler = Input1Button_PressEvent;
            if (handler != null)
                handler(this, UIEventArgs.CreateEventArgs(eventArgs));
        }

        /// <inheritdoc/>
        public event EventHandler<UIEventArgs> Input2Button_PressEvent;
        private void onInput2Button_Press(SmartObjectEventArgs eventArgs)
        {
            EventHandler<UIEventArgs> handler = Input2Button_PressEvent;
            if (handler != null)
                handler(this, UIEventArgs.CreateEventArgs(eventArgs));
        }

        /// <inheritdoc/>
        public event EventHandler<UIEventArgs> Input3Button_PressEvent;
        private void onInput3Button_Press(SmartObjectEventArgs eventArgs)
        {
            EventHandler<UIEventArgs> handler = Input3Button_PressEvent;
            if (handler != null)
                handler(this, UIEventArgs.CreateEventArgs(eventArgs));
        }

        /// <inheritdoc/>
        public event EventHandler<UIEventArgs> Input4Button_PressEvent;
        private void onInput4Button_Press(SmartObjectEventArgs eventArgs)
        {
            EventHandler<UIEventArgs> handler = Input4Button_PressEvent;
            if (handler != null)
                handler(this, UIEventArgs.CreateEventArgs(eventArgs));
        }

        /// <inheritdoc/>
        public event EventHandler<UIEventArgs> MicrophoneButton_PressEvent;
        private void onMicrophoneButton_Press(SmartObjectEventArgs eventArgs)
        {
            EventHandler<UIEventArgs> handler = MicrophoneButton_PressEvent;
            if (handler != null)
                handler(this, UIEventArgs.CreateEventArgs(eventArgs));
        }

        /// <inheritdoc/>
        public event EventHandler<UIEventArgs> SeparateButton_PressEvent;
        private void onSeparateButton_Press(SmartObjectEventArgs eventArgs)
        {
            EventHandler<UIEventArgs> handler = SeparateButton_PressEvent;
            if (handler != null)
                handler(this, UIEventArgs.CreateEventArgs(eventArgs));
        }

        /// <inheritdoc/>
        public event EventHandler<UIEventArgs> ToolsButton_PressEvent;
        private void onToolsButton_Press(SmartObjectEventArgs eventArgs)
        {
            EventHandler<UIEventArgs> handler = ToolsButton_PressEvent;
            if (handler != null)
                handler(this, UIEventArgs.CreateEventArgs(eventArgs));
        }

        /// <inheritdoc/>
        public event EventHandler<UIEventArgs> VolumeDownButton_PressEvent;
        private void onVolumeDownButton_Press(SmartObjectEventArgs eventArgs)
        {
            EventHandler<UIEventArgs> handler = VolumeDownButton_PressEvent;
            if (handler != null)
                handler(this, UIEventArgs.CreateEventArgs(eventArgs));
        }

        /// <inheritdoc/>
        public event EventHandler<UIEventArgs> VolumeMuteButton_PressEvent;
        private void onVolumeMuteButton_Press(SmartObjectEventArgs eventArgs)
        {
            EventHandler<UIEventArgs> handler = VolumeMuteButton_PressEvent;
            if (handler != null)
                handler(this, UIEventArgs.CreateEventArgs(eventArgs));
        }

        /// <inheritdoc/>
        public event EventHandler<UIEventArgs> VolumeUpButton_PressEvent;
        private void onVolumeUpButton_Press(SmartObjectEventArgs eventArgs)
        {
            EventHandler<UIEventArgs> handler = VolumeUpButton_PressEvent;
            if (handler != null)
                handler(this, UIEventArgs.CreateEventArgs(eventArgs));
        }

        /// <inheritdoc/>
        public void AVMuteButton_Enable(MainBoolInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].BooleanInput[Joins.Booleans.AVMuteButton_EnableState], this);
            }
        }

        /// <inheritdoc/>
        public void AVMuteButton_Enable(bool digital)
        {
            AVMuteButton_Enable((sig, component) => sig.BoolValue = digital);
        }
        /// <inheritdoc/>
        public void AVMuteButton_Selected(MainBoolInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].BooleanInput[Joins.Booleans.AVMuteButton_SelectedState], this);
            }
        }

        /// <inheritdoc/>
        public void AVMuteButton_Selected(bool digital)
        {
            AVMuteButton_Selected((sig, component) => sig.BoolValue = digital);
        }
        /// <inheritdoc/>
        public void AVMuteButton_Visibility_fb(MainBoolInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].BooleanInput[Joins.Booleans.AVMuteButton_Visibility_fbState], this);
            }
        }

        /// <inheritdoc/>
        public void AVMuteButton_Visibility_fb(bool digital)
        {
            AVMuteButton_Visibility_fb((sig, component) => sig.BoolValue = digital);
        }
        /// <inheritdoc/>
        public void CombineButton_Selected(MainBoolInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].BooleanInput[Joins.Booleans.CombineButton_SelectedState], this);
            }
        }

        /// <inheritdoc/>
        public void CombineButton_Selected(bool digital)
        {
            CombineButton_Selected((sig, component) => sig.BoolValue = digital);
        }
        /// <inheritdoc/>
        public void CombineSeparatePopup_Visibility_fb(MainBoolInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].BooleanInput[Joins.Booleans.CombineSeparatePopup_Visibility_fbState], this);
            }
        }

        /// <inheritdoc/>
        public void CombineSeparatePopup_Visibility_fb(bool digital)
        {
            CombineSeparatePopup_Visibility_fb((sig, component) => sig.BoolValue = digital);
        }
        /// <inheritdoc/>
        public void DisplayOffButton_Selected(MainBoolInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].BooleanInput[Joins.Booleans.DisplayOffButton_SelectedState], this);
            }
        }

        /// <inheritdoc/>
        public void DisplayOffButton_Selected(bool digital)
        {
            DisplayOffButton_Selected((sig, component) => sig.BoolValue = digital);
        }
        /// <inheritdoc/>
        public void DisplayOnButton_Selected(MainBoolInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].BooleanInput[Joins.Booleans.DisplayOnButton_SelectedState], this);
            }
        }

        /// <inheritdoc/>
        public void DisplayOnButton_Selected(bool digital)
        {
            DisplayOnButton_Selected((sig, component) => sig.BoolValue = digital);
        }
        /// <inheritdoc/>
        public void DisplayProcessing_Visibility_fb(MainBoolInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].BooleanInput[Joins.Booleans.DisplayProcessing_Visibility_fbState], this);
            }
        }

        /// <inheritdoc/>
        public void DisplayProcessing_Visibility_fb(bool digital)
        {
            DisplayProcessing_Visibility_fb((sig, component) => sig.BoolValue = digital);
        }
        /// <inheritdoc/>
        public void Input1Button_Enable(MainBoolInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].BooleanInput[Joins.Booleans.Input1Button_EnableState], this);
            }
        }

        /// <inheritdoc/>
        public void Input1Button_Enable(bool digital)
        {
            Input1Button_Enable((sig, component) => sig.BoolValue = digital);
        }
        /// <inheritdoc/>
        public void Input1Button_Selected(MainBoolInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].BooleanInput[Joins.Booleans.Input1Button_SelectedState], this);
            }
        }

        /// <inheritdoc/>
        public void Input1Button_Selected(bool digital)
        {
            Input1Button_Selected((sig, component) => sig.BoolValue = digital);
        }
        /// <inheritdoc/>
        public void Input1Button_Visibility_fb(MainBoolInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].BooleanInput[Joins.Booleans.Input1Button_Visibility_fbState], this);
            }
        }

        /// <inheritdoc/>
        public void Input1Button_Visibility_fb(bool digital)
        {
            Input1Button_Visibility_fb((sig, component) => sig.BoolValue = digital);
        }
        /// <inheritdoc/>
        public void Input2Button_Enable(MainBoolInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].BooleanInput[Joins.Booleans.Input2Button_EnableState], this);
            }
        }

        /// <inheritdoc/>
        public void Input2Button_Enable(bool digital)
        {
            Input2Button_Enable((sig, component) => sig.BoolValue = digital);
        }
        /// <inheritdoc/>
        public void Input2Button_Selected(MainBoolInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].BooleanInput[Joins.Booleans.Input2Button_SelectedState], this);
            }
        }

        /// <inheritdoc/>
        public void Input2Button_Selected(bool digital)
        {
            Input2Button_Selected((sig, component) => sig.BoolValue = digital);
        }
        /// <inheritdoc/>
        public void Input2Button_Visibility_fb(MainBoolInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].BooleanInput[Joins.Booleans.Input2Button_Visibility_fbState], this);
            }
        }

        /// <inheritdoc/>
        public void Input2Button_Visibility_fb(bool digital)
        {
            Input2Button_Visibility_fb((sig, component) => sig.BoolValue = digital);
        }
        /// <inheritdoc/>
        public void Input3Button_Enable(MainBoolInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].BooleanInput[Joins.Booleans.Input3Button_EnableState], this);
            }
        }

        /// <inheritdoc/>
        public void Input3Button_Enable(bool digital)
        {
            Input3Button_Enable((sig, component) => sig.BoolValue = digital);
        }
        /// <inheritdoc/>
        public void Input3Button_Selected(MainBoolInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].BooleanInput[Joins.Booleans.Input3Button_SelectedState], this);
            }
        }

        /// <inheritdoc/>
        public void Input3Button_Selected(bool digital)
        {
            Input3Button_Selected((sig, component) => sig.BoolValue = digital);
        }
        /// <inheritdoc/>
        public void Input3Button_Visibility_fb(MainBoolInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].BooleanInput[Joins.Booleans.Input3Button_Visibility_fbState], this);
            }
        }

        /// <inheritdoc/>
        public void Input3Button_Visibility_fb(bool digital)
        {
            Input3Button_Visibility_fb((sig, component) => sig.BoolValue = digital);
        }
        /// <inheritdoc/>
        public void Input4Button_Enable(MainBoolInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].BooleanInput[Joins.Booleans.Input4Button_EnableState], this);
            }
        }

        /// <inheritdoc/>
        public void Input4Button_Enable(bool digital)
        {
            Input4Button_Enable((sig, component) => sig.BoolValue = digital);
        }
        /// <inheritdoc/>
        public void Input4Button_Selected(MainBoolInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].BooleanInput[Joins.Booleans.Input4Button_SelectedState], this);
            }
        }

        /// <inheritdoc/>
        public void Input4Button_Selected(bool digital)
        {
            Input4Button_Selected((sig, component) => sig.BoolValue = digital);
        }
        /// <inheritdoc/>
        public void Input4Button_Visibility_fb(MainBoolInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].BooleanInput[Joins.Booleans.Input4Button_Visibility_fbState], this);
            }
        }

        /// <inheritdoc/>
        public void Input4Button_Visibility_fb(bool digital)
        {
            Input4Button_Visibility_fb((sig, component) => sig.BoolValue = digital);
        }
        /// <inheritdoc/>
        public void Main_VisibilityJoin(MainBoolInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].BooleanInput[Joins.Booleans.Main_VisibilityJoinState], this);
            }
        }

        /// <inheritdoc/>
        public void Main_VisibilityJoin(bool digital)
        {
            Main_VisibilityJoin((sig, component) => sig.BoolValue = digital);
        }
        /// <inheritdoc/>
        public void MicrophoneButton_Visibility_fb(MainBoolInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].BooleanInput[Joins.Booleans.MicrophoneButton_Visibility_fbState], this);
            }
        }

        /// <inheritdoc/>
        public void MicrophoneButton_Visibility_fb(bool digital)
        {
            MicrophoneButton_Visibility_fb((sig, component) => sig.BoolValue = digital);
        }
        /// <inheritdoc/>
        public void SeparateButton_Selected(MainBoolInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].BooleanInput[Joins.Booleans.SeparateButton_SelectedState], this);
            }
        }

        /// <inheritdoc/>
        public void SeparateButton_Selected(bool digital)
        {
            SeparateButton_Selected((sig, component) => sig.BoolValue = digital);
        }
        /// <inheritdoc/>
        public void VolumeDownButton_Enable(MainBoolInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].BooleanInput[Joins.Booleans.VolumeDownButton_EnableState], this);
            }
        }

        /// <inheritdoc/>
        public void VolumeDownButton_Enable(bool digital)
        {
            VolumeDownButton_Enable((sig, component) => sig.BoolValue = digital);
        }
        /// <inheritdoc/>
        public void VolumeMuteButton_Enable(MainBoolInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].BooleanInput[Joins.Booleans.VolumeMuteButton_EnableState], this);
            }
        }

        /// <inheritdoc/>
        public void VolumeMuteButton_Enable(bool digital)
        {
            VolumeMuteButton_Enable((sig, component) => sig.BoolValue = digital);
        }
        /// <inheritdoc/>
        public void VolumeMuteButton_Selected(MainBoolInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].BooleanInput[Joins.Booleans.VolumeMuteButton_SelectedState], this);
            }
        }

        /// <inheritdoc/>
        public void VolumeMuteButton_Selected(bool digital)
        {
            VolumeMuteButton_Selected((sig, component) => sig.BoolValue = digital);
        }
        /// <inheritdoc/>
        public void VolumeUpButton_Enable(MainBoolInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].BooleanInput[Joins.Booleans.VolumeUpButton_EnableState], this);
            }
        }

        /// <inheritdoc/>
        public void VolumeUpButton_Enable(bool digital)
        {
            VolumeUpButton_Enable((sig, component) => sig.BoolValue = digital);
        }

        /// <inheritdoc/>
        public void VolumeGauge_LowerTouchfb(MainUShortInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].UShortInput[Joins.Numerics.VolumeGauge_LowerTouchfbState], this);
            }
        }

        /// <inheritdoc/>
        public void VolumeGauge_LowerTouchfb(ushort analog)
        {
            VolumeGauge_LowerTouchfb((sig, component) => sig.UShortValue = analog);
        }

        /// <inheritdoc/>
        public void VolumeGauge_LowerTouchfb(short analog)
        {
            VolumeGauge_LowerTouchfb((sig, component) => sig.ShortValue = analog);
        }

        /// <inheritdoc/>
        public void AVMuteButton_Icon(MainStringInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].StringInput[Joins.Strings.AVMuteButton_IconState], this);
            }
        }

        /// <inheritdoc/>
        public void AVMuteButton_Icon(string serial)
        {
            AVMuteButton_Icon((sig, component) => sig.StringValue = serial);
        }
        /// <inheritdoc/>
        public void AVMuteButton_IndirectRichText(MainStringInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].StringInput[Joins.Strings.AVMuteButton_IndirectRichTextState], this);
            }
        }

        /// <inheritdoc/>
        public void AVMuteButton_IndirectRichText(string serial)
        {
            AVMuteButton_IndirectRichText((sig, component) => sig.StringValue = serial);
        }
        /// <inheritdoc/>
        public void Input1Button_Icon(MainStringInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].StringInput[Joins.Strings.Input1Button_IconState], this);
            }
        }

        /// <inheritdoc/>
        public void Input1Button_Icon(string serial)
        {
            Input1Button_Icon((sig, component) => sig.StringValue = serial);
        }
        /// <inheritdoc/>
        public void Input1Button_IndirectRichText(MainStringInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].StringInput[Joins.Strings.Input1Button_IndirectRichTextState], this);
            }
        }

        /// <inheritdoc/>
        public void Input1Button_IndirectRichText(string serial)
        {
            Input1Button_IndirectRichText((sig, component) => sig.StringValue = serial);
        }
        /// <inheritdoc/>
        public void Input2Button_Icon(MainStringInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].StringInput[Joins.Strings.Input2Button_IconState], this);
            }
        }

        /// <inheritdoc/>
        public void Input2Button_Icon(string serial)
        {
            Input2Button_Icon((sig, component) => sig.StringValue = serial);
        }
        /// <inheritdoc/>
        public void Input2Button_IndirectRichText(MainStringInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].StringInput[Joins.Strings.Input2Button_IndirectRichTextState], this);
            }
        }

        /// <inheritdoc/>
        public void Input2Button_IndirectRichText(string serial)
        {
            Input2Button_IndirectRichText((sig, component) => sig.StringValue = serial);
        }
        /// <inheritdoc/>
        public void Input3Button_Icon(MainStringInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].StringInput[Joins.Strings.Input3Button_IconState], this);
            }
        }

        /// <inheritdoc/>
        public void Input3Button_Icon(string serial)
        {
            Input3Button_Icon((sig, component) => sig.StringValue = serial);
        }
        /// <inheritdoc/>
        public void Input3Button_IndirectRichText(MainStringInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].StringInput[Joins.Strings.Input3Button_IndirectRichTextState], this);
            }
        }

        /// <inheritdoc/>
        public void Input3Button_IndirectRichText(string serial)
        {
            Input3Button_IndirectRichText((sig, component) => sig.StringValue = serial);
        }
        /// <inheritdoc/>
        public void Input4Button_Icon(MainStringInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].StringInput[Joins.Strings.Input4Button_IconState], this);
            }
        }

        /// <inheritdoc/>
        public void Input4Button_Icon(string serial)
        {
            Input4Button_Icon((sig, component) => sig.StringValue = serial);
        }
        /// <inheritdoc/>
        public void Input4Button_IndirectRichText(MainStringInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].StringInput[Joins.Strings.Input4Button_IndirectRichTextState], this);
            }
        }

        /// <inheritdoc/>
        public void Input4Button_IndirectRichText(string serial)
        {
            Input4Button_IndirectRichText((sig, component) => sig.StringValue = serial);
        }
        /// <inheritdoc/>
        public void RoomNameText_IndirectRichText(MainStringInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].StringInput[Joins.Strings.RoomNameText_IndirectRichTextState], this);
            }
        }

        /// <inheritdoc/>
        public void RoomNameText_IndirectRichText(string serial)
        {
            RoomNameText_IndirectRichText((sig, component) => sig.StringValue = serial);
        }

        /// <summary>
        /// ComplexComponent MicrophoneWidget
        /// </summary>
        public SLRCClassroom.Main.IMicrophoneWidget MicrophoneWidget { get; private set; }

        #endregion

        #region Overrides

        public override int GetHashCode()
        {
            return (int)ControlJoinId;
        }

        public override string ToString()
        {
            return string.Format("Contract: {0} Component: {1} HashCode: {2} {3}", "Main", GetType().Name, GetHashCode(), UserObject != null ? "UserObject: " + UserObject : null);
        }

        #endregion

        #region IDisposable

        public bool IsDisposed { get; set; }

        public void Dispose()
        {
            if (IsDisposed)
                return;

            IsDisposed = true;

            AVMuteButton_PressEvent = null;
            CombineButton_PressEvent = null;
            DisplayOffButton_PressEvent = null;
            DisplayOnButton_PressEvent = null;
            Input1Button_PressEvent = null;
            Input2Button_PressEvent = null;
            Input3Button_PressEvent = null;
            Input4Button_PressEvent = null;
            MicrophoneButton_PressEvent = null;
            SeparateButton_PressEvent = null;
            ToolsButton_PressEvent = null;
            VolumeDownButton_PressEvent = null;
            VolumeMuteButton_PressEvent = null;
            VolumeUpButton_PressEvent = null;
        }

        #endregion
    }
}
