//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by CrestronConstruct.
//     AppHost:     2.601.10.0
//     UI Plugin:   1.4201.17.0
//
//     Project:     SLRC-Classroom
//     Version:     1.0.0.0
//     Sdk:         CH5:2.16.0
//     Strategy:    Modern
//     IndexOnly:   False
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq;
using Crestron.SimplSharp;
using Crestron.SimplSharpPro;
using Crestron.SimplSharpPro.DeviceSupport;
using SLRCClassroom;

namespace SLRCClassroom.Tools
{

    /// <summary>
    /// Tools
    /// </summary>
    public partial interface ITools 
    {
        object UserObject { get; set; }

        /// <summary>
        /// Event Audio Combine Button.Press (from panel to Control System)
        /// </summary>
        event EventHandler<UIEventArgs> AudioCombineButton_PressEvent;

        /// <summary>
        /// Event Audio Mic Combine Button.Press (from panel to Control System)
        /// </summary>
        event EventHandler<UIEventArgs> AudioMicCombineButton_PressEvent;

        /// <summary>
        /// Event Audio Mic Mute Button.Press (from panel to Control System)
        /// </summary>
        event EventHandler<UIEventArgs> AudioMicMuteButton_PressEvent;

        /// <summary>
        /// Event Audio Mic Separate Button.Press (from panel to Control System)
        /// </summary>
        event EventHandler<UIEventArgs> AudioMicSeparateButton_PressEvent;

        /// <summary>
        /// Event Audio Mic Unmute Button.Press (from panel to Control System)
        /// </summary>
        event EventHandler<UIEventArgs> AudioMicUnmuteButton_PressEvent;

        /// <summary>
        /// Event Audio Prog Mute Button.Press (from panel to Control System)
        /// </summary>
        event EventHandler<UIEventArgs> AudioProgMuteButton_PressEvent;

        /// <summary>
        /// Event Audio Prog Unmute Button.Press (from panel to Control System)
        /// </summary>
        event EventHandler<UIEventArgs> AudioProgUnmuteButton_PressEvent;

        /// <summary>
        /// Event Audio Separate Button.Press (from panel to Control System)
        /// </summary>
        event EventHandler<UIEventArgs> AudioSeparateButton_PressEvent;

        /// <summary>
        /// Event Display Button 1.Press (from panel to Control System)
        /// </summary>
        event EventHandler<UIEventArgs> DisplayButton1_PressEvent;

        /// <summary>
        /// Event Display Button 2.Press (from panel to Control System)
        /// </summary>
        event EventHandler<UIEventArgs> DisplayButton2_PressEvent;

        /// <summary>
        /// Event Display Power Off Button.Press (from panel to Control System)
        /// </summary>
        event EventHandler<UIEventArgs> DisplayPowerOffButton_PressEvent;

        /// <summary>
        /// Event Display Power On Button.Press (from panel to Control System)
        /// </summary>
        event EventHandler<UIEventArgs> DisplayPowerOnButton_PressEvent;

        /// <summary>
        /// Event Main Page Button.Press (from panel to Control System)
        /// </summary>
        event EventHandler<UIEventArgs> MainPageButton_PressEvent;

        /// <summary>
        /// Display Button 1.Visibility Feedback
        /// </summary>
        /// <param name="callback">The bool delegate to update the panel.</param>
        void DisplayButton1_Visibility_fb(ToolsBoolInputSigDelegate callback);

        /// <summary>
        /// Display Button 1.Visibility Feedback
        /// </summary>
        /// <param name="digital">The bool to update the panel.</param>
        void DisplayButton1_Visibility_fb(bool digital);

        /// <summary>
        /// Display Button 2.Visibility Feedback
        /// </summary>
        /// <param name="callback">The bool delegate to update the panel.</param>
        void DisplayButton2_Visibility_fb(ToolsBoolInputSigDelegate callback);

        /// <summary>
        /// Display Button 2.Visibility Feedback
        /// </summary>
        /// <param name="digital">The bool to update the panel.</param>
        void DisplayButton2_Visibility_fb(bool digital);

        /// <summary>
        /// Tools.VisibilityJoin Feedback
        /// </summary>
        /// <param name="callback">The bool delegate to update the panel.</param>
        void Tools_VisibilityJoin(ToolsBoolInputSigDelegate callback);

        /// <summary>
        /// Tools.VisibilityJoin Feedback
        /// </summary>
        /// <param name="digital">The bool to update the panel.</param>
        void Tools_VisibilityJoin(bool digital);

        /// <summary>
        /// Audio Combine Button.Selected Feedback
        /// </summary>
        /// <param name="callback">The bool delegate to update the panel.</param>
        void AudioCombineButton_Selected(ToolsBoolInputSigDelegate callback);

        /// <summary>
        /// Audio Combine Button.Selected Feedback
        /// </summary>
        /// <param name="digital">The bool to update the panel.</param>
        void AudioCombineButton_Selected(bool digital);

        /// <summary>
        /// Audio Mic Combine Button.Selected Feedback
        /// </summary>
        /// <param name="callback">The bool delegate to update the panel.</param>
        void AudioMicCombineButton_Selected(ToolsBoolInputSigDelegate callback);

        /// <summary>
        /// Audio Mic Combine Button.Selected Feedback
        /// </summary>
        /// <param name="digital">The bool to update the panel.</param>
        void AudioMicCombineButton_Selected(bool digital);

        /// <summary>
        /// Audio Mic Mute Button.Selected Feedback
        /// </summary>
        /// <param name="callback">The bool delegate to update the panel.</param>
        void AudioMicMuteButton_Selected(ToolsBoolInputSigDelegate callback);

        /// <summary>
        /// Audio Mic Mute Button.Selected Feedback
        /// </summary>
        /// <param name="digital">The bool to update the panel.</param>
        void AudioMicMuteButton_Selected(bool digital);

        /// <summary>
        /// Audio Mic Separate Button.Selected Feedback
        /// </summary>
        /// <param name="callback">The bool delegate to update the panel.</param>
        void AudioMicSeparateButton_Selected(ToolsBoolInputSigDelegate callback);

        /// <summary>
        /// Audio Mic Separate Button.Selected Feedback
        /// </summary>
        /// <param name="digital">The bool to update the panel.</param>
        void AudioMicSeparateButton_Selected(bool digital);

        /// <summary>
        /// Audio Mic Unmute Button.Selected Feedback
        /// </summary>
        /// <param name="callback">The bool delegate to update the panel.</param>
        void AudioMicUnmuteButton_Selected(ToolsBoolInputSigDelegate callback);

        /// <summary>
        /// Audio Mic Unmute Button.Selected Feedback
        /// </summary>
        /// <param name="digital">The bool to update the panel.</param>
        void AudioMicUnmuteButton_Selected(bool digital);

        /// <summary>
        /// Audio Prog Mute Button.Selected Feedback
        /// </summary>
        /// <param name="callback">The bool delegate to update the panel.</param>
        void AudioProgMuteButton_Selected(ToolsBoolInputSigDelegate callback);

        /// <summary>
        /// Audio Prog Mute Button.Selected Feedback
        /// </summary>
        /// <param name="digital">The bool to update the panel.</param>
        void AudioProgMuteButton_Selected(bool digital);

        /// <summary>
        /// Audio Prog Unmute Button.Selected Feedback
        /// </summary>
        /// <param name="callback">The bool delegate to update the panel.</param>
        void AudioProgUnmuteButton_Selected(ToolsBoolInputSigDelegate callback);

        /// <summary>
        /// Audio Prog Unmute Button.Selected Feedback
        /// </summary>
        /// <param name="digital">The bool to update the panel.</param>
        void AudioProgUnmuteButton_Selected(bool digital);

        /// <summary>
        /// Audio Separate Button.Selected Feedback
        /// </summary>
        /// <param name="callback">The bool delegate to update the panel.</param>
        void AudioSeparateButton_Selected(ToolsBoolInputSigDelegate callback);

        /// <summary>
        /// Audio Separate Button.Selected Feedback
        /// </summary>
        /// <param name="digital">The bool to update the panel.</param>
        void AudioSeparateButton_Selected(bool digital);

        /// <summary>
        /// Display Button 1.Selected Feedback
        /// </summary>
        /// <param name="callback">The bool delegate to update the panel.</param>
        void DisplayButton1_Selected(ToolsBoolInputSigDelegate callback);

        /// <summary>
        /// Display Button 1.Selected Feedback
        /// </summary>
        /// <param name="digital">The bool to update the panel.</param>
        void DisplayButton1_Selected(bool digital);

        /// <summary>
        /// Display Button 2.Selected Feedback
        /// </summary>
        /// <param name="callback">The bool delegate to update the panel.</param>
        void DisplayButton2_Selected(ToolsBoolInputSigDelegate callback);

        /// <summary>
        /// Display Button 2.Selected Feedback
        /// </summary>
        /// <param name="digital">The bool to update the panel.</param>
        void DisplayButton2_Selected(bool digital);

        /// <summary>
        /// Display Power Off Button.Selected Feedback
        /// </summary>
        /// <param name="callback">The bool delegate to update the panel.</param>
        void DisplayPowerOffButton_Selected(ToolsBoolInputSigDelegate callback);

        /// <summary>
        /// Display Power Off Button.Selected Feedback
        /// </summary>
        /// <param name="digital">The bool to update the panel.</param>
        void DisplayPowerOffButton_Selected(bool digital);

        /// <summary>
        /// Display Power On Button.Selected Feedback
        /// </summary>
        /// <param name="callback">The bool delegate to update the panel.</param>
        void DisplayPowerOnButton_Selected(ToolsBoolInputSigDelegate callback);

        /// <summary>
        /// Display Power On Button.Selected Feedback
        /// </summary>
        /// <param name="digital">The bool to update the panel.</param>
        void DisplayPowerOnButton_Selected(bool digital);

        /// <summary>
        /// Audio Combine Button.Indirect Rich Text Feedback
        /// </summary>
        /// <param name="callback">The <see cref="string"/> delegate to update the panel.</param>
        void AudioCombineButton_IndirectRichText(ToolsStringInputSigDelegate callback);

        /// <summary>
        /// Audio Combine Button.Indirect Rich Text Feedback
        /// </summary>
        /// <param name="serial">The <see cref="string"/> to update the panel.</param>
        void AudioCombineButton_IndirectRichText(string serial);

        /// <summary>
        /// Audio Mic Combine Button.Indirect Rich Text Feedback
        /// </summary>
        /// <param name="callback">The <see cref="string"/> delegate to update the panel.</param>
        void AudioMicCombineButton_IndirectRichText(ToolsStringInputSigDelegate callback);

        /// <summary>
        /// Audio Mic Combine Button.Indirect Rich Text Feedback
        /// </summary>
        /// <param name="serial">The <see cref="string"/> to update the panel.</param>
        void AudioMicCombineButton_IndirectRichText(string serial);

        /// <summary>
        /// Audio Mic Mute Button.Indirect Rich Text Feedback
        /// </summary>
        /// <param name="callback">The <see cref="string"/> delegate to update the panel.</param>
        void AudioMicMuteButton_IndirectRichText(ToolsStringInputSigDelegate callback);

        /// <summary>
        /// Audio Mic Mute Button.Indirect Rich Text Feedback
        /// </summary>
        /// <param name="serial">The <see cref="string"/> to update the panel.</param>
        void AudioMicMuteButton_IndirectRichText(string serial);

        /// <summary>
        /// Audio Mic Separate Button.Indirect Rich Text Feedback
        /// </summary>
        /// <param name="callback">The <see cref="string"/> delegate to update the panel.</param>
        void AudioMicSeparateButton_IndirectRichText(ToolsStringInputSigDelegate callback);

        /// <summary>
        /// Audio Mic Separate Button.Indirect Rich Text Feedback
        /// </summary>
        /// <param name="serial">The <see cref="string"/> to update the panel.</param>
        void AudioMicSeparateButton_IndirectRichText(string serial);

        /// <summary>
        /// Audio Mic Unmute Button.Indirect Rich Text Feedback
        /// </summary>
        /// <param name="callback">The <see cref="string"/> delegate to update the panel.</param>
        void AudioMicUnmuteButton_IndirectRichText(ToolsStringInputSigDelegate callback);

        /// <summary>
        /// Audio Mic Unmute Button.Indirect Rich Text Feedback
        /// </summary>
        /// <param name="serial">The <see cref="string"/> to update the panel.</param>
        void AudioMicUnmuteButton_IndirectRichText(string serial);

        /// <summary>
        /// Audio Prog Mute Button.Indirect Rich Text Feedback
        /// </summary>
        /// <param name="callback">The <see cref="string"/> delegate to update the panel.</param>
        void AudioProgMuteButton_IndirectRichText(ToolsStringInputSigDelegate callback);

        /// <summary>
        /// Audio Prog Mute Button.Indirect Rich Text Feedback
        /// </summary>
        /// <param name="serial">The <see cref="string"/> to update the panel.</param>
        void AudioProgMuteButton_IndirectRichText(string serial);

        /// <summary>
        /// Audio Prog Unmute Button.Indirect Rich Text Feedback
        /// </summary>
        /// <param name="callback">The <see cref="string"/> delegate to update the panel.</param>
        void AudioProgUnmuteButton_IndirectRichText(ToolsStringInputSigDelegate callback);

        /// <summary>
        /// Audio Prog Unmute Button.Indirect Rich Text Feedback
        /// </summary>
        /// <param name="serial">The <see cref="string"/> to update the panel.</param>
        void AudioProgUnmuteButton_IndirectRichText(string serial);

        /// <summary>
        /// Audio Separate Button.Indirect Rich Text Feedback
        /// </summary>
        /// <param name="callback">The <see cref="string"/> delegate to update the panel.</param>
        void AudioSeparateButton_IndirectRichText(ToolsStringInputSigDelegate callback);

        /// <summary>
        /// Audio Separate Button.Indirect Rich Text Feedback
        /// </summary>
        /// <param name="serial">The <see cref="string"/> to update the panel.</param>
        void AudioSeparateButton_IndirectRichText(string serial);

        /// <summary>
        /// Display Button 1.Indirect Rich Text Feedback
        /// </summary>
        /// <param name="callback">The <see cref="string"/> delegate to update the panel.</param>
        void DisplayButton1_IndirectRichText(ToolsStringInputSigDelegate callback);

        /// <summary>
        /// Display Button 1.Indirect Rich Text Feedback
        /// </summary>
        /// <param name="serial">The <see cref="string"/> to update the panel.</param>
        void DisplayButton1_IndirectRichText(string serial);

        /// <summary>
        /// Display Button 2.Indirect Rich Text Feedback
        /// </summary>
        /// <param name="callback">The <see cref="string"/> delegate to update the panel.</param>
        void DisplayButton2_IndirectRichText(ToolsStringInputSigDelegate callback);

        /// <summary>
        /// Display Button 2.Indirect Rich Text Feedback
        /// </summary>
        /// <param name="serial">The <see cref="string"/> to update the panel.</param>
        void DisplayButton2_IndirectRichText(string serial);

        /// <summary>
        /// Screen Resolution.Indirect Rich Text Feedback
        /// </summary>
        /// <param name="callback">The <see cref="string"/> delegate to update the panel.</param>
        void ScreenResolution_IndirectRichText(ToolsStringInputSigDelegate callback);

        /// <summary>
        /// Screen Resolution.Indirect Rich Text Feedback
        /// </summary>
        /// <param name="serial">The <see cref="string"/> to update the panel.</param>
        void ScreenResolution_IndirectRichText(string serial);

        /// <summary>
        /// ComplexComponent Occupancy
        /// </summary>
        SLRCClassroom.Tools.IOccupancy Occupancy { get; }

        /// <summary>
        /// ComplexComponent Projector Hours
        /// </summary>
        SLRCClassroom.Tools.IProjectorHours ProjectorHours { get; }
    }

    /// <summary>
    /// Digital callback used in feedback events.
    /// </summary>
    /// <param name="boolInputSig">The <see cref="BoolInputSig"/> joinInfo data.</param>
    /// <param name="tools">The <see cref="ITools"/> on which to apply the feedback.</param>
    public delegate void ToolsBoolInputSigDelegate(BoolInputSig boolInputSig, ITools tools);
    /// <summary>
    /// Digital callback used in feedback events.
    /// </summary>
    /// <param name="stringInputSig">The <see cref="StringInputSig"/> joinInfo data.</param>
    /// <param name="tools">The <see cref="ITools"/> on which to apply the feedback.</param>
    public delegate void ToolsStringInputSigDelegate(StringInputSig stringInputSig, ITools tools);

    /// <summary>
    /// Tools
    /// </summary>
    internal partial class Tools : ITools, IDisposable
    {
        #region Standard CH5 Component members

        private ComponentMediator ComponentMediator { get; set; }

        public object UserObject { get; set; }

        /// <summary>
        /// Gets the ControlJoinId a.k.a. SmartObjectId.  This Id identifies the extender symbol.
        /// </summary>
        public uint ControlJoinId { get; private set; }

        private IList<BasicTriListWithSmartObject> _devices;

        /// <summary>
        /// Gets the list of devices.
        /// </summary>
        public IList<BasicTriListWithSmartObject> Devices { get { return _devices; } }

        #endregion

        #region Joins

        private static class Joins
        {
            /// <summary>
            /// Digital signals,
            /// </summary>
            internal static class Booleans
            {
                /// <summary>
                /// Output or Event digital joinInfo from panel to Control System: Tools.AudioCombineButton.Press
                /// Audio Combine Button.Press
                /// </summary>
                public const uint AudioCombineButton_PressEvent = 2;

                /// <summary>
                /// Output or Event digital joinInfo from panel to Control System: Tools.AudioMicCombineButton.Press
                /// Audio Mic Combine Button.Press
                /// </summary>
                public const uint AudioMicCombineButton_PressEvent = 3;

                /// <summary>
                /// Output or Event digital joinInfo from panel to Control System: Tools.AudioMicMuteButton.Press
                /// Audio Mic Mute Button.Press
                /// </summary>
                public const uint AudioMicMuteButton_PressEvent = 4;

                /// <summary>
                /// Output or Event digital joinInfo from panel to Control System: Tools.AudioMicSeparateButton.Press
                /// Audio Mic Separate Button.Press
                /// </summary>
                public const uint AudioMicSeparateButton_PressEvent = 5;

                /// <summary>
                /// Output or Event digital joinInfo from panel to Control System: Tools.AudioMicUnmuteButton.Press
                /// Audio Mic Unmute Button.Press
                /// </summary>
                public const uint AudioMicUnmuteButton_PressEvent = 6;

                /// <summary>
                /// Output or Event digital joinInfo from panel to Control System: Tools.AudioProgMuteButton.Press
                /// Audio Prog Mute Button.Press
                /// </summary>
                public const uint AudioProgMuteButton_PressEvent = 7;

                /// <summary>
                /// Output or Event digital joinInfo from panel to Control System: Tools.AudioProgUnmuteButton.Press
                /// Audio Prog Unmute Button.Press
                /// </summary>
                public const uint AudioProgUnmuteButton_PressEvent = 8;

                /// <summary>
                /// Output or Event digital joinInfo from panel to Control System: Tools.AudioSeparateButton.Press
                /// Audio Separate Button.Press
                /// </summary>
                public const uint AudioSeparateButton_PressEvent = 9;

                /// <summary>
                /// Output or Event digital joinInfo from panel to Control System: Tools.DisplayButton1.Press
                /// Display Button 1.Press
                /// </summary>
                public const uint DisplayButton1_PressEvent = 10;

                /// <summary>
                /// Output or Event digital joinInfo from panel to Control System: Tools.DisplayButton2.Press
                /// Display Button 2.Press
                /// </summary>
                public const uint DisplayButton2_PressEvent = 11;

                /// <summary>
                /// Output or Event digital joinInfo from panel to Control System: Tools.DisplayPowerOffButton.Press
                /// Display Power Off Button.Press
                /// </summary>
                public const uint DisplayPowerOffButton_PressEvent = 12;

                /// <summary>
                /// Output or Event digital joinInfo from panel to Control System: Tools.DisplayPowerOnButton.Press
                /// Display Power On Button.Press
                /// </summary>
                public const uint DisplayPowerOnButton_PressEvent = 13;

                /// <summary>
                /// Output or Event digital joinInfo from panel to Control System: Tools.MainPageButton.Press
                /// Main Page Button.Press
                /// </summary>
                public const uint MainPageButton_PressEvent = 14;


                /// <summary>
                /// Input or Feedback digital joinInfo from Control System to panel: Tools.DisplayButton1.Visibility_fb
                /// Display Button 1.Visibility
                /// </summary>
                public const uint DisplayButton1_Visibility_fbState = 1;

                /// <summary>
                /// Input or Feedback digital joinInfo from Control System to panel: Tools.DisplayButton2.Visibility_fb
                /// Display Button 2.Visibility
                /// </summary>
                public const uint DisplayButton2_Visibility_fbState = 2;

                /// <summary>
                /// Input or Feedback digital joinInfo from Control System to panel: ToolsVisibilityJoin
                /// Tools.VisibilityJoin
                /// </summary>
                public const uint Tools_VisibilityJoinState = 3;

                /// <summary>
                /// Input or Feedback digital joinInfo from Control System to panel: Tools.AudioCombineButton.Selected
                /// Audio Combine Button.Selected
                /// </summary>
                public const uint AudioCombineButton_SelectedState = 5;

                /// <summary>
                /// Input or Feedback digital joinInfo from Control System to panel: Tools.AudioMicCombineButton.Selected
                /// Audio Mic Combine Button.Selected
                /// </summary>
                public const uint AudioMicCombineButton_SelectedState = 6;

                /// <summary>
                /// Input or Feedback digital joinInfo from Control System to panel: Tools.AudioMicMuteButton.Selected
                /// Audio Mic Mute Button.Selected
                /// </summary>
                public const uint AudioMicMuteButton_SelectedState = 7;

                /// <summary>
                /// Input or Feedback digital joinInfo from Control System to panel: Tools.AudioMicSeparateButton.Selected
                /// Audio Mic Separate Button.Selected
                /// </summary>
                public const uint AudioMicSeparateButton_SelectedState = 8;

                /// <summary>
                /// Input or Feedback digital joinInfo from Control System to panel: Tools.AudioMicUnmuteButton.Selected
                /// Audio Mic Unmute Button.Selected
                /// </summary>
                public const uint AudioMicUnmuteButton_SelectedState = 9;

                /// <summary>
                /// Input or Feedback digital joinInfo from Control System to panel: Tools.AudioProgMuteButton.Selected
                /// Audio Prog Mute Button.Selected
                /// </summary>
                public const uint AudioProgMuteButton_SelectedState = 10;

                /// <summary>
                /// Input or Feedback digital joinInfo from Control System to panel: Tools.AudioProgUnmuteButton.Selected
                /// Audio Prog Unmute Button.Selected
                /// </summary>
                public const uint AudioProgUnmuteButton_SelectedState = 11;

                /// <summary>
                /// Input or Feedback digital joinInfo from Control System to panel: Tools.AudioSeparateButton.Selected
                /// Audio Separate Button.Selected
                /// </summary>
                public const uint AudioSeparateButton_SelectedState = 12;

                /// <summary>
                /// Input or Feedback digital joinInfo from Control System to panel: Tools.DisplayButton1.Selected
                /// Display Button 1.Selected
                /// </summary>
                public const uint DisplayButton1_SelectedState = 13;

                /// <summary>
                /// Input or Feedback digital joinInfo from Control System to panel: Tools.DisplayButton2.Selected
                /// Display Button 2.Selected
                /// </summary>
                public const uint DisplayButton2_SelectedState = 14;

                /// <summary>
                /// Input or Feedback digital joinInfo from Control System to panel: Tools.DisplayPowerOffButton.Selected
                /// Display Power Off Button.Selected
                /// </summary>
                public const uint DisplayPowerOffButton_SelectedState = 15;

                /// <summary>
                /// Input or Feedback digital joinInfo from Control System to panel: Tools.DisplayPowerOnButton.Selected
                /// Display Power On Button.Selected
                /// </summary>
                public const uint DisplayPowerOnButton_SelectedState = 16;

            }
            /// <summary>
            /// Serial signals.
            /// </summary>
            internal static class Strings
            {

                /// <summary>
                /// Input or Feedback serial joinInfo from Control System to panel: Tools.AudioCombineButton.IndirectRichText
                /// Audio Combine Button.Indirect Rich Text
                /// </summary>
                public const uint AudioCombineButton_IndirectRichTextState = 1;
                /// <summary>
                /// Input or Feedback serial joinInfo from Control System to panel: Tools.AudioMicCombineButton.IndirectRichText
                /// Audio Mic Combine Button.Indirect Rich Text
                /// </summary>
                public const uint AudioMicCombineButton_IndirectRichTextState = 2;
                /// <summary>
                /// Input or Feedback serial joinInfo from Control System to panel: Tools.AudioMicMuteButton.IndirectRichText
                /// Audio Mic Mute Button.Indirect Rich Text
                /// </summary>
                public const uint AudioMicMuteButton_IndirectRichTextState = 3;
                /// <summary>
                /// Input or Feedback serial joinInfo from Control System to panel: Tools.AudioMicSeparateButton.IndirectRichText
                /// Audio Mic Separate Button.Indirect Rich Text
                /// </summary>
                public const uint AudioMicSeparateButton_IndirectRichTextState = 4;
                /// <summary>
                /// Input or Feedback serial joinInfo from Control System to panel: Tools.AudioMicUnmuteButton.IndirectRichText
                /// Audio Mic Unmute Button.Indirect Rich Text
                /// </summary>
                public const uint AudioMicUnmuteButton_IndirectRichTextState = 5;
                /// <summary>
                /// Input or Feedback serial joinInfo from Control System to panel: Tools.AudioProgMuteButton.IndirectRichText
                /// Audio Prog Mute Button.Indirect Rich Text
                /// </summary>
                public const uint AudioProgMuteButton_IndirectRichTextState = 6;
                /// <summary>
                /// Input or Feedback serial joinInfo from Control System to panel: Tools.AudioProgUnmuteButton.IndirectRichText
                /// Audio Prog Unmute Button.Indirect Rich Text
                /// </summary>
                public const uint AudioProgUnmuteButton_IndirectRichTextState = 7;
                /// <summary>
                /// Input or Feedback serial joinInfo from Control System to panel: Tools.AudioSeparateButton.IndirectRichText
                /// Audio Separate Button.Indirect Rich Text
                /// </summary>
                public const uint AudioSeparateButton_IndirectRichTextState = 8;
                /// <summary>
                /// Input or Feedback serial joinInfo from Control System to panel: Tools.DisplayButton1.IndirectRichText
                /// Display Button 1.Indirect Rich Text
                /// </summary>
                public const uint DisplayButton1_IndirectRichTextState = 9;
                /// <summary>
                /// Input or Feedback serial joinInfo from Control System to panel: Tools.DisplayButton2.IndirectRichText
                /// Display Button 2.Indirect Rich Text
                /// </summary>
                public const uint DisplayButton2_IndirectRichTextState = 10;
                /// <summary>
                /// Input or Feedback serial joinInfo from Control System to panel: Tools.ScreenResolution.IndirectRichText
                /// Screen Resolution.Indirect Rich Text
                /// </summary>
                public const uint ScreenResolution_IndirectRichTextState = 11;
            }
        }

        #endregion

        #region Construction and Initialization

        /// <summary>
        /// Initializes a new instance of the <see cref="Tools"/> component class.
        /// </summary>
        /// <param name="componentMediator">The <see cref="ComponentMediator"/> used to instantiate the component.</param>
        /// <param name="controlJoinId">The SmartObjectId at which to create the component.</param>
        /// <param name="itemCount">The number of items.</param>
        internal Tools(ComponentMediator componentMediator, uint controlJoinId, uint? itemCount)
        {
            ComponentMediator = componentMediator;
            Initialize(controlJoinId, itemCount);
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="Tools"/> component class.
        /// </summary>
        /// <param name="componentMediator">The <see cref="ComponentMediator"/> used to instantiate the component.</param>
        /// <param name="controlJoinId">The SmartObjectId at which to create the component.</param>
        internal Tools(ComponentMediator componentMediator, uint controlJoinId) : this(componentMediator, controlJoinId, null)
        {
        }

        /// <summary>
        /// Initializes a new instance with default itemCount.
        /// </summary>
        /// <param name="controlJoinId">The SmartObjectId at which to create the component.</param>
        private void Initialize(uint controlJoinId)
        {
            Initialize(controlJoinId, null);
        }

        private Dictionary<string, Indexes> _indexLookup = new Dictionary<string, Indexes>();

        /// <summary>
        /// Initializes a new instance of the <see cref="Tools"/> component class.
        /// </summary>
        /// <param name="controlJoinId">The SmartObjectId at which to create the component.</param>
        /// <param name="itemCount">The number of items.</param>
        private void Initialize(uint controlJoinId, uint? itemCount)
        {
            ControlJoinId = controlJoinId; 
 
            _devices = new List<BasicTriListWithSmartObject>(); 
 
            ComponentMediator.ConfigureBooleanEvent(controlJoinId, Joins.Booleans.AudioCombineButton_PressEvent, onAudioCombineButton_Press);
            ComponentMediator.ConfigureBooleanEvent(controlJoinId, Joins.Booleans.AudioMicCombineButton_PressEvent, onAudioMicCombineButton_Press);
            ComponentMediator.ConfigureBooleanEvent(controlJoinId, Joins.Booleans.AudioMicMuteButton_PressEvent, onAudioMicMuteButton_Press);
            ComponentMediator.ConfigureBooleanEvent(controlJoinId, Joins.Booleans.AudioMicSeparateButton_PressEvent, onAudioMicSeparateButton_Press);
            ComponentMediator.ConfigureBooleanEvent(controlJoinId, Joins.Booleans.AudioMicUnmuteButton_PressEvent, onAudioMicUnmuteButton_Press);
            ComponentMediator.ConfigureBooleanEvent(controlJoinId, Joins.Booleans.AudioProgMuteButton_PressEvent, onAudioProgMuteButton_Press);
            ComponentMediator.ConfigureBooleanEvent(controlJoinId, Joins.Booleans.AudioProgUnmuteButton_PressEvent, onAudioProgUnmuteButton_Press);
            ComponentMediator.ConfigureBooleanEvent(controlJoinId, Joins.Booleans.AudioSeparateButton_PressEvent, onAudioSeparateButton_Press);
            ComponentMediator.ConfigureBooleanEvent(controlJoinId, Joins.Booleans.DisplayButton1_PressEvent, onDisplayButton1_Press);
            ComponentMediator.ConfigureBooleanEvent(controlJoinId, Joins.Booleans.DisplayButton2_PressEvent, onDisplayButton2_Press);
            ComponentMediator.ConfigureBooleanEvent(controlJoinId, Joins.Booleans.DisplayPowerOffButton_PressEvent, onDisplayPowerOffButton_Press);
            ComponentMediator.ConfigureBooleanEvent(controlJoinId, Joins.Booleans.DisplayPowerOnButton_PressEvent, onDisplayPowerOnButton_Press);
            ComponentMediator.ConfigureBooleanEvent(controlJoinId, Joins.Booleans.MainPageButton_PressEvent, onMainPageButton_Press);
            Occupancy = new SLRCClassroom.Tools.Occupancy(ComponentMediator, 7);
            ProjectorHours = new SLRCClassroom.Tools.ProjectorHours(ComponentMediator, 8);
        }

        public void AddDevice(BasicTriListWithSmartObject device)
        {
            Devices.Add(device);
            ComponentMediator.HookSmartObjectEvents(device.SmartObjects[ControlJoinId]);

            ((SLRCClassroom.Tools.Occupancy)Occupancy).AddDevice(device);

            ((SLRCClassroom.Tools.ProjectorHours)ProjectorHours).AddDevice(device);
        }

        public void RemoveDevice(BasicTriListWithSmartObject device)
        {
            Devices.Remove(device);
            ComponentMediator.UnHookSmartObjectEvents(device.SmartObjects[ControlJoinId]);

            ((SLRCClassroom.Tools.Occupancy)Occupancy).RemoveDevice(device);

            ((SLRCClassroom.Tools.ProjectorHours)ProjectorHours).RemoveDevice(device);
        }

        #endregion

        #region CH5 Contract

        /// <inheritdoc/>
        public event EventHandler<UIEventArgs> AudioCombineButton_PressEvent;
        private void onAudioCombineButton_Press(SmartObjectEventArgs eventArgs)
        {
            EventHandler<UIEventArgs> handler = AudioCombineButton_PressEvent;
            if (handler != null)
                handler(this, UIEventArgs.CreateEventArgs(eventArgs));
        }

        /// <inheritdoc/>
        public event EventHandler<UIEventArgs> AudioMicCombineButton_PressEvent;
        private void onAudioMicCombineButton_Press(SmartObjectEventArgs eventArgs)
        {
            EventHandler<UIEventArgs> handler = AudioMicCombineButton_PressEvent;
            if (handler != null)
                handler(this, UIEventArgs.CreateEventArgs(eventArgs));
        }

        /// <inheritdoc/>
        public event EventHandler<UIEventArgs> AudioMicMuteButton_PressEvent;
        private void onAudioMicMuteButton_Press(SmartObjectEventArgs eventArgs)
        {
            EventHandler<UIEventArgs> handler = AudioMicMuteButton_PressEvent;
            if (handler != null)
                handler(this, UIEventArgs.CreateEventArgs(eventArgs));
        }

        /// <inheritdoc/>
        public event EventHandler<UIEventArgs> AudioMicSeparateButton_PressEvent;
        private void onAudioMicSeparateButton_Press(SmartObjectEventArgs eventArgs)
        {
            EventHandler<UIEventArgs> handler = AudioMicSeparateButton_PressEvent;
            if (handler != null)
                handler(this, UIEventArgs.CreateEventArgs(eventArgs));
        }

        /// <inheritdoc/>
        public event EventHandler<UIEventArgs> AudioMicUnmuteButton_PressEvent;
        private void onAudioMicUnmuteButton_Press(SmartObjectEventArgs eventArgs)
        {
            EventHandler<UIEventArgs> handler = AudioMicUnmuteButton_PressEvent;
            if (handler != null)
                handler(this, UIEventArgs.CreateEventArgs(eventArgs));
        }

        /// <inheritdoc/>
        public event EventHandler<UIEventArgs> AudioProgMuteButton_PressEvent;
        private void onAudioProgMuteButton_Press(SmartObjectEventArgs eventArgs)
        {
            EventHandler<UIEventArgs> handler = AudioProgMuteButton_PressEvent;
            if (handler != null)
                handler(this, UIEventArgs.CreateEventArgs(eventArgs));
        }

        /// <inheritdoc/>
        public event EventHandler<UIEventArgs> AudioProgUnmuteButton_PressEvent;
        private void onAudioProgUnmuteButton_Press(SmartObjectEventArgs eventArgs)
        {
            EventHandler<UIEventArgs> handler = AudioProgUnmuteButton_PressEvent;
            if (handler != null)
                handler(this, UIEventArgs.CreateEventArgs(eventArgs));
        }

        /// <inheritdoc/>
        public event EventHandler<UIEventArgs> AudioSeparateButton_PressEvent;
        private void onAudioSeparateButton_Press(SmartObjectEventArgs eventArgs)
        {
            EventHandler<UIEventArgs> handler = AudioSeparateButton_PressEvent;
            if (handler != null)
                handler(this, UIEventArgs.CreateEventArgs(eventArgs));
        }

        /// <inheritdoc/>
        public event EventHandler<UIEventArgs> DisplayButton1_PressEvent;
        private void onDisplayButton1_Press(SmartObjectEventArgs eventArgs)
        {
            EventHandler<UIEventArgs> handler = DisplayButton1_PressEvent;
            if (handler != null)
                handler(this, UIEventArgs.CreateEventArgs(eventArgs));
        }

        /// <inheritdoc/>
        public event EventHandler<UIEventArgs> DisplayButton2_PressEvent;
        private void onDisplayButton2_Press(SmartObjectEventArgs eventArgs)
        {
            EventHandler<UIEventArgs> handler = DisplayButton2_PressEvent;
            if (handler != null)
                handler(this, UIEventArgs.CreateEventArgs(eventArgs));
        }

        /// <inheritdoc/>
        public event EventHandler<UIEventArgs> DisplayPowerOffButton_PressEvent;
        private void onDisplayPowerOffButton_Press(SmartObjectEventArgs eventArgs)
        {
            EventHandler<UIEventArgs> handler = DisplayPowerOffButton_PressEvent;
            if (handler != null)
                handler(this, UIEventArgs.CreateEventArgs(eventArgs));
        }

        /// <inheritdoc/>
        public event EventHandler<UIEventArgs> DisplayPowerOnButton_PressEvent;
        private void onDisplayPowerOnButton_Press(SmartObjectEventArgs eventArgs)
        {
            EventHandler<UIEventArgs> handler = DisplayPowerOnButton_PressEvent;
            if (handler != null)
                handler(this, UIEventArgs.CreateEventArgs(eventArgs));
        }

        /// <inheritdoc/>
        public event EventHandler<UIEventArgs> MainPageButton_PressEvent;
        private void onMainPageButton_Press(SmartObjectEventArgs eventArgs)
        {
            EventHandler<UIEventArgs> handler = MainPageButton_PressEvent;
            if (handler != null)
                handler(this, UIEventArgs.CreateEventArgs(eventArgs));
        }

        /// <inheritdoc/>
        public void AudioCombineButton_Selected(ToolsBoolInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].BooleanInput[Joins.Booleans.AudioCombineButton_SelectedState], this);
            }
        }

        /// <inheritdoc/>
        public void AudioCombineButton_Selected(bool digital)
        {
            AudioCombineButton_Selected((sig, component) => sig.BoolValue = digital);
        }
        /// <inheritdoc/>
        public void AudioMicCombineButton_Selected(ToolsBoolInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].BooleanInput[Joins.Booleans.AudioMicCombineButton_SelectedState], this);
            }
        }

        /// <inheritdoc/>
        public void AudioMicCombineButton_Selected(bool digital)
        {
            AudioMicCombineButton_Selected((sig, component) => sig.BoolValue = digital);
        }
        /// <inheritdoc/>
        public void AudioMicMuteButton_Selected(ToolsBoolInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].BooleanInput[Joins.Booleans.AudioMicMuteButton_SelectedState], this);
            }
        }

        /// <inheritdoc/>
        public void AudioMicMuteButton_Selected(bool digital)
        {
            AudioMicMuteButton_Selected((sig, component) => sig.BoolValue = digital);
        }
        /// <inheritdoc/>
        public void AudioMicSeparateButton_Selected(ToolsBoolInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].BooleanInput[Joins.Booleans.AudioMicSeparateButton_SelectedState], this);
            }
        }

        /// <inheritdoc/>
        public void AudioMicSeparateButton_Selected(bool digital)
        {
            AudioMicSeparateButton_Selected((sig, component) => sig.BoolValue = digital);
        }
        /// <inheritdoc/>
        public void AudioMicUnmuteButton_Selected(ToolsBoolInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].BooleanInput[Joins.Booleans.AudioMicUnmuteButton_SelectedState], this);
            }
        }

        /// <inheritdoc/>
        public void AudioMicUnmuteButton_Selected(bool digital)
        {
            AudioMicUnmuteButton_Selected((sig, component) => sig.BoolValue = digital);
        }
        /// <inheritdoc/>
        public void AudioProgMuteButton_Selected(ToolsBoolInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].BooleanInput[Joins.Booleans.AudioProgMuteButton_SelectedState], this);
            }
        }

        /// <inheritdoc/>
        public void AudioProgMuteButton_Selected(bool digital)
        {
            AudioProgMuteButton_Selected((sig, component) => sig.BoolValue = digital);
        }
        /// <inheritdoc/>
        public void AudioProgUnmuteButton_Selected(ToolsBoolInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].BooleanInput[Joins.Booleans.AudioProgUnmuteButton_SelectedState], this);
            }
        }

        /// <inheritdoc/>
        public void AudioProgUnmuteButton_Selected(bool digital)
        {
            AudioProgUnmuteButton_Selected((sig, component) => sig.BoolValue = digital);
        }
        /// <inheritdoc/>
        public void AudioSeparateButton_Selected(ToolsBoolInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].BooleanInput[Joins.Booleans.AudioSeparateButton_SelectedState], this);
            }
        }

        /// <inheritdoc/>
        public void AudioSeparateButton_Selected(bool digital)
        {
            AudioSeparateButton_Selected((sig, component) => sig.BoolValue = digital);
        }
        /// <inheritdoc/>
        public void DisplayButton1_Selected(ToolsBoolInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].BooleanInput[Joins.Booleans.DisplayButton1_SelectedState], this);
            }
        }

        /// <inheritdoc/>
        public void DisplayButton1_Selected(bool digital)
        {
            DisplayButton1_Selected((sig, component) => sig.BoolValue = digital);
        }
        /// <inheritdoc/>
        public void DisplayButton1_Visibility_fb(ToolsBoolInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].BooleanInput[Joins.Booleans.DisplayButton1_Visibility_fbState], this);
            }
        }

        /// <inheritdoc/>
        public void DisplayButton1_Visibility_fb(bool digital)
        {
            DisplayButton1_Visibility_fb((sig, component) => sig.BoolValue = digital);
        }
        /// <inheritdoc/>
        public void DisplayButton2_Selected(ToolsBoolInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].BooleanInput[Joins.Booleans.DisplayButton2_SelectedState], this);
            }
        }

        /// <inheritdoc/>
        public void DisplayButton2_Selected(bool digital)
        {
            DisplayButton2_Selected((sig, component) => sig.BoolValue = digital);
        }
        /// <inheritdoc/>
        public void DisplayButton2_Visibility_fb(ToolsBoolInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].BooleanInput[Joins.Booleans.DisplayButton2_Visibility_fbState], this);
            }
        }

        /// <inheritdoc/>
        public void DisplayButton2_Visibility_fb(bool digital)
        {
            DisplayButton2_Visibility_fb((sig, component) => sig.BoolValue = digital);
        }
        /// <inheritdoc/>
        public void DisplayPowerOffButton_Selected(ToolsBoolInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].BooleanInput[Joins.Booleans.DisplayPowerOffButton_SelectedState], this);
            }
        }

        /// <inheritdoc/>
        public void DisplayPowerOffButton_Selected(bool digital)
        {
            DisplayPowerOffButton_Selected((sig, component) => sig.BoolValue = digital);
        }
        /// <inheritdoc/>
        public void DisplayPowerOnButton_Selected(ToolsBoolInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].BooleanInput[Joins.Booleans.DisplayPowerOnButton_SelectedState], this);
            }
        }

        /// <inheritdoc/>
        public void DisplayPowerOnButton_Selected(bool digital)
        {
            DisplayPowerOnButton_Selected((sig, component) => sig.BoolValue = digital);
        }
        /// <inheritdoc/>
        public void Tools_VisibilityJoin(ToolsBoolInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].BooleanInput[Joins.Booleans.Tools_VisibilityJoinState], this);
            }
        }

        /// <inheritdoc/>
        public void Tools_VisibilityJoin(bool digital)
        {
            Tools_VisibilityJoin((sig, component) => sig.BoolValue = digital);
        }


        /// <inheritdoc/>
        public void AudioCombineButton_IndirectRichText(ToolsStringInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].StringInput[Joins.Strings.AudioCombineButton_IndirectRichTextState], this);
            }
        }

        /// <inheritdoc/>
        public void AudioCombineButton_IndirectRichText(string serial)
        {
            AudioCombineButton_IndirectRichText((sig, component) => sig.StringValue = serial);
        }
        /// <inheritdoc/>
        public void AudioMicCombineButton_IndirectRichText(ToolsStringInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].StringInput[Joins.Strings.AudioMicCombineButton_IndirectRichTextState], this);
            }
        }

        /// <inheritdoc/>
        public void AudioMicCombineButton_IndirectRichText(string serial)
        {
            AudioMicCombineButton_IndirectRichText((sig, component) => sig.StringValue = serial);
        }
        /// <inheritdoc/>
        public void AudioMicMuteButton_IndirectRichText(ToolsStringInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].StringInput[Joins.Strings.AudioMicMuteButton_IndirectRichTextState], this);
            }
        }

        /// <inheritdoc/>
        public void AudioMicMuteButton_IndirectRichText(string serial)
        {
            AudioMicMuteButton_IndirectRichText((sig, component) => sig.StringValue = serial);
        }
        /// <inheritdoc/>
        public void AudioMicSeparateButton_IndirectRichText(ToolsStringInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].StringInput[Joins.Strings.AudioMicSeparateButton_IndirectRichTextState], this);
            }
        }

        /// <inheritdoc/>
        public void AudioMicSeparateButton_IndirectRichText(string serial)
        {
            AudioMicSeparateButton_IndirectRichText((sig, component) => sig.StringValue = serial);
        }
        /// <inheritdoc/>
        public void AudioMicUnmuteButton_IndirectRichText(ToolsStringInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].StringInput[Joins.Strings.AudioMicUnmuteButton_IndirectRichTextState], this);
            }
        }

        /// <inheritdoc/>
        public void AudioMicUnmuteButton_IndirectRichText(string serial)
        {
            AudioMicUnmuteButton_IndirectRichText((sig, component) => sig.StringValue = serial);
        }
        /// <inheritdoc/>
        public void AudioProgMuteButton_IndirectRichText(ToolsStringInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].StringInput[Joins.Strings.AudioProgMuteButton_IndirectRichTextState], this);
            }
        }

        /// <inheritdoc/>
        public void AudioProgMuteButton_IndirectRichText(string serial)
        {
            AudioProgMuteButton_IndirectRichText((sig, component) => sig.StringValue = serial);
        }
        /// <inheritdoc/>
        public void AudioProgUnmuteButton_IndirectRichText(ToolsStringInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].StringInput[Joins.Strings.AudioProgUnmuteButton_IndirectRichTextState], this);
            }
        }

        /// <inheritdoc/>
        public void AudioProgUnmuteButton_IndirectRichText(string serial)
        {
            AudioProgUnmuteButton_IndirectRichText((sig, component) => sig.StringValue = serial);
        }
        /// <inheritdoc/>
        public void AudioSeparateButton_IndirectRichText(ToolsStringInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].StringInput[Joins.Strings.AudioSeparateButton_IndirectRichTextState], this);
            }
        }

        /// <inheritdoc/>
        public void AudioSeparateButton_IndirectRichText(string serial)
        {
            AudioSeparateButton_IndirectRichText((sig, component) => sig.StringValue = serial);
        }
        /// <inheritdoc/>
        public void DisplayButton1_IndirectRichText(ToolsStringInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].StringInput[Joins.Strings.DisplayButton1_IndirectRichTextState], this);
            }
        }

        /// <inheritdoc/>
        public void DisplayButton1_IndirectRichText(string serial)
        {
            DisplayButton1_IndirectRichText((sig, component) => sig.StringValue = serial);
        }
        /// <inheritdoc/>
        public void DisplayButton2_IndirectRichText(ToolsStringInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].StringInput[Joins.Strings.DisplayButton2_IndirectRichTextState], this);
            }
        }

        /// <inheritdoc/>
        public void DisplayButton2_IndirectRichText(string serial)
        {
            DisplayButton2_IndirectRichText((sig, component) => sig.StringValue = serial);
        }
        /// <inheritdoc/>
        public void ScreenResolution_IndirectRichText(ToolsStringInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].StringInput[Joins.Strings.ScreenResolution_IndirectRichTextState], this);
            }
        }

        /// <inheritdoc/>
        public void ScreenResolution_IndirectRichText(string serial)
        {
            ScreenResolution_IndirectRichText((sig, component) => sig.StringValue = serial);
        }

        /// <summary>
        /// ComplexComponent Occupancy
        /// </summary>
        public SLRCClassroom.Tools.IOccupancy Occupancy { get; private set; }

        /// <summary>
        /// ComplexComponent ProjectorHours
        /// </summary>
        public SLRCClassroom.Tools.IProjectorHours ProjectorHours { get; private set; }

        #endregion

        #region Overrides

        public override int GetHashCode()
        {
            return (int)ControlJoinId;
        }

        public override string ToString()
        {
            return string.Format("Contract: {0} Component: {1} HashCode: {2} {3}", "Tools", GetType().Name, GetHashCode(), UserObject != null ? "UserObject: " + UserObject : null);
        }

        #endregion

        #region IDisposable

        public bool IsDisposed { get; set; }

        public void Dispose()
        {
            if (IsDisposed)
                return;

            IsDisposed = true;

            AudioCombineButton_PressEvent = null;
            AudioMicCombineButton_PressEvent = null;
            AudioMicMuteButton_PressEvent = null;
            AudioMicSeparateButton_PressEvent = null;
            AudioMicUnmuteButton_PressEvent = null;
            AudioProgMuteButton_PressEvent = null;
            AudioProgUnmuteButton_PressEvent = null;
            AudioSeparateButton_PressEvent = null;
            DisplayButton1_PressEvent = null;
            DisplayButton2_PressEvent = null;
            DisplayPowerOffButton_PressEvent = null;
            DisplayPowerOnButton_PressEvent = null;
            MainPageButton_PressEvent = null;
        }

        #endregion
    }
}
