//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by CrestronConstruct.
//     AppHost:     2.601.10.0
//     UI Plugin:   1.4201.17.0
//
//     Project:     SLRC-Tech
//     Version:     1.0.0.0
//     Sdk:         CH5:2.16.0
//     Strategy:    Modern
//     IndexOnly:   False
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq;
using Crestron.SimplSharp;
using Crestron.SimplSharpPro;
using Crestron.SimplSharpPro.DeviceSupport;
using SLRCTech;

namespace SLRCTech.Settings
{

    /// <summary>
    /// BuildingMute
    /// </summary>
    public partial interface IBuildingMute 
    {
        object UserObject { get; set; }

        /// <summary>
        /// Event Settings.BuildingMute.Mute Off Button.Press (from panel to Control System)
        /// </summary>
        event EventHandler<UIEventArgs> MuteOffButton_PressEvent;

        /// <summary>
        /// Event Settings.BuildingMute.Mute On Button.Press (from panel to Control System)
        /// </summary>
        event EventHandler<UIEventArgs> MuteOnButton_PressEvent;

        /// <summary>
        /// Settings.BuildingMute.Building Mute Status.Visibility Feedback
        /// </summary>
        /// <param name="callback">The bool delegate to update the panel.</param>
        void BuildingMuteStatus_Visibility_fb(BuildingMuteBoolInputSigDelegate callback);

        /// <summary>
        /// Settings.BuildingMute.Building Mute Status.Visibility Feedback
        /// </summary>
        /// <param name="digital">The bool to update the panel.</param>
        void BuildingMuteStatus_Visibility_fb(bool digital);

        /// <summary>
        /// Settings.BuildingMute.Mute Off Button.Enable Feedback
        /// </summary>
        /// <param name="callback">The bool delegate to update the panel.</param>
        void MuteOffButton_Enable(BuildingMuteBoolInputSigDelegate callback);

        /// <summary>
        /// Settings.BuildingMute.Mute Off Button.Enable Feedback
        /// </summary>
        /// <param name="digital">The bool to update the panel.</param>
        void MuteOffButton_Enable(bool digital);

        /// <summary>
        /// Settings.BuildingMute.Mute On Button.Enable Feedback
        /// </summary>
        /// <param name="callback">The bool delegate to update the panel.</param>
        void MuteOnButton_Enable(BuildingMuteBoolInputSigDelegate callback);

        /// <summary>
        /// Settings.BuildingMute.Mute On Button.Enable Feedback
        /// </summary>
        /// <param name="digital">The bool to update the panel.</param>
        void MuteOnButton_Enable(bool digital);

        /// <summary>
        /// Settings.BuildingMute.Mute Off Button.Selected Feedback
        /// </summary>
        /// <param name="callback">The bool delegate to update the panel.</param>
        void MuteOffButton_Selected(BuildingMuteBoolInputSigDelegate callback);

        /// <summary>
        /// Settings.BuildingMute.Mute Off Button.Selected Feedback
        /// </summary>
        /// <param name="digital">The bool to update the panel.</param>
        void MuteOffButton_Selected(bool digital);

        /// <summary>
        /// Settings.BuildingMute.Mute On Button.Selected Feedback
        /// </summary>
        /// <param name="callback">The bool delegate to update the panel.</param>
        void MuteOnButton_Selected(BuildingMuteBoolInputSigDelegate callback);

        /// <summary>
        /// Settings.BuildingMute.Mute On Button.Selected Feedback
        /// </summary>
        /// <param name="digital">The bool to update the panel.</param>
        void MuteOnButton_Selected(bool digital);

        /// <summary>
        /// Settings.BuildingMute.Building Mute Status.Indirect Rich Text Feedback
        /// </summary>
        /// <param name="callback">The <see cref="string"/> delegate to update the panel.</param>
        void BuildingMuteStatus_IndirectRichText(BuildingMuteStringInputSigDelegate callback);

        /// <summary>
        /// Settings.BuildingMute.Building Mute Status.Indirect Rich Text Feedback
        /// </summary>
        /// <param name="serial">The <see cref="string"/> to update the panel.</param>
        void BuildingMuteStatus_IndirectRichText(string serial);

        /// <summary>
        /// Settings.BuildingMute.Building Mute Text.Indirect Rich Text Feedback
        /// </summary>
        /// <param name="callback">The <see cref="string"/> delegate to update the panel.</param>
        void BuildingMuteText_IndirectRichText(BuildingMuteStringInputSigDelegate callback);

        /// <summary>
        /// Settings.BuildingMute.Building Mute Text.Indirect Rich Text Feedback
        /// </summary>
        /// <param name="serial">The <see cref="string"/> to update the panel.</param>
        void BuildingMuteText_IndirectRichText(string serial);
    }

    /// <summary>
    /// Digital callback used in feedback events.
    /// </summary>
    /// <param name="boolInputSig">The <see cref="BoolInputSig"/> joinInfo data.</param>
    /// <param name="buildingmute">The <see cref="IBuildingMute"/> on which to apply the feedback.</param>
    public delegate void BuildingMuteBoolInputSigDelegate(BoolInputSig boolInputSig, IBuildingMute buildingmute);
    /// <summary>
    /// Digital callback used in feedback events.
    /// </summary>
    /// <param name="stringInputSig">The <see cref="StringInputSig"/> joinInfo data.</param>
    /// <param name="buildingmute">The <see cref="IBuildingMute"/> on which to apply the feedback.</param>
    public delegate void BuildingMuteStringInputSigDelegate(StringInputSig stringInputSig, IBuildingMute buildingmute);

    /// <summary>
    /// BuildingMute
    /// </summary>
    internal partial class BuildingMute : IBuildingMute, IDisposable
    {
        #region Standard CH5 Component members

        private ComponentMediator ComponentMediator { get; set; }

        public object UserObject { get; set; }

        /// <summary>
        /// Gets the ControlJoinId a.k.a. SmartObjectId.  This Id identifies the extender symbol.
        /// </summary>
        public uint ControlJoinId { get; private set; }

        private IList<BasicTriListWithSmartObject> _devices;

        /// <summary>
        /// Gets the list of devices.
        /// </summary>
        public IList<BasicTriListWithSmartObject> Devices { get { return _devices; } }

        #endregion

        #region Joins

        private static class Joins
        {
            /// <summary>
            /// Digital signals,
            /// </summary>
            internal static class Booleans
            {
                /// <summary>
                /// Output or Event digital joinInfo from panel to Control System: Settings.BuildingMute.MuteOffButton.Press
                /// Settings.BuildingMute.Mute Off Button.Press
                /// </summary>
                public const uint MuteOffButton_PressEvent = 1;

                /// <summary>
                /// Output or Event digital joinInfo from panel to Control System: Settings.BuildingMute.MuteOnButton.Press
                /// Settings.BuildingMute.Mute On Button.Press
                /// </summary>
                public const uint MuteOnButton_PressEvent = 2;


                /// <summary>
                /// Input or Feedback digital joinInfo from Control System to panel: Settings.BuildingMute.BuildingMuteStatus.Visibility_fb
                /// Settings.BuildingMute.Building Mute Status.Visibility
                /// </summary>
                public const uint BuildingMuteStatus_Visibility_fbState = 1;

                /// <summary>
                /// Input or Feedback digital joinInfo from Control System to panel: Settings.BuildingMute.MuteOffButton.Enable
                /// Settings.BuildingMute.Mute Off Button.Enable
                /// </summary>
                public const uint MuteOffButton_EnableState = 2;

                /// <summary>
                /// Input or Feedback digital joinInfo from Control System to panel: Settings.BuildingMute.MuteOnButton.Enable
                /// Settings.BuildingMute.Mute On Button.Enable
                /// </summary>
                public const uint MuteOnButton_EnableState = 3;

                /// <summary>
                /// Input or Feedback digital joinInfo from Control System to panel: Settings.BuildingMute.MuteOffButton.Selected
                /// Settings.BuildingMute.Mute Off Button.Selected
                /// </summary>
                public const uint MuteOffButton_SelectedState = 4;

                /// <summary>
                /// Input or Feedback digital joinInfo from Control System to panel: Settings.BuildingMute.MuteOnButton.Selected
                /// Settings.BuildingMute.Mute On Button.Selected
                /// </summary>
                public const uint MuteOnButton_SelectedState = 5;

            }
            /// <summary>
            /// Serial signals.
            /// </summary>
            internal static class Strings
            {

                /// <summary>
                /// Input or Feedback serial joinInfo from Control System to panel: Settings.BuildingMute.BuildingMuteStatus.IndirectRichText
                /// Settings.BuildingMute.Building Mute Status.Indirect Rich Text
                /// </summary>
                public const uint BuildingMuteStatus_IndirectRichTextState = 1;
                /// <summary>
                /// Input or Feedback serial joinInfo from Control System to panel: Settings.BuildingMute.BuildingMuteText.IndirectRichText
                /// Settings.BuildingMute.Building Mute Text.Indirect Rich Text
                /// </summary>
                public const uint BuildingMuteText_IndirectRichTextState = 2;
            }
        }

        #endregion

        #region Construction and Initialization

        /// <summary>
        /// Initializes a new instance of the <see cref="BuildingMute"/> component class.
        /// </summary>
        /// <param name="componentMediator">The <see cref="ComponentMediator"/> used to instantiate the component.</param>
        /// <param name="controlJoinId">The SmartObjectId at which to create the component.</param>
        /// <param name="itemCount">The number of items.</param>
        internal BuildingMute(ComponentMediator componentMediator, uint controlJoinId, uint? itemCount)
        {
            ComponentMediator = componentMediator;
            Initialize(controlJoinId, itemCount);
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="BuildingMute"/> component class.
        /// </summary>
        /// <param name="componentMediator">The <see cref="ComponentMediator"/> used to instantiate the component.</param>
        /// <param name="controlJoinId">The SmartObjectId at which to create the component.</param>
        internal BuildingMute(ComponentMediator componentMediator, uint controlJoinId) : this(componentMediator, controlJoinId, null)
        {
        }

        /// <summary>
        /// Initializes a new instance with default itemCount.
        /// </summary>
        /// <param name="controlJoinId">The SmartObjectId at which to create the component.</param>
        private void Initialize(uint controlJoinId)
        {
            Initialize(controlJoinId, null);
        }

        private Dictionary<string, Indexes> _indexLookup = new Dictionary<string, Indexes>();

        /// <summary>
        /// Initializes a new instance of the <see cref="BuildingMute"/> component class.
        /// </summary>
        /// <param name="controlJoinId">The SmartObjectId at which to create the component.</param>
        /// <param name="itemCount">The number of items.</param>
        private void Initialize(uint controlJoinId, uint? itemCount)
        {
            ControlJoinId = controlJoinId; 
 
            _devices = new List<BasicTriListWithSmartObject>(); 
 
            ComponentMediator.ConfigureBooleanEvent(controlJoinId, Joins.Booleans.MuteOffButton_PressEvent, onMuteOffButton_Press);
            ComponentMediator.ConfigureBooleanEvent(controlJoinId, Joins.Booleans.MuteOnButton_PressEvent, onMuteOnButton_Press);
        }

        public void AddDevice(BasicTriListWithSmartObject device)
        {
            Devices.Add(device);
            ComponentMediator.HookSmartObjectEvents(device.SmartObjects[ControlJoinId]);
        }

        public void RemoveDevice(BasicTriListWithSmartObject device)
        {
            Devices.Remove(device);
            ComponentMediator.UnHookSmartObjectEvents(device.SmartObjects[ControlJoinId]);
        }

        #endregion

        #region CH5 Contract

        /// <inheritdoc/>
        public event EventHandler<UIEventArgs> MuteOffButton_PressEvent;
        private void onMuteOffButton_Press(SmartObjectEventArgs eventArgs)
        {
            EventHandler<UIEventArgs> handler = MuteOffButton_PressEvent;
            if (handler != null)
                handler(this, UIEventArgs.CreateEventArgs(eventArgs));
        }

        /// <inheritdoc/>
        public event EventHandler<UIEventArgs> MuteOnButton_PressEvent;
        private void onMuteOnButton_Press(SmartObjectEventArgs eventArgs)
        {
            EventHandler<UIEventArgs> handler = MuteOnButton_PressEvent;
            if (handler != null)
                handler(this, UIEventArgs.CreateEventArgs(eventArgs));
        }

        /// <inheritdoc/>
        public void BuildingMuteStatus_Visibility_fb(BuildingMuteBoolInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].BooleanInput[Joins.Booleans.BuildingMuteStatus_Visibility_fbState], this);
            }
        }

        /// <inheritdoc/>
        public void BuildingMuteStatus_Visibility_fb(bool digital)
        {
            BuildingMuteStatus_Visibility_fb((sig, component) => sig.BoolValue = digital);
        }
        /// <inheritdoc/>
        public void MuteOffButton_Enable(BuildingMuteBoolInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].BooleanInput[Joins.Booleans.MuteOffButton_EnableState], this);
            }
        }

        /// <inheritdoc/>
        public void MuteOffButton_Enable(bool digital)
        {
            MuteOffButton_Enable((sig, component) => sig.BoolValue = digital);
        }
        /// <inheritdoc/>
        public void MuteOffButton_Selected(BuildingMuteBoolInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].BooleanInput[Joins.Booleans.MuteOffButton_SelectedState], this);
            }
        }

        /// <inheritdoc/>
        public void MuteOffButton_Selected(bool digital)
        {
            MuteOffButton_Selected((sig, component) => sig.BoolValue = digital);
        }
        /// <inheritdoc/>
        public void MuteOnButton_Enable(BuildingMuteBoolInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].BooleanInput[Joins.Booleans.MuteOnButton_EnableState], this);
            }
        }

        /// <inheritdoc/>
        public void MuteOnButton_Enable(bool digital)
        {
            MuteOnButton_Enable((sig, component) => sig.BoolValue = digital);
        }
        /// <inheritdoc/>
        public void MuteOnButton_Selected(BuildingMuteBoolInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].BooleanInput[Joins.Booleans.MuteOnButton_SelectedState], this);
            }
        }

        /// <inheritdoc/>
        public void MuteOnButton_Selected(bool digital)
        {
            MuteOnButton_Selected((sig, component) => sig.BoolValue = digital);
        }


        /// <inheritdoc/>
        public void BuildingMuteStatus_IndirectRichText(BuildingMuteStringInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].StringInput[Joins.Strings.BuildingMuteStatus_IndirectRichTextState], this);
            }
        }

        /// <inheritdoc/>
        public void BuildingMuteStatus_IndirectRichText(string serial)
        {
            BuildingMuteStatus_IndirectRichText((sig, component) => sig.StringValue = serial);
        }
        /// <inheritdoc/>
        public void BuildingMuteText_IndirectRichText(BuildingMuteStringInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].StringInput[Joins.Strings.BuildingMuteText_IndirectRichTextState], this);
            }
        }

        /// <inheritdoc/>
        public void BuildingMuteText_IndirectRichText(string serial)
        {
            BuildingMuteText_IndirectRichText((sig, component) => sig.StringValue = serial);
        }

        #endregion

        #region Overrides

        public override int GetHashCode()
        {
            return (int)ControlJoinId;
        }

        public override string ToString()
        {
            return string.Format("Contract: {0} Component: {1} HashCode: {2} {3}", "BuildingMute", GetType().Name, GetHashCode(), UserObject != null ? "UserObject: " + UserObject : null);
        }

        #endregion

        #region IDisposable

        public bool IsDisposed { get; set; }

        public void Dispose()
        {
            if (IsDisposed)
                return;

            IsDisposed = true;

            MuteOffButton_PressEvent = null;
            MuteOnButton_PressEvent = null;
        }

        #endregion
    }
}
