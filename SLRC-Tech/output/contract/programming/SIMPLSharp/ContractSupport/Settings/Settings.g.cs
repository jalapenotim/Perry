//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by CrestronConstruct.
//     AppHost:     2.601.10.0
//     UI Plugin:   1.4201.17.0
//
//     Project:     SLRC-Tech
//     Version:     1.0.0.0
//     Sdk:         CH5:2.16.0
//     Strategy:    Modern
//     IndexOnly:   False
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq;
using Crestron.SimplSharp;
using Crestron.SimplSharpPro;
using Crestron.SimplSharpPro.DeviceSupport;
using SLRCTech;

namespace SLRCTech.Settings
{

    /// <summary>
    /// Settings
    /// </summary>
    public partial interface ISettings 
    {
        object UserObject { get; set; }

        /// <summary>
        /// Event Password Clear Button.Press (from panel to Control System)
        /// </summary>
        event EventHandler<UIEventArgs> PasswordClearButton_PressEvent;

        /// <summary>
        /// Event Password Save Button.Press (from panel to Control System)
        /// </summary>
        event EventHandler<UIEventArgs> PasswordSaveButton_PressEvent;

        /// <summary>
        /// Settings.VisibilityJoin Feedback
        /// </summary>
        /// <param name="callback">The bool delegate to update the panel.</param>
        void Settings_VisibilityJoin(SettingsBoolInputSigDelegate callback);

        /// <summary>
        /// Settings.VisibilityJoin Feedback
        /// </summary>
        /// <param name="digital">The bool to update the panel.</param>
        void Settings_VisibilityJoin(bool digital);

        /// <summary>
        /// Password Text.Indirect Rich Text Feedback
        /// </summary>
        /// <param name="callback">The <see cref="string"/> delegate to update the panel.</param>
        void PasswordText_IndirectRichText(SettingsStringInputSigDelegate callback);

        /// <summary>
        /// Password Text.Indirect Rich Text Feedback
        /// </summary>
        /// <param name="serial">The <see cref="string"/> to update the panel.</param>
        void PasswordText_IndirectRichText(string serial);

        /// <summary>
        /// User Password Instructions.Indirect Rich Text Feedback
        /// </summary>
        /// <param name="callback">The <see cref="string"/> delegate to update the panel.</param>
        void UserPasswordInstructions_IndirectRichText(SettingsStringInputSigDelegate callback);

        /// <summary>
        /// User Password Instructions.Indirect Rich Text Feedback
        /// </summary>
        /// <param name="serial">The <see cref="string"/> to update the panel.</param>
        void UserPasswordInstructions_IndirectRichText(string serial);

        /// <summary>
        /// ComplexComponent ON Time 2 Button List
        /// </summary>
        SLRCTech.Settings.IONTime2ButtonList ONTime2ButtonList { get; }

        /// <summary>
        /// ComplexComponent OFF Time 2 Button List
        /// </summary>
        SLRCTech.Settings.IOFFTime2ButtonList OFFTime2ButtonList { get; }

        /// <summary>
        /// ComplexComponent OFF Time 1 Button List
        /// </summary>
        SLRCTech.Settings.IOFFTime1ButtonList OFFTime1ButtonList { get; }

        /// <summary>
        /// ComplexComponent Day Select Tab Button
        /// </summary>
        SLRCTech.Settings.IDaySelectTabButton DaySelectTabButton { get; }

        /// <summary>
        /// ComplexComponent ON Time 1 Button List
        /// </summary>
        SLRCTech.Settings.IONTime1ButtonList ONTime1ButtonList { get; }

        /// <summary>
        /// ComplexComponent Building Mute
        /// </summary>
        SLRCTech.Settings.IBuildingMute BuildingMute { get; }

        /// <summary>
        /// ComplexComponent Password Set Keypad
        /// </summary>
        SLRCTech.Settings.IPasswordSetKeypad PasswordSetKeypad { get; }

        /// <summary>
        /// ComplexComponent Header
        /// </summary>
        SLRCTech.Settings.IHeader Header { get; }
    }

    /// <summary>
    /// Digital callback used in feedback events.
    /// </summary>
    /// <param name="boolInputSig">The <see cref="BoolInputSig"/> joinInfo data.</param>
    /// <param name="settings">The <see cref="ISettings"/> on which to apply the feedback.</param>
    public delegate void SettingsBoolInputSigDelegate(BoolInputSig boolInputSig, ISettings settings);
    /// <summary>
    /// Digital callback used in feedback events.
    /// </summary>
    /// <param name="stringInputSig">The <see cref="StringInputSig"/> joinInfo data.</param>
    /// <param name="settings">The <see cref="ISettings"/> on which to apply the feedback.</param>
    public delegate void SettingsStringInputSigDelegate(StringInputSig stringInputSig, ISettings settings);

    /// <summary>
    /// Settings
    /// </summary>
    internal partial class Settings : ISettings, IDisposable
    {
        #region Standard CH5 Component members

        private ComponentMediator ComponentMediator { get; set; }

        public object UserObject { get; set; }

        /// <summary>
        /// Gets the ControlJoinId a.k.a. SmartObjectId.  This Id identifies the extender symbol.
        /// </summary>
        public uint ControlJoinId { get; private set; }

        private IList<BasicTriListWithSmartObject> _devices;

        /// <summary>
        /// Gets the list of devices.
        /// </summary>
        public IList<BasicTriListWithSmartObject> Devices { get { return _devices; } }

        #endregion

        #region Joins

        private static class Joins
        {
            /// <summary>
            /// Digital signals,
            /// </summary>
            internal static class Booleans
            {
                /// <summary>
                /// Output or Event digital joinInfo from panel to Control System: Settings.PasswordClearButton.Press
                /// Password Clear Button.Press
                /// </summary>
                public const uint PasswordClearButton_PressEvent = 3;

                /// <summary>
                /// Output or Event digital joinInfo from panel to Control System: Settings.PasswordSaveButton.Press
                /// Password Save Button.Press
                /// </summary>
                public const uint PasswordSaveButton_PressEvent = 4;


                /// <summary>
                /// Input or Feedback digital joinInfo from Control System to panel: SettingsVisibilityJoin
                /// Settings.VisibilityJoin
                /// </summary>
                public const uint Settings_VisibilityJoinState = 1;

            }
            /// <summary>
            /// Serial signals.
            /// </summary>
            internal static class Strings
            {

                /// <summary>
                /// Input or Feedback serial joinInfo from Control System to panel: Settings.PasswordText.IndirectRichText
                /// Password Text.Indirect Rich Text
                /// </summary>
                public const uint PasswordText_IndirectRichTextState = 1;
                /// <summary>
                /// Input or Feedback serial joinInfo from Control System to panel: Settings.UserPasswordInstructions.IndirectRichText
                /// User Password Instructions.Indirect Rich Text
                /// </summary>
                public const uint UserPasswordInstructions_IndirectRichTextState = 2;
            }
        }

        #endregion

        #region Construction and Initialization

        /// <summary>
        /// Initializes a new instance of the <see cref="Settings"/> component class.
        /// </summary>
        /// <param name="componentMediator">The <see cref="ComponentMediator"/> used to instantiate the component.</param>
        /// <param name="controlJoinId">The SmartObjectId at which to create the component.</param>
        /// <param name="itemCount">The number of items.</param>
        internal Settings(ComponentMediator componentMediator, uint controlJoinId, uint? itemCount)
        {
            ComponentMediator = componentMediator;
            Initialize(controlJoinId, itemCount);
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="Settings"/> component class.
        /// </summary>
        /// <param name="componentMediator">The <see cref="ComponentMediator"/> used to instantiate the component.</param>
        /// <param name="controlJoinId">The SmartObjectId at which to create the component.</param>
        internal Settings(ComponentMediator componentMediator, uint controlJoinId) : this(componentMediator, controlJoinId, null)
        {
        }

        /// <summary>
        /// Initializes a new instance with default itemCount.
        /// </summary>
        /// <param name="controlJoinId">The SmartObjectId at which to create the component.</param>
        private void Initialize(uint controlJoinId)
        {
            Initialize(controlJoinId, null);
        }

        private Dictionary<string, Indexes> _indexLookup = new Dictionary<string, Indexes>();

        /// <summary>
        /// Initializes a new instance of the <see cref="Settings"/> component class.
        /// </summary>
        /// <param name="controlJoinId">The SmartObjectId at which to create the component.</param>
        /// <param name="itemCount">The number of items.</param>
        private void Initialize(uint controlJoinId, uint? itemCount)
        {
            ControlJoinId = controlJoinId; 
 
            _devices = new List<BasicTriListWithSmartObject>(); 
 
            ComponentMediator.ConfigureBooleanEvent(controlJoinId, Joins.Booleans.PasswordClearButton_PressEvent, onPasswordClearButton_Press);
            ComponentMediator.ConfigureBooleanEvent(controlJoinId, Joins.Booleans.PasswordSaveButton_PressEvent, onPasswordSaveButton_Press);
            ONTime2ButtonList = new SLRCTech.Settings.ONTime2ButtonList(ComponentMediator, 123);
            OFFTime2ButtonList = new SLRCTech.Settings.OFFTime2ButtonList(ComponentMediator, 124);
            OFFTime1ButtonList = new SLRCTech.Settings.OFFTime1ButtonList(ComponentMediator, 125);
            DaySelectTabButton = new SLRCTech.Settings.DaySelectTabButton(ComponentMediator, 126);
            ONTime1ButtonList = new SLRCTech.Settings.ONTime1ButtonList(ComponentMediator, 127);
            BuildingMute = new SLRCTech.Settings.BuildingMute(ComponentMediator, 128);
            PasswordSetKeypad = new SLRCTech.Settings.PasswordSetKeypad(ComponentMediator, 129);
            Header = new SLRCTech.Settings.Header(ComponentMediator, 130);
        }

        public void AddDevice(BasicTriListWithSmartObject device)
        {
            Devices.Add(device);
            ComponentMediator.HookSmartObjectEvents(device.SmartObjects[ControlJoinId]);

            ((SLRCTech.Settings.ONTime2ButtonList)ONTime2ButtonList).AddDevice(device);

            ((SLRCTech.Settings.OFFTime2ButtonList)OFFTime2ButtonList).AddDevice(device);

            ((SLRCTech.Settings.OFFTime1ButtonList)OFFTime1ButtonList).AddDevice(device);

            ((SLRCTech.Settings.DaySelectTabButton)DaySelectTabButton).AddDevice(device);

            ((SLRCTech.Settings.ONTime1ButtonList)ONTime1ButtonList).AddDevice(device);

            ((SLRCTech.Settings.BuildingMute)BuildingMute).AddDevice(device);

            ((SLRCTech.Settings.PasswordSetKeypad)PasswordSetKeypad).AddDevice(device);

            ((SLRCTech.Settings.Header)Header).AddDevice(device);
        }

        public void RemoveDevice(BasicTriListWithSmartObject device)
        {
            Devices.Remove(device);
            ComponentMediator.UnHookSmartObjectEvents(device.SmartObjects[ControlJoinId]);

            ((SLRCTech.Settings.ONTime2ButtonList)ONTime2ButtonList).RemoveDevice(device);

            ((SLRCTech.Settings.OFFTime2ButtonList)OFFTime2ButtonList).RemoveDevice(device);

            ((SLRCTech.Settings.OFFTime1ButtonList)OFFTime1ButtonList).RemoveDevice(device);

            ((SLRCTech.Settings.DaySelectTabButton)DaySelectTabButton).RemoveDevice(device);

            ((SLRCTech.Settings.ONTime1ButtonList)ONTime1ButtonList).RemoveDevice(device);

            ((SLRCTech.Settings.BuildingMute)BuildingMute).RemoveDevice(device);

            ((SLRCTech.Settings.PasswordSetKeypad)PasswordSetKeypad).RemoveDevice(device);

            ((SLRCTech.Settings.Header)Header).RemoveDevice(device);
        }

        #endregion

        #region CH5 Contract

        /// <inheritdoc/>
        public event EventHandler<UIEventArgs> PasswordClearButton_PressEvent;
        private void onPasswordClearButton_Press(SmartObjectEventArgs eventArgs)
        {
            EventHandler<UIEventArgs> handler = PasswordClearButton_PressEvent;
            if (handler != null)
                handler(this, UIEventArgs.CreateEventArgs(eventArgs));
        }

        /// <inheritdoc/>
        public event EventHandler<UIEventArgs> PasswordSaveButton_PressEvent;
        private void onPasswordSaveButton_Press(SmartObjectEventArgs eventArgs)
        {
            EventHandler<UIEventArgs> handler = PasswordSaveButton_PressEvent;
            if (handler != null)
                handler(this, UIEventArgs.CreateEventArgs(eventArgs));
        }

        /// <inheritdoc/>
        public void Settings_VisibilityJoin(SettingsBoolInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].BooleanInput[Joins.Booleans.Settings_VisibilityJoinState], this);
            }
        }

        /// <inheritdoc/>
        public void Settings_VisibilityJoin(bool digital)
        {
            Settings_VisibilityJoin((sig, component) => sig.BoolValue = digital);
        }


        /// <inheritdoc/>
        public void PasswordText_IndirectRichText(SettingsStringInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].StringInput[Joins.Strings.PasswordText_IndirectRichTextState], this);
            }
        }

        /// <inheritdoc/>
        public void PasswordText_IndirectRichText(string serial)
        {
            PasswordText_IndirectRichText((sig, component) => sig.StringValue = serial);
        }
        /// <inheritdoc/>
        public void UserPasswordInstructions_IndirectRichText(SettingsStringInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].StringInput[Joins.Strings.UserPasswordInstructions_IndirectRichTextState], this);
            }
        }

        /// <inheritdoc/>
        public void UserPasswordInstructions_IndirectRichText(string serial)
        {
            UserPasswordInstructions_IndirectRichText((sig, component) => sig.StringValue = serial);
        }

        /// <summary>
        /// ComplexComponent ON Time 2 Button List
        /// </summary>
        public SLRCTech.Settings.IONTime2ButtonList ONTime2ButtonList { get; private set; }

        /// <summary>
        /// ComplexComponent OFF Time 2 Button List
        /// </summary>
        public SLRCTech.Settings.IOFFTime2ButtonList OFFTime2ButtonList { get; private set; }

        /// <summary>
        /// ComplexComponent OFF Time 1 Button List
        /// </summary>
        public SLRCTech.Settings.IOFFTime1ButtonList OFFTime1ButtonList { get; private set; }

        /// <summary>
        /// ComplexComponent Day Select Tab Button
        /// </summary>
        public SLRCTech.Settings.IDaySelectTabButton DaySelectTabButton { get; private set; }

        /// <summary>
        /// ComplexComponent ON Time 1 Button List
        /// </summary>
        public SLRCTech.Settings.IONTime1ButtonList ONTime1ButtonList { get; private set; }

        /// <summary>
        /// ComplexComponent BuildingMute
        /// </summary>
        public SLRCTech.Settings.IBuildingMute BuildingMute { get; private set; }

        /// <summary>
        /// ComplexComponent Password Set Keypad
        /// </summary>
        public SLRCTech.Settings.IPasswordSetKeypad PasswordSetKeypad { get; private set; }

        /// <summary>
        /// ComplexComponent Header
        /// </summary>
        public SLRCTech.Settings.IHeader Header { get; private set; }

        #endregion

        #region Overrides

        public override int GetHashCode()
        {
            return (int)ControlJoinId;
        }

        public override string ToString()
        {
            return string.Format("Contract: {0} Component: {1} HashCode: {2} {3}", "Settings", GetType().Name, GetHashCode(), UserObject != null ? "UserObject: " + UserObject : null);
        }

        #endregion

        #region IDisposable

        public bool IsDisposed { get; set; }

        public void Dispose()
        {
            if (IsDisposed)
                return;

            IsDisposed = true;

            PasswordClearButton_PressEvent = null;
            PasswordSaveButton_PressEvent = null;
        }

        #endregion
    }
}
