//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by CrestronConstruct.
//     AppHost:     2.601.10.0
//     UI Plugin:   1.4201.17.0
//
//     Project:     SLRC-Tech
//     Version:     1.0.0.0
//     Sdk:         CH5:2.16.0
//     Strategy:    Modern
//     IndexOnly:   False
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq;
using Crestron.SimplSharp;
using Crestron.SimplSharpPro;
using Crestron.SimplSharpPro.DeviceSupport;
using SLRCTech;

namespace SLRCTech.Main
{

    /// <summary>
    /// Main
    /// </summary>
    public partial interface IMain 
    {
        object UserObject { get; set; }

        /// <summary>
        /// Event Background Music Button.Press (from panel to Control System)
        /// </summary>
        event EventHandler<UIEventArgs> BackgroundMusicButton_PressEvent;

        /// <summary>
        /// Event CATV Button.Press (from panel to Control System)
        /// </summary>
        event EventHandler<UIEventArgs> CATVButton_PressEvent;

        /// <summary>
        /// Event Classrooms Button.Press (from panel to Control System)
        /// </summary>
        event EventHandler<UIEventArgs> ClassroomsButton_PressEvent;

        /// <summary>
        /// Event Fieldhouse Audio Button.Press (from panel to Control System)
        /// </summary>
        event EventHandler<UIEventArgs> FieldhouseAudioButton_PressEvent;

        /// <summary>
        /// Event Pool Audio Button.Press (from panel to Control System)
        /// </summary>
        event EventHandler<UIEventArgs> PoolAudioButton_PressEvent;

        /// <summary>
        /// Event Public Displays Button.Press (from panel to Control System)
        /// </summary>
        event EventHandler<UIEventArgs> PublicDisplaysButton_PressEvent;

        /// <summary>
        /// Event Settings Button.Press (from panel to Control System)
        /// </summary>
        event EventHandler<UIEventArgs> SettingsButton_PressEvent;

        /// <summary>
        /// Background Music Button.Visibility Feedback
        /// </summary>
        /// <param name="callback">The bool delegate to update the panel.</param>
        void BackgroundMusicButton_Visibility_fb(MainBoolInputSigDelegate callback);

        /// <summary>
        /// Background Music Button.Visibility Feedback
        /// </summary>
        /// <param name="digital">The bool to update the panel.</param>
        void BackgroundMusicButton_Visibility_fb(bool digital);

        /// <summary>
        /// CATV Button.Visibility Feedback
        /// </summary>
        /// <param name="callback">The bool delegate to update the panel.</param>
        void CATVButton_Visibility_fb(MainBoolInputSigDelegate callback);

        /// <summary>
        /// CATV Button.Visibility Feedback
        /// </summary>
        /// <param name="digital">The bool to update the panel.</param>
        void CATVButton_Visibility_fb(bool digital);

        /// <summary>
        /// Classrooms Button.Visibility Feedback
        /// </summary>
        /// <param name="callback">The bool delegate to update the panel.</param>
        void ClassroomsButton_Visibility_fb(MainBoolInputSigDelegate callback);

        /// <summary>
        /// Classrooms Button.Visibility Feedback
        /// </summary>
        /// <param name="digital">The bool to update the panel.</param>
        void ClassroomsButton_Visibility_fb(bool digital);

        /// <summary>
        /// Fieldhouse Audio Button.Visibility Feedback
        /// </summary>
        /// <param name="callback">The bool delegate to update the panel.</param>
        void FieldhouseAudioButton_Visibility_fb(MainBoolInputSigDelegate callback);

        /// <summary>
        /// Fieldhouse Audio Button.Visibility Feedback
        /// </summary>
        /// <param name="digital">The bool to update the panel.</param>
        void FieldhouseAudioButton_Visibility_fb(bool digital);

        /// <summary>
        /// Pool Audio Button.Visibility Feedback
        /// </summary>
        /// <param name="callback">The bool delegate to update the panel.</param>
        void PoolAudioButton_Visibility_fb(MainBoolInputSigDelegate callback);

        /// <summary>
        /// Pool Audio Button.Visibility Feedback
        /// </summary>
        /// <param name="digital">The bool to update the panel.</param>
        void PoolAudioButton_Visibility_fb(bool digital);

        /// <summary>
        /// Public Displays Button.Visibility Feedback
        /// </summary>
        /// <param name="callback">The bool delegate to update the panel.</param>
        void PublicDisplaysButton_Visibility_fb(MainBoolInputSigDelegate callback);

        /// <summary>
        /// Public Displays Button.Visibility Feedback
        /// </summary>
        /// <param name="digital">The bool to update the panel.</param>
        void PublicDisplaysButton_Visibility_fb(bool digital);

        /// <summary>
        /// Settings Button.Visibility Feedback
        /// </summary>
        /// <param name="callback">The bool delegate to update the panel.</param>
        void SettingsButton_Visibility_fb(MainBoolInputSigDelegate callback);

        /// <summary>
        /// Settings Button.Visibility Feedback
        /// </summary>
        /// <param name="digital">The bool to update the panel.</param>
        void SettingsButton_Visibility_fb(bool digital);

        /// <summary>
        /// Main.VisibilityJoin Feedback
        /// </summary>
        /// <param name="callback">The bool delegate to update the panel.</param>
        void Main_VisibilityJoin(MainBoolInputSigDelegate callback);

        /// <summary>
        /// Main.VisibilityJoin Feedback
        /// </summary>
        /// <param name="digital">The bool to update the panel.</param>
        void Main_VisibilityJoin(bool digital);

        /// <summary>
        /// ComplexComponent Building Mute
        /// </summary>
        SLRCTech.Main.IBuildingMute BuildingMute { get; }

        /// <summary>
        /// ComplexComponent Header
        /// </summary>
        SLRCTech.Main.IHeader Header { get; }
    }

    /// <summary>
    /// Digital callback used in feedback events.
    /// </summary>
    /// <param name="boolInputSig">The <see cref="BoolInputSig"/> joinInfo data.</param>
    /// <param name="main">The <see cref="IMain"/> on which to apply the feedback.</param>
    public delegate void MainBoolInputSigDelegate(BoolInputSig boolInputSig, IMain main);

    /// <summary>
    /// Main
    /// </summary>
    internal partial class Main : IMain, IDisposable
    {
        #region Standard CH5 Component members

        private ComponentMediator ComponentMediator { get; set; }

        public object UserObject { get; set; }

        /// <summary>
        /// Gets the ControlJoinId a.k.a. SmartObjectId.  This Id identifies the extender symbol.
        /// </summary>
        public uint ControlJoinId { get; private set; }

        private IList<BasicTriListWithSmartObject> _devices;

        /// <summary>
        /// Gets the list of devices.
        /// </summary>
        public IList<BasicTriListWithSmartObject> Devices { get { return _devices; } }

        #endregion

        #region Joins

        private static class Joins
        {
            /// <summary>
            /// Digital signals,
            /// </summary>
            internal static class Booleans
            {
                /// <summary>
                /// Output or Event digital joinInfo from panel to Control System: Main.BackgroundMusicButton.Press
                /// Background Music Button.Press
                /// </summary>
                public const uint BackgroundMusicButton_PressEvent = 2;

                /// <summary>
                /// Output or Event digital joinInfo from panel to Control System: Main.CATVButton.Press
                /// CATV Button.Press
                /// </summary>
                public const uint CATVButton_PressEvent = 3;

                /// <summary>
                /// Output or Event digital joinInfo from panel to Control System: Main.ClassroomsButton.Press
                /// Classrooms Button.Press
                /// </summary>
                public const uint ClassroomsButton_PressEvent = 4;

                /// <summary>
                /// Output or Event digital joinInfo from panel to Control System: Main.FieldhouseAudioButton.Press
                /// Fieldhouse Audio Button.Press
                /// </summary>
                public const uint FieldhouseAudioButton_PressEvent = 5;

                /// <summary>
                /// Output or Event digital joinInfo from panel to Control System: Main.PoolAudioButton.Press
                /// Pool Audio Button.Press
                /// </summary>
                public const uint PoolAudioButton_PressEvent = 6;

                /// <summary>
                /// Output or Event digital joinInfo from panel to Control System: Main.PublicDisplaysButton.Press
                /// Public Displays Button.Press
                /// </summary>
                public const uint PublicDisplaysButton_PressEvent = 7;

                /// <summary>
                /// Output or Event digital joinInfo from panel to Control System: Main.SettingsButton.Press
                /// Settings Button.Press
                /// </summary>
                public const uint SettingsButton_PressEvent = 8;


                /// <summary>
                /// Input or Feedback digital joinInfo from Control System to panel: Main.BackgroundMusicButton.Visibility_fb
                /// Background Music Button.Visibility
                /// </summary>
                public const uint BackgroundMusicButton_Visibility_fbState = 1;

                /// <summary>
                /// Input or Feedback digital joinInfo from Control System to panel: Main.CATVButton.Visibility_fb
                /// CATV Button.Visibility
                /// </summary>
                public const uint CATVButton_Visibility_fbState = 2;

                /// <summary>
                /// Input or Feedback digital joinInfo from Control System to panel: Main.ClassroomsButton.Visibility_fb
                /// Classrooms Button.Visibility
                /// </summary>
                public const uint ClassroomsButton_Visibility_fbState = 3;

                /// <summary>
                /// Input or Feedback digital joinInfo from Control System to panel: Main.FieldhouseAudioButton.Visibility_fb
                /// Fieldhouse Audio Button.Visibility
                /// </summary>
                public const uint FieldhouseAudioButton_Visibility_fbState = 4;

                /// <summary>
                /// Input or Feedback digital joinInfo from Control System to panel: Main.PoolAudioButton.Visibility_fb
                /// Pool Audio Button.Visibility
                /// </summary>
                public const uint PoolAudioButton_Visibility_fbState = 5;

                /// <summary>
                /// Input or Feedback digital joinInfo from Control System to panel: Main.PublicDisplaysButton.Visibility_fb
                /// Public Displays Button.Visibility
                /// </summary>
                public const uint PublicDisplaysButton_Visibility_fbState = 6;

                /// <summary>
                /// Input or Feedback digital joinInfo from Control System to panel: Main.SettingsButton.Visibility_fb
                /// Settings Button.Visibility
                /// </summary>
                public const uint SettingsButton_Visibility_fbState = 7;

                /// <summary>
                /// Input or Feedback digital joinInfo from Control System to panel: MainVisibilityJoin
                /// Main.VisibilityJoin
                /// </summary>
                public const uint Main_VisibilityJoinState = 8;

            }
        }

        #endregion

        #region Construction and Initialization

        /// <summary>
        /// Initializes a new instance of the <see cref="Main"/> component class.
        /// </summary>
        /// <param name="componentMediator">The <see cref="ComponentMediator"/> used to instantiate the component.</param>
        /// <param name="controlJoinId">The SmartObjectId at which to create the component.</param>
        /// <param name="itemCount">The number of items.</param>
        internal Main(ComponentMediator componentMediator, uint controlJoinId, uint? itemCount)
        {
            ComponentMediator = componentMediator;
            Initialize(controlJoinId, itemCount);
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="Main"/> component class.
        /// </summary>
        /// <param name="componentMediator">The <see cref="ComponentMediator"/> used to instantiate the component.</param>
        /// <param name="controlJoinId">The SmartObjectId at which to create the component.</param>
        internal Main(ComponentMediator componentMediator, uint controlJoinId) : this(componentMediator, controlJoinId, null)
        {
        }

        /// <summary>
        /// Initializes a new instance with default itemCount.
        /// </summary>
        /// <param name="controlJoinId">The SmartObjectId at which to create the component.</param>
        private void Initialize(uint controlJoinId)
        {
            Initialize(controlJoinId, null);
        }

        private Dictionary<string, Indexes> _indexLookup = new Dictionary<string, Indexes>();

        /// <summary>
        /// Initializes a new instance of the <see cref="Main"/> component class.
        /// </summary>
        /// <param name="controlJoinId">The SmartObjectId at which to create the component.</param>
        /// <param name="itemCount">The number of items.</param>
        private void Initialize(uint controlJoinId, uint? itemCount)
        {
            ControlJoinId = controlJoinId; 
 
            _devices = new List<BasicTriListWithSmartObject>(); 
 
            ComponentMediator.ConfigureBooleanEvent(controlJoinId, Joins.Booleans.BackgroundMusicButton_PressEvent, onBackgroundMusicButton_Press);
            ComponentMediator.ConfigureBooleanEvent(controlJoinId, Joins.Booleans.CATVButton_PressEvent, onCATVButton_Press);
            ComponentMediator.ConfigureBooleanEvent(controlJoinId, Joins.Booleans.ClassroomsButton_PressEvent, onClassroomsButton_Press);
            ComponentMediator.ConfigureBooleanEvent(controlJoinId, Joins.Booleans.FieldhouseAudioButton_PressEvent, onFieldhouseAudioButton_Press);
            ComponentMediator.ConfigureBooleanEvent(controlJoinId, Joins.Booleans.PoolAudioButton_PressEvent, onPoolAudioButton_Press);
            ComponentMediator.ConfigureBooleanEvent(controlJoinId, Joins.Booleans.PublicDisplaysButton_PressEvent, onPublicDisplaysButton_Press);
            ComponentMediator.ConfigureBooleanEvent(controlJoinId, Joins.Booleans.SettingsButton_PressEvent, onSettingsButton_Press);
            BuildingMute = new SLRCTech.Main.BuildingMute(ComponentMediator, 5);
            Header = new SLRCTech.Main.Header(ComponentMediator, 7);
        }

        public void AddDevice(BasicTriListWithSmartObject device)
        {
            Devices.Add(device);
            ComponentMediator.HookSmartObjectEvents(device.SmartObjects[ControlJoinId]);

            ((SLRCTech.Main.BuildingMute)BuildingMute).AddDevice(device);

            ((SLRCTech.Main.Header)Header).AddDevice(device);
        }

        public void RemoveDevice(BasicTriListWithSmartObject device)
        {
            Devices.Remove(device);
            ComponentMediator.UnHookSmartObjectEvents(device.SmartObjects[ControlJoinId]);

            ((SLRCTech.Main.BuildingMute)BuildingMute).RemoveDevice(device);

            ((SLRCTech.Main.Header)Header).RemoveDevice(device);
        }

        #endregion

        #region CH5 Contract

        /// <inheritdoc/>
        public event EventHandler<UIEventArgs> BackgroundMusicButton_PressEvent;
        private void onBackgroundMusicButton_Press(SmartObjectEventArgs eventArgs)
        {
            EventHandler<UIEventArgs> handler = BackgroundMusicButton_PressEvent;
            if (handler != null)
                handler(this, UIEventArgs.CreateEventArgs(eventArgs));
        }

        /// <inheritdoc/>
        public event EventHandler<UIEventArgs> CATVButton_PressEvent;
        private void onCATVButton_Press(SmartObjectEventArgs eventArgs)
        {
            EventHandler<UIEventArgs> handler = CATVButton_PressEvent;
            if (handler != null)
                handler(this, UIEventArgs.CreateEventArgs(eventArgs));
        }

        /// <inheritdoc/>
        public event EventHandler<UIEventArgs> ClassroomsButton_PressEvent;
        private void onClassroomsButton_Press(SmartObjectEventArgs eventArgs)
        {
            EventHandler<UIEventArgs> handler = ClassroomsButton_PressEvent;
            if (handler != null)
                handler(this, UIEventArgs.CreateEventArgs(eventArgs));
        }

        /// <inheritdoc/>
        public event EventHandler<UIEventArgs> FieldhouseAudioButton_PressEvent;
        private void onFieldhouseAudioButton_Press(SmartObjectEventArgs eventArgs)
        {
            EventHandler<UIEventArgs> handler = FieldhouseAudioButton_PressEvent;
            if (handler != null)
                handler(this, UIEventArgs.CreateEventArgs(eventArgs));
        }

        /// <inheritdoc/>
        public event EventHandler<UIEventArgs> PoolAudioButton_PressEvent;
        private void onPoolAudioButton_Press(SmartObjectEventArgs eventArgs)
        {
            EventHandler<UIEventArgs> handler = PoolAudioButton_PressEvent;
            if (handler != null)
                handler(this, UIEventArgs.CreateEventArgs(eventArgs));
        }

        /// <inheritdoc/>
        public event EventHandler<UIEventArgs> PublicDisplaysButton_PressEvent;
        private void onPublicDisplaysButton_Press(SmartObjectEventArgs eventArgs)
        {
            EventHandler<UIEventArgs> handler = PublicDisplaysButton_PressEvent;
            if (handler != null)
                handler(this, UIEventArgs.CreateEventArgs(eventArgs));
        }

        /// <inheritdoc/>
        public event EventHandler<UIEventArgs> SettingsButton_PressEvent;
        private void onSettingsButton_Press(SmartObjectEventArgs eventArgs)
        {
            EventHandler<UIEventArgs> handler = SettingsButton_PressEvent;
            if (handler != null)
                handler(this, UIEventArgs.CreateEventArgs(eventArgs));
        }

        /// <inheritdoc/>
        public void BackgroundMusicButton_Visibility_fb(MainBoolInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].BooleanInput[Joins.Booleans.BackgroundMusicButton_Visibility_fbState], this);
            }
        }

        /// <inheritdoc/>
        public void BackgroundMusicButton_Visibility_fb(bool digital)
        {
            BackgroundMusicButton_Visibility_fb((sig, component) => sig.BoolValue = digital);
        }
        /// <inheritdoc/>
        public void CATVButton_Visibility_fb(MainBoolInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].BooleanInput[Joins.Booleans.CATVButton_Visibility_fbState], this);
            }
        }

        /// <inheritdoc/>
        public void CATVButton_Visibility_fb(bool digital)
        {
            CATVButton_Visibility_fb((sig, component) => sig.BoolValue = digital);
        }
        /// <inheritdoc/>
        public void ClassroomsButton_Visibility_fb(MainBoolInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].BooleanInput[Joins.Booleans.ClassroomsButton_Visibility_fbState], this);
            }
        }

        /// <inheritdoc/>
        public void ClassroomsButton_Visibility_fb(bool digital)
        {
            ClassroomsButton_Visibility_fb((sig, component) => sig.BoolValue = digital);
        }
        /// <inheritdoc/>
        public void FieldhouseAudioButton_Visibility_fb(MainBoolInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].BooleanInput[Joins.Booleans.FieldhouseAudioButton_Visibility_fbState], this);
            }
        }

        /// <inheritdoc/>
        public void FieldhouseAudioButton_Visibility_fb(bool digital)
        {
            FieldhouseAudioButton_Visibility_fb((sig, component) => sig.BoolValue = digital);
        }
        /// <inheritdoc/>
        public void Main_VisibilityJoin(MainBoolInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].BooleanInput[Joins.Booleans.Main_VisibilityJoinState], this);
            }
        }

        /// <inheritdoc/>
        public void Main_VisibilityJoin(bool digital)
        {
            Main_VisibilityJoin((sig, component) => sig.BoolValue = digital);
        }
        /// <inheritdoc/>
        public void PoolAudioButton_Visibility_fb(MainBoolInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].BooleanInput[Joins.Booleans.PoolAudioButton_Visibility_fbState], this);
            }
        }

        /// <inheritdoc/>
        public void PoolAudioButton_Visibility_fb(bool digital)
        {
            PoolAudioButton_Visibility_fb((sig, component) => sig.BoolValue = digital);
        }
        /// <inheritdoc/>
        public void PublicDisplaysButton_Visibility_fb(MainBoolInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].BooleanInput[Joins.Booleans.PublicDisplaysButton_Visibility_fbState], this);
            }
        }

        /// <inheritdoc/>
        public void PublicDisplaysButton_Visibility_fb(bool digital)
        {
            PublicDisplaysButton_Visibility_fb((sig, component) => sig.BoolValue = digital);
        }
        /// <inheritdoc/>
        public void SettingsButton_Visibility_fb(MainBoolInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].BooleanInput[Joins.Booleans.SettingsButton_Visibility_fbState], this);
            }
        }

        /// <inheritdoc/>
        public void SettingsButton_Visibility_fb(bool digital)
        {
            SettingsButton_Visibility_fb((sig, component) => sig.BoolValue = digital);
        }

        /// <summary>
        /// ComplexComponent BuildingMute
        /// </summary>
        public SLRCTech.Main.IBuildingMute BuildingMute { get; private set; }

        /// <summary>
        /// ComplexComponent Header
        /// </summary>
        public SLRCTech.Main.IHeader Header { get; private set; }

        #endregion

        #region Overrides

        public override int GetHashCode()
        {
            return (int)ControlJoinId;
        }

        public override string ToString()
        {
            return string.Format("Contract: {0} Component: {1} HashCode: {2} {3}", "Main", GetType().Name, GetHashCode(), UserObject != null ? "UserObject: " + UserObject : null);
        }

        #endregion

        #region IDisposable

        public bool IsDisposed { get; set; }

        public void Dispose()
        {
            if (IsDisposed)
                return;

            IsDisposed = true;

            BackgroundMusicButton_PressEvent = null;
            CATVButton_PressEvent = null;
            ClassroomsButton_PressEvent = null;
            FieldhouseAudioButton_PressEvent = null;
            PoolAudioButton_PressEvent = null;
            PublicDisplaysButton_PressEvent = null;
            SettingsButton_PressEvent = null;
        }

        #endregion
    }
}
