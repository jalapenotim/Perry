//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by CrestronConstruct.
//     AppHost:     2.601.10.0
//     UI Plugin:   1.4201.17.0
//
//     Project:     SLRC-Tech
//     Version:     1.0.0.0
//     Sdk:         CH5:2.16.0
//     Strategy:    Modern
//     IndexOnly:   False
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq;
using Crestron.SimplSharp;
using Crestron.SimplSharpPro;
using Crestron.SimplSharpPro.DeviceSupport;
using SLRCTech;

namespace SLRCTech.BackgroundMusic.AudioRouting
{

    /// <summary>
    /// AudioRouting
    /// </summary>
    public partial interface IAudioRouting 
    {
        object UserObject { get; set; }

        /// <summary>
        /// Event BackgroundMusic.AudioRouting.Destination 10 Button.Press (from panel to Control System)
        /// </summary>
        event EventHandler<UIEventArgs> Destination10Button_PressEvent;

        /// <summary>
        /// Event BackgroundMusic.AudioRouting.Destination 1 Button.Press (from panel to Control System)
        /// </summary>
        event EventHandler<UIEventArgs> Destination1Button_PressEvent;

        /// <summary>
        /// Event BackgroundMusic.AudioRouting.Destination 2 Button.Press (from panel to Control System)
        /// </summary>
        event EventHandler<UIEventArgs> Destination2Button_PressEvent;

        /// <summary>
        /// Event BackgroundMusic.AudioRouting.Destination 3 Button.Press (from panel to Control System)
        /// </summary>
        event EventHandler<UIEventArgs> Destination3Button_PressEvent;

        /// <summary>
        /// Event BackgroundMusic.AudioRouting.Destination 4 Button.Press (from panel to Control System)
        /// </summary>
        event EventHandler<UIEventArgs> Destination4Button_PressEvent;

        /// <summary>
        /// Event BackgroundMusic.AudioRouting.Destination 5 Button.Press (from panel to Control System)
        /// </summary>
        event EventHandler<UIEventArgs> Destination5Button_PressEvent;

        /// <summary>
        /// Event BackgroundMusic.AudioRouting.Destination 6 Button.Press (from panel to Control System)
        /// </summary>
        event EventHandler<UIEventArgs> Destination6Button_PressEvent;

        /// <summary>
        /// Event BackgroundMusic.AudioRouting.Destination 7 Button.Press (from panel to Control System)
        /// </summary>
        event EventHandler<UIEventArgs> Destination7Button_PressEvent;

        /// <summary>
        /// Event BackgroundMusic.AudioRouting.Destination 8 Button.Press (from panel to Control System)
        /// </summary>
        event EventHandler<UIEventArgs> Destination8Button_PressEvent;

        /// <summary>
        /// Event BackgroundMusic.AudioRouting.Destination 9 Button.Press (from panel to Control System)
        /// </summary>
        event EventHandler<UIEventArgs> Destination9Button_PressEvent;

        /// <summary>
        /// Event BackgroundMusic.AudioRouting.Source 10 Button.Press (from panel to Control System)
        /// </summary>
        event EventHandler<UIEventArgs> Source10Button_PressEvent;

        /// <summary>
        /// Event BackgroundMusic.AudioRouting.Source 11 Button.Press (from panel to Control System)
        /// </summary>
        event EventHandler<UIEventArgs> Source11Button_PressEvent;

        /// <summary>
        /// Event BackgroundMusic.AudioRouting.Source 12 Button.Press (from panel to Control System)
        /// </summary>
        event EventHandler<UIEventArgs> Source12Button_PressEvent;

        /// <summary>
        /// Event BackgroundMusic.AudioRouting.Source 1 Button.Press (from panel to Control System)
        /// </summary>
        event EventHandler<UIEventArgs> Source1Button_PressEvent;

        /// <summary>
        /// Event BackgroundMusic.AudioRouting.Source 2 Button.Press (from panel to Control System)
        /// </summary>
        event EventHandler<UIEventArgs> Source2Button_PressEvent;

        /// <summary>
        /// Event BackgroundMusic.AudioRouting.Source 3 Button.Press (from panel to Control System)
        /// </summary>
        event EventHandler<UIEventArgs> Source3Button_PressEvent;

        /// <summary>
        /// Event BackgroundMusic.AudioRouting.Source 4 Button.Press (from panel to Control System)
        /// </summary>
        event EventHandler<UIEventArgs> Source4Button_PressEvent;

        /// <summary>
        /// Event BackgroundMusic.AudioRouting.Source 5 Button.Press (from panel to Control System)
        /// </summary>
        event EventHandler<UIEventArgs> Source5Button_PressEvent;

        /// <summary>
        /// Event BackgroundMusic.AudioRouting.Source 6 Button.Press (from panel to Control System)
        /// </summary>
        event EventHandler<UIEventArgs> Source6Button_PressEvent;

        /// <summary>
        /// Event BackgroundMusic.AudioRouting.Source 7 Button.Press (from panel to Control System)
        /// </summary>
        event EventHandler<UIEventArgs> Source7Button_PressEvent;

        /// <summary>
        /// Event BackgroundMusic.AudioRouting.Source 8 Button.Press (from panel to Control System)
        /// </summary>
        event EventHandler<UIEventArgs> Source8Button_PressEvent;

        /// <summary>
        /// Event BackgroundMusic.AudioRouting.Source 9 Button.Press (from panel to Control System)
        /// </summary>
        event EventHandler<UIEventArgs> Source9Button_PressEvent;

        /// <summary>
        /// BackgroundMusic.AudioRouting.Destination 10 Button.Visibility Feedback
        /// </summary>
        /// <param name="callback">The bool delegate to update the panel.</param>
        void Destination10Button_Visibility_fb(AudioRoutingBoolInputSigDelegate callback);

        /// <summary>
        /// BackgroundMusic.AudioRouting.Destination 10 Button.Visibility Feedback
        /// </summary>
        /// <param name="digital">The bool to update the panel.</param>
        void Destination10Button_Visibility_fb(bool digital);

        /// <summary>
        /// BackgroundMusic.AudioRouting.Destination 1 Button.Visibility Feedback
        /// </summary>
        /// <param name="callback">The bool delegate to update the panel.</param>
        void Destination1Button_Visibility_fb(AudioRoutingBoolInputSigDelegate callback);

        /// <summary>
        /// BackgroundMusic.AudioRouting.Destination 1 Button.Visibility Feedback
        /// </summary>
        /// <param name="digital">The bool to update the panel.</param>
        void Destination1Button_Visibility_fb(bool digital);

        /// <summary>
        /// BackgroundMusic.AudioRouting.Destination 2 Button.Visibility Feedback
        /// </summary>
        /// <param name="callback">The bool delegate to update the panel.</param>
        void Destination2Button_Visibility_fb(AudioRoutingBoolInputSigDelegate callback);

        /// <summary>
        /// BackgroundMusic.AudioRouting.Destination 2 Button.Visibility Feedback
        /// </summary>
        /// <param name="digital">The bool to update the panel.</param>
        void Destination2Button_Visibility_fb(bool digital);

        /// <summary>
        /// BackgroundMusic.AudioRouting.Destination 3 Button.Visibility Feedback
        /// </summary>
        /// <param name="callback">The bool delegate to update the panel.</param>
        void Destination3Button_Visibility_fb(AudioRoutingBoolInputSigDelegate callback);

        /// <summary>
        /// BackgroundMusic.AudioRouting.Destination 3 Button.Visibility Feedback
        /// </summary>
        /// <param name="digital">The bool to update the panel.</param>
        void Destination3Button_Visibility_fb(bool digital);

        /// <summary>
        /// BackgroundMusic.AudioRouting.Destination 4 Button.Visibility Feedback
        /// </summary>
        /// <param name="callback">The bool delegate to update the panel.</param>
        void Destination4Button_Visibility_fb(AudioRoutingBoolInputSigDelegate callback);

        /// <summary>
        /// BackgroundMusic.AudioRouting.Destination 4 Button.Visibility Feedback
        /// </summary>
        /// <param name="digital">The bool to update the panel.</param>
        void Destination4Button_Visibility_fb(bool digital);

        /// <summary>
        /// BackgroundMusic.AudioRouting.Destination 5 Button.Visibility Feedback
        /// </summary>
        /// <param name="callback">The bool delegate to update the panel.</param>
        void Destination5Button_Visibility_fb(AudioRoutingBoolInputSigDelegate callback);

        /// <summary>
        /// BackgroundMusic.AudioRouting.Destination 5 Button.Visibility Feedback
        /// </summary>
        /// <param name="digital">The bool to update the panel.</param>
        void Destination5Button_Visibility_fb(bool digital);

        /// <summary>
        /// BackgroundMusic.AudioRouting.Destination 6 Button.Visibility Feedback
        /// </summary>
        /// <param name="callback">The bool delegate to update the panel.</param>
        void Destination6Button_Visibility_fb(AudioRoutingBoolInputSigDelegate callback);

        /// <summary>
        /// BackgroundMusic.AudioRouting.Destination 6 Button.Visibility Feedback
        /// </summary>
        /// <param name="digital">The bool to update the panel.</param>
        void Destination6Button_Visibility_fb(bool digital);

        /// <summary>
        /// BackgroundMusic.AudioRouting.Destination 7 Button.Visibility Feedback
        /// </summary>
        /// <param name="callback">The bool delegate to update the panel.</param>
        void Destination7Button_Visibility_fb(AudioRoutingBoolInputSigDelegate callback);

        /// <summary>
        /// BackgroundMusic.AudioRouting.Destination 7 Button.Visibility Feedback
        /// </summary>
        /// <param name="digital">The bool to update the panel.</param>
        void Destination7Button_Visibility_fb(bool digital);

        /// <summary>
        /// BackgroundMusic.AudioRouting.Destination 8 Button.Visibility Feedback
        /// </summary>
        /// <param name="callback">The bool delegate to update the panel.</param>
        void Destination8Button_Visibility_fb(AudioRoutingBoolInputSigDelegate callback);

        /// <summary>
        /// BackgroundMusic.AudioRouting.Destination 8 Button.Visibility Feedback
        /// </summary>
        /// <param name="digital">The bool to update the panel.</param>
        void Destination8Button_Visibility_fb(bool digital);

        /// <summary>
        /// BackgroundMusic.AudioRouting.Destination 9 Button.Visibility Feedback
        /// </summary>
        /// <param name="callback">The bool delegate to update the panel.</param>
        void Destination9Button_Visibility_fb(AudioRoutingBoolInputSigDelegate callback);

        /// <summary>
        /// BackgroundMusic.AudioRouting.Destination 9 Button.Visibility Feedback
        /// </summary>
        /// <param name="digital">The bool to update the panel.</param>
        void Destination9Button_Visibility_fb(bool digital);

        /// <summary>
        /// BackgroundMusic.AudioRouting.Source 10 Button.Visibility Feedback
        /// </summary>
        /// <param name="callback">The bool delegate to update the panel.</param>
        void Source10Button_Visibility_fb(AudioRoutingBoolInputSigDelegate callback);

        /// <summary>
        /// BackgroundMusic.AudioRouting.Source 10 Button.Visibility Feedback
        /// </summary>
        /// <param name="digital">The bool to update the panel.</param>
        void Source10Button_Visibility_fb(bool digital);

        /// <summary>
        /// BackgroundMusic.AudioRouting.Source 11 Button.Visibility Feedback
        /// </summary>
        /// <param name="callback">The bool delegate to update the panel.</param>
        void Source11Button_Visibility_fb(AudioRoutingBoolInputSigDelegate callback);

        /// <summary>
        /// BackgroundMusic.AudioRouting.Source 11 Button.Visibility Feedback
        /// </summary>
        /// <param name="digital">The bool to update the panel.</param>
        void Source11Button_Visibility_fb(bool digital);

        /// <summary>
        /// BackgroundMusic.AudioRouting.Source 12 Button.Visibility Feedback
        /// </summary>
        /// <param name="callback">The bool delegate to update the panel.</param>
        void Source12Button_Visibility_fb(AudioRoutingBoolInputSigDelegate callback);

        /// <summary>
        /// BackgroundMusic.AudioRouting.Source 12 Button.Visibility Feedback
        /// </summary>
        /// <param name="digital">The bool to update the panel.</param>
        void Source12Button_Visibility_fb(bool digital);

        /// <summary>
        /// BackgroundMusic.AudioRouting.Source 1 Button.Visibility Feedback
        /// </summary>
        /// <param name="callback">The bool delegate to update the panel.</param>
        void Source1Button_Visibility_fb(AudioRoutingBoolInputSigDelegate callback);

        /// <summary>
        /// BackgroundMusic.AudioRouting.Source 1 Button.Visibility Feedback
        /// </summary>
        /// <param name="digital">The bool to update the panel.</param>
        void Source1Button_Visibility_fb(bool digital);

        /// <summary>
        /// BackgroundMusic.AudioRouting.Source 2 Button.Visibility Feedback
        /// </summary>
        /// <param name="callback">The bool delegate to update the panel.</param>
        void Source2Button_Visibility_fb(AudioRoutingBoolInputSigDelegate callback);

        /// <summary>
        /// BackgroundMusic.AudioRouting.Source 2 Button.Visibility Feedback
        /// </summary>
        /// <param name="digital">The bool to update the panel.</param>
        void Source2Button_Visibility_fb(bool digital);

        /// <summary>
        /// BackgroundMusic.AudioRouting.Source 3 Button.Visibility Feedback
        /// </summary>
        /// <param name="callback">The bool delegate to update the panel.</param>
        void Source3Button_Visibility_fb(AudioRoutingBoolInputSigDelegate callback);

        /// <summary>
        /// BackgroundMusic.AudioRouting.Source 3 Button.Visibility Feedback
        /// </summary>
        /// <param name="digital">The bool to update the panel.</param>
        void Source3Button_Visibility_fb(bool digital);

        /// <summary>
        /// BackgroundMusic.AudioRouting.Source 4 Button.Visibility Feedback
        /// </summary>
        /// <param name="callback">The bool delegate to update the panel.</param>
        void Source4Button_Visibility_fb(AudioRoutingBoolInputSigDelegate callback);

        /// <summary>
        /// BackgroundMusic.AudioRouting.Source 4 Button.Visibility Feedback
        /// </summary>
        /// <param name="digital">The bool to update the panel.</param>
        void Source4Button_Visibility_fb(bool digital);

        /// <summary>
        /// BackgroundMusic.AudioRouting.Source 5 Button.Visibility Feedback
        /// </summary>
        /// <param name="callback">The bool delegate to update the panel.</param>
        void Source5Button_Visibility_fb(AudioRoutingBoolInputSigDelegate callback);

        /// <summary>
        /// BackgroundMusic.AudioRouting.Source 5 Button.Visibility Feedback
        /// </summary>
        /// <param name="digital">The bool to update the panel.</param>
        void Source5Button_Visibility_fb(bool digital);

        /// <summary>
        /// BackgroundMusic.AudioRouting.Source 6 Button.Visibility Feedback
        /// </summary>
        /// <param name="callback">The bool delegate to update the panel.</param>
        void Source6Button_Visibility_fb(AudioRoutingBoolInputSigDelegate callback);

        /// <summary>
        /// BackgroundMusic.AudioRouting.Source 6 Button.Visibility Feedback
        /// </summary>
        /// <param name="digital">The bool to update the panel.</param>
        void Source6Button_Visibility_fb(bool digital);

        /// <summary>
        /// BackgroundMusic.AudioRouting.Source 7 Button.Visibility Feedback
        /// </summary>
        /// <param name="callback">The bool delegate to update the panel.</param>
        void Source7Button_Visibility_fb(AudioRoutingBoolInputSigDelegate callback);

        /// <summary>
        /// BackgroundMusic.AudioRouting.Source 7 Button.Visibility Feedback
        /// </summary>
        /// <param name="digital">The bool to update the panel.</param>
        void Source7Button_Visibility_fb(bool digital);

        /// <summary>
        /// BackgroundMusic.AudioRouting.Source 8 Button.Visibility Feedback
        /// </summary>
        /// <param name="callback">The bool delegate to update the panel.</param>
        void Source8Button_Visibility_fb(AudioRoutingBoolInputSigDelegate callback);

        /// <summary>
        /// BackgroundMusic.AudioRouting.Source 8 Button.Visibility Feedback
        /// </summary>
        /// <param name="digital">The bool to update the panel.</param>
        void Source8Button_Visibility_fb(bool digital);

        /// <summary>
        /// BackgroundMusic.AudioRouting.Source 9 Button.Visibility Feedback
        /// </summary>
        /// <param name="callback">The bool delegate to update the panel.</param>
        void Source9Button_Visibility_fb(AudioRoutingBoolInputSigDelegate callback);

        /// <summary>
        /// BackgroundMusic.AudioRouting.Source 9 Button.Visibility Feedback
        /// </summary>
        /// <param name="digital">The bool to update the panel.</param>
        void Source9Button_Visibility_fb(bool digital);

        /// <summary>
        /// Audio Routing.Visibility Feedback
        /// </summary>
        /// <param name="callback">The bool delegate to update the panel.</param>
        void AudioRouting_Visibility_fb(AudioRoutingBoolInputSigDelegate callback);

        /// <summary>
        /// Audio Routing.Visibility Feedback
        /// </summary>
        /// <param name="digital">The bool to update the panel.</param>
        void AudioRouting_Visibility_fb(bool digital);

        /// <summary>
        /// BackgroundMusic.AudioRouting.Destination 10 Label.Visibility Feedback
        /// </summary>
        /// <param name="callback">The bool delegate to update the panel.</param>
        void Destination10Label_Visibility_fb(AudioRoutingBoolInputSigDelegate callback);

        /// <summary>
        /// BackgroundMusic.AudioRouting.Destination 10 Label.Visibility Feedback
        /// </summary>
        /// <param name="digital">The bool to update the panel.</param>
        void Destination10Label_Visibility_fb(bool digital);

        /// <summary>
        /// BackgroundMusic.AudioRouting.Destination 1 Label.Visibility Feedback
        /// </summary>
        /// <param name="callback">The bool delegate to update the panel.</param>
        void Destination1Label_Visibility_fb(AudioRoutingBoolInputSigDelegate callback);

        /// <summary>
        /// BackgroundMusic.AudioRouting.Destination 1 Label.Visibility Feedback
        /// </summary>
        /// <param name="digital">The bool to update the panel.</param>
        void Destination1Label_Visibility_fb(bool digital);

        /// <summary>
        /// BackgroundMusic.AudioRouting.Destination 2 Label.Visibility Feedback
        /// </summary>
        /// <param name="callback">The bool delegate to update the panel.</param>
        void Destination2Label_Visibility_fb(AudioRoutingBoolInputSigDelegate callback);

        /// <summary>
        /// BackgroundMusic.AudioRouting.Destination 2 Label.Visibility Feedback
        /// </summary>
        /// <param name="digital">The bool to update the panel.</param>
        void Destination2Label_Visibility_fb(bool digital);

        /// <summary>
        /// BackgroundMusic.AudioRouting.Destination 3 Label.Visibility Feedback
        /// </summary>
        /// <param name="callback">The bool delegate to update the panel.</param>
        void Destination3Label_Visibility_fb(AudioRoutingBoolInputSigDelegate callback);

        /// <summary>
        /// BackgroundMusic.AudioRouting.Destination 3 Label.Visibility Feedback
        /// </summary>
        /// <param name="digital">The bool to update the panel.</param>
        void Destination3Label_Visibility_fb(bool digital);

        /// <summary>
        /// BackgroundMusic.AudioRouting.Destination 4 Label.Visibility Feedback
        /// </summary>
        /// <param name="callback">The bool delegate to update the panel.</param>
        void Destination4Label_Visibility_fb(AudioRoutingBoolInputSigDelegate callback);

        /// <summary>
        /// BackgroundMusic.AudioRouting.Destination 4 Label.Visibility Feedback
        /// </summary>
        /// <param name="digital">The bool to update the panel.</param>
        void Destination4Label_Visibility_fb(bool digital);

        /// <summary>
        /// BackgroundMusic.AudioRouting.Destination 5 Label.Visibility Feedback
        /// </summary>
        /// <param name="callback">The bool delegate to update the panel.</param>
        void Destination5Label_Visibility_fb(AudioRoutingBoolInputSigDelegate callback);

        /// <summary>
        /// BackgroundMusic.AudioRouting.Destination 5 Label.Visibility Feedback
        /// </summary>
        /// <param name="digital">The bool to update the panel.</param>
        void Destination5Label_Visibility_fb(bool digital);

        /// <summary>
        /// BackgroundMusic.AudioRouting.Destination 6 Label.Visibility Feedback
        /// </summary>
        /// <param name="callback">The bool delegate to update the panel.</param>
        void Destination6Label_Visibility_fb(AudioRoutingBoolInputSigDelegate callback);

        /// <summary>
        /// BackgroundMusic.AudioRouting.Destination 6 Label.Visibility Feedback
        /// </summary>
        /// <param name="digital">The bool to update the panel.</param>
        void Destination6Label_Visibility_fb(bool digital);

        /// <summary>
        /// BackgroundMusic.AudioRouting.Destination 7 Label.Visibility Feedback
        /// </summary>
        /// <param name="callback">The bool delegate to update the panel.</param>
        void Destination7Label_Visibility_fb(AudioRoutingBoolInputSigDelegate callback);

        /// <summary>
        /// BackgroundMusic.AudioRouting.Destination 7 Label.Visibility Feedback
        /// </summary>
        /// <param name="digital">The bool to update the panel.</param>
        void Destination7Label_Visibility_fb(bool digital);

        /// <summary>
        /// BackgroundMusic.AudioRouting.Destination 8 Label.Visibility Feedback
        /// </summary>
        /// <param name="callback">The bool delegate to update the panel.</param>
        void Destination8Label_Visibility_fb(AudioRoutingBoolInputSigDelegate callback);

        /// <summary>
        /// BackgroundMusic.AudioRouting.Destination 8 Label.Visibility Feedback
        /// </summary>
        /// <param name="digital">The bool to update the panel.</param>
        void Destination8Label_Visibility_fb(bool digital);

        /// <summary>
        /// BackgroundMusic.AudioRouting.Destination 9 Label.Visibility Feedback
        /// </summary>
        /// <param name="callback">The bool delegate to update the panel.</param>
        void Destination9Label_Visibility_fb(AudioRoutingBoolInputSigDelegate callback);

        /// <summary>
        /// BackgroundMusic.AudioRouting.Destination 9 Label.Visibility Feedback
        /// </summary>
        /// <param name="digital">The bool to update the panel.</param>
        void Destination9Label_Visibility_fb(bool digital);

        /// <summary>
        /// BackgroundMusic.AudioRouting.Destination 10 Button.Selected Feedback
        /// </summary>
        /// <param name="callback">The bool delegate to update the panel.</param>
        void Destination10Button_Selected(AudioRoutingBoolInputSigDelegate callback);

        /// <summary>
        /// BackgroundMusic.AudioRouting.Destination 10 Button.Selected Feedback
        /// </summary>
        /// <param name="digital">The bool to update the panel.</param>
        void Destination10Button_Selected(bool digital);

        /// <summary>
        /// BackgroundMusic.AudioRouting.Destination 1 Button.Selected Feedback
        /// </summary>
        /// <param name="callback">The bool delegate to update the panel.</param>
        void Destination1Button_Selected(AudioRoutingBoolInputSigDelegate callback);

        /// <summary>
        /// BackgroundMusic.AudioRouting.Destination 1 Button.Selected Feedback
        /// </summary>
        /// <param name="digital">The bool to update the panel.</param>
        void Destination1Button_Selected(bool digital);

        /// <summary>
        /// BackgroundMusic.AudioRouting.Destination 2 Button.Selected Feedback
        /// </summary>
        /// <param name="callback">The bool delegate to update the panel.</param>
        void Destination2Button_Selected(AudioRoutingBoolInputSigDelegate callback);

        /// <summary>
        /// BackgroundMusic.AudioRouting.Destination 2 Button.Selected Feedback
        /// </summary>
        /// <param name="digital">The bool to update the panel.</param>
        void Destination2Button_Selected(bool digital);

        /// <summary>
        /// BackgroundMusic.AudioRouting.Destination 3 Button.Selected Feedback
        /// </summary>
        /// <param name="callback">The bool delegate to update the panel.</param>
        void Destination3Button_Selected(AudioRoutingBoolInputSigDelegate callback);

        /// <summary>
        /// BackgroundMusic.AudioRouting.Destination 3 Button.Selected Feedback
        /// </summary>
        /// <param name="digital">The bool to update the panel.</param>
        void Destination3Button_Selected(bool digital);

        /// <summary>
        /// BackgroundMusic.AudioRouting.Destination 4 Button.Selected Feedback
        /// </summary>
        /// <param name="callback">The bool delegate to update the panel.</param>
        void Destination4Button_Selected(AudioRoutingBoolInputSigDelegate callback);

        /// <summary>
        /// BackgroundMusic.AudioRouting.Destination 4 Button.Selected Feedback
        /// </summary>
        /// <param name="digital">The bool to update the panel.</param>
        void Destination4Button_Selected(bool digital);

        /// <summary>
        /// BackgroundMusic.AudioRouting.Destination 5 Button.Selected Feedback
        /// </summary>
        /// <param name="callback">The bool delegate to update the panel.</param>
        void Destination5Button_Selected(AudioRoutingBoolInputSigDelegate callback);

        /// <summary>
        /// BackgroundMusic.AudioRouting.Destination 5 Button.Selected Feedback
        /// </summary>
        /// <param name="digital">The bool to update the panel.</param>
        void Destination5Button_Selected(bool digital);

        /// <summary>
        /// BackgroundMusic.AudioRouting.Destination 6 Button.Selected Feedback
        /// </summary>
        /// <param name="callback">The bool delegate to update the panel.</param>
        void Destination6Button_Selected(AudioRoutingBoolInputSigDelegate callback);

        /// <summary>
        /// BackgroundMusic.AudioRouting.Destination 6 Button.Selected Feedback
        /// </summary>
        /// <param name="digital">The bool to update the panel.</param>
        void Destination6Button_Selected(bool digital);

        /// <summary>
        /// BackgroundMusic.AudioRouting.Destination 7 Button.Selected Feedback
        /// </summary>
        /// <param name="callback">The bool delegate to update the panel.</param>
        void Destination7Button_Selected(AudioRoutingBoolInputSigDelegate callback);

        /// <summary>
        /// BackgroundMusic.AudioRouting.Destination 7 Button.Selected Feedback
        /// </summary>
        /// <param name="digital">The bool to update the panel.</param>
        void Destination7Button_Selected(bool digital);

        /// <summary>
        /// BackgroundMusic.AudioRouting.Destination 8 Button.Selected Feedback
        /// </summary>
        /// <param name="callback">The bool delegate to update the panel.</param>
        void Destination8Button_Selected(AudioRoutingBoolInputSigDelegate callback);

        /// <summary>
        /// BackgroundMusic.AudioRouting.Destination 8 Button.Selected Feedback
        /// </summary>
        /// <param name="digital">The bool to update the panel.</param>
        void Destination8Button_Selected(bool digital);

        /// <summary>
        /// BackgroundMusic.AudioRouting.Destination 9 Button.Selected Feedback
        /// </summary>
        /// <param name="callback">The bool delegate to update the panel.</param>
        void Destination9Button_Selected(AudioRoutingBoolInputSigDelegate callback);

        /// <summary>
        /// BackgroundMusic.AudioRouting.Destination 9 Button.Selected Feedback
        /// </summary>
        /// <param name="digital">The bool to update the panel.</param>
        void Destination9Button_Selected(bool digital);

        /// <summary>
        /// BackgroundMusic.AudioRouting.Source 10 Button.Selected Feedback
        /// </summary>
        /// <param name="callback">The bool delegate to update the panel.</param>
        void Source10Button_Selected(AudioRoutingBoolInputSigDelegate callback);

        /// <summary>
        /// BackgroundMusic.AudioRouting.Source 10 Button.Selected Feedback
        /// </summary>
        /// <param name="digital">The bool to update the panel.</param>
        void Source10Button_Selected(bool digital);

        /// <summary>
        /// BackgroundMusic.AudioRouting.Source 11 Button.Selected Feedback
        /// </summary>
        /// <param name="callback">The bool delegate to update the panel.</param>
        void Source11Button_Selected(AudioRoutingBoolInputSigDelegate callback);

        /// <summary>
        /// BackgroundMusic.AudioRouting.Source 11 Button.Selected Feedback
        /// </summary>
        /// <param name="digital">The bool to update the panel.</param>
        void Source11Button_Selected(bool digital);

        /// <summary>
        /// BackgroundMusic.AudioRouting.Source 12 Button.Selected Feedback
        /// </summary>
        /// <param name="callback">The bool delegate to update the panel.</param>
        void Source12Button_Selected(AudioRoutingBoolInputSigDelegate callback);

        /// <summary>
        /// BackgroundMusic.AudioRouting.Source 12 Button.Selected Feedback
        /// </summary>
        /// <param name="digital">The bool to update the panel.</param>
        void Source12Button_Selected(bool digital);

        /// <summary>
        /// BackgroundMusic.AudioRouting.Source 1 Button.Selected Feedback
        /// </summary>
        /// <param name="callback">The bool delegate to update the panel.</param>
        void Source1Button_Selected(AudioRoutingBoolInputSigDelegate callback);

        /// <summary>
        /// BackgroundMusic.AudioRouting.Source 1 Button.Selected Feedback
        /// </summary>
        /// <param name="digital">The bool to update the panel.</param>
        void Source1Button_Selected(bool digital);

        /// <summary>
        /// BackgroundMusic.AudioRouting.Source 2 Button.Selected Feedback
        /// </summary>
        /// <param name="callback">The bool delegate to update the panel.</param>
        void Source2Button_Selected(AudioRoutingBoolInputSigDelegate callback);

        /// <summary>
        /// BackgroundMusic.AudioRouting.Source 2 Button.Selected Feedback
        /// </summary>
        /// <param name="digital">The bool to update the panel.</param>
        void Source2Button_Selected(bool digital);

        /// <summary>
        /// BackgroundMusic.AudioRouting.Source 3 Button.Selected Feedback
        /// </summary>
        /// <param name="callback">The bool delegate to update the panel.</param>
        void Source3Button_Selected(AudioRoutingBoolInputSigDelegate callback);

        /// <summary>
        /// BackgroundMusic.AudioRouting.Source 3 Button.Selected Feedback
        /// </summary>
        /// <param name="digital">The bool to update the panel.</param>
        void Source3Button_Selected(bool digital);

        /// <summary>
        /// BackgroundMusic.AudioRouting.Source 4 Button.Selected Feedback
        /// </summary>
        /// <param name="callback">The bool delegate to update the panel.</param>
        void Source4Button_Selected(AudioRoutingBoolInputSigDelegate callback);

        /// <summary>
        /// BackgroundMusic.AudioRouting.Source 4 Button.Selected Feedback
        /// </summary>
        /// <param name="digital">The bool to update the panel.</param>
        void Source4Button_Selected(bool digital);

        /// <summary>
        /// BackgroundMusic.AudioRouting.Source 5 Button.Selected Feedback
        /// </summary>
        /// <param name="callback">The bool delegate to update the panel.</param>
        void Source5Button_Selected(AudioRoutingBoolInputSigDelegate callback);

        /// <summary>
        /// BackgroundMusic.AudioRouting.Source 5 Button.Selected Feedback
        /// </summary>
        /// <param name="digital">The bool to update the panel.</param>
        void Source5Button_Selected(bool digital);

        /// <summary>
        /// BackgroundMusic.AudioRouting.Source 6 Button.Selected Feedback
        /// </summary>
        /// <param name="callback">The bool delegate to update the panel.</param>
        void Source6Button_Selected(AudioRoutingBoolInputSigDelegate callback);

        /// <summary>
        /// BackgroundMusic.AudioRouting.Source 6 Button.Selected Feedback
        /// </summary>
        /// <param name="digital">The bool to update the panel.</param>
        void Source6Button_Selected(bool digital);

        /// <summary>
        /// BackgroundMusic.AudioRouting.Source 7 Button.Selected Feedback
        /// </summary>
        /// <param name="callback">The bool delegate to update the panel.</param>
        void Source7Button_Selected(AudioRoutingBoolInputSigDelegate callback);

        /// <summary>
        /// BackgroundMusic.AudioRouting.Source 7 Button.Selected Feedback
        /// </summary>
        /// <param name="digital">The bool to update the panel.</param>
        void Source7Button_Selected(bool digital);

        /// <summary>
        /// BackgroundMusic.AudioRouting.Source 8 Button.Selected Feedback
        /// </summary>
        /// <param name="callback">The bool delegate to update the panel.</param>
        void Source8Button_Selected(AudioRoutingBoolInputSigDelegate callback);

        /// <summary>
        /// BackgroundMusic.AudioRouting.Source 8 Button.Selected Feedback
        /// </summary>
        /// <param name="digital">The bool to update the panel.</param>
        void Source8Button_Selected(bool digital);

        /// <summary>
        /// BackgroundMusic.AudioRouting.Source 9 Button.Selected Feedback
        /// </summary>
        /// <param name="callback">The bool delegate to update the panel.</param>
        void Source9Button_Selected(AudioRoutingBoolInputSigDelegate callback);

        /// <summary>
        /// BackgroundMusic.AudioRouting.Source 9 Button.Selected Feedback
        /// </summary>
        /// <param name="digital">The bool to update the panel.</param>
        void Source9Button_Selected(bool digital);

        /// <summary>
        /// BackgroundMusic.AudioRouting.Destination 10 Button.Indirect Rich Text Feedback
        /// </summary>
        /// <param name="callback">The <see cref="string"/> delegate to update the panel.</param>
        void Destination10Button_IndirectRichText(AudioRoutingStringInputSigDelegate callback);

        /// <summary>
        /// BackgroundMusic.AudioRouting.Destination 10 Button.Indirect Rich Text Feedback
        /// </summary>
        /// <param name="serial">The <see cref="string"/> to update the panel.</param>
        void Destination10Button_IndirectRichText(string serial);

        /// <summary>
        /// BackgroundMusic.AudioRouting.Destination 10 Label.Indirect Rich Text Feedback
        /// </summary>
        /// <param name="callback">The <see cref="string"/> delegate to update the panel.</param>
        void Destination10Label_IndirectRichText(AudioRoutingStringInputSigDelegate callback);

        /// <summary>
        /// BackgroundMusic.AudioRouting.Destination 10 Label.Indirect Rich Text Feedback
        /// </summary>
        /// <param name="serial">The <see cref="string"/> to update the panel.</param>
        void Destination10Label_IndirectRichText(string serial);

        /// <summary>
        /// BackgroundMusic.AudioRouting.Destination 1 Button.Indirect Rich Text Feedback
        /// </summary>
        /// <param name="callback">The <see cref="string"/> delegate to update the panel.</param>
        void Destination1Button_IndirectRichText(AudioRoutingStringInputSigDelegate callback);

        /// <summary>
        /// BackgroundMusic.AudioRouting.Destination 1 Button.Indirect Rich Text Feedback
        /// </summary>
        /// <param name="serial">The <see cref="string"/> to update the panel.</param>
        void Destination1Button_IndirectRichText(string serial);

        /// <summary>
        /// BackgroundMusic.AudioRouting.Destination 1 Label.Indirect Rich Text Feedback
        /// </summary>
        /// <param name="callback">The <see cref="string"/> delegate to update the panel.</param>
        void Destination1Label_IndirectRichText(AudioRoutingStringInputSigDelegate callback);

        /// <summary>
        /// BackgroundMusic.AudioRouting.Destination 1 Label.Indirect Rich Text Feedback
        /// </summary>
        /// <param name="serial">The <see cref="string"/> to update the panel.</param>
        void Destination1Label_IndirectRichText(string serial);

        /// <summary>
        /// BackgroundMusic.AudioRouting.Destination 2 Button.Indirect Rich Text Feedback
        /// </summary>
        /// <param name="callback">The <see cref="string"/> delegate to update the panel.</param>
        void Destination2Button_IndirectRichText(AudioRoutingStringInputSigDelegate callback);

        /// <summary>
        /// BackgroundMusic.AudioRouting.Destination 2 Button.Indirect Rich Text Feedback
        /// </summary>
        /// <param name="serial">The <see cref="string"/> to update the panel.</param>
        void Destination2Button_IndirectRichText(string serial);

        /// <summary>
        /// BackgroundMusic.AudioRouting.Destination 2 Label.Indirect Rich Text Feedback
        /// </summary>
        /// <param name="callback">The <see cref="string"/> delegate to update the panel.</param>
        void Destination2Label_IndirectRichText(AudioRoutingStringInputSigDelegate callback);

        /// <summary>
        /// BackgroundMusic.AudioRouting.Destination 2 Label.Indirect Rich Text Feedback
        /// </summary>
        /// <param name="serial">The <see cref="string"/> to update the panel.</param>
        void Destination2Label_IndirectRichText(string serial);

        /// <summary>
        /// BackgroundMusic.AudioRouting.Destination 3 Button.Indirect Rich Text Feedback
        /// </summary>
        /// <param name="callback">The <see cref="string"/> delegate to update the panel.</param>
        void Destination3Button_IndirectRichText(AudioRoutingStringInputSigDelegate callback);

        /// <summary>
        /// BackgroundMusic.AudioRouting.Destination 3 Button.Indirect Rich Text Feedback
        /// </summary>
        /// <param name="serial">The <see cref="string"/> to update the panel.</param>
        void Destination3Button_IndirectRichText(string serial);

        /// <summary>
        /// BackgroundMusic.AudioRouting.Destination 3 Label.Indirect Rich Text Feedback
        /// </summary>
        /// <param name="callback">The <see cref="string"/> delegate to update the panel.</param>
        void Destination3Label_IndirectRichText(AudioRoutingStringInputSigDelegate callback);

        /// <summary>
        /// BackgroundMusic.AudioRouting.Destination 3 Label.Indirect Rich Text Feedback
        /// </summary>
        /// <param name="serial">The <see cref="string"/> to update the panel.</param>
        void Destination3Label_IndirectRichText(string serial);

        /// <summary>
        /// BackgroundMusic.AudioRouting.Destination 4 Button.Indirect Rich Text Feedback
        /// </summary>
        /// <param name="callback">The <see cref="string"/> delegate to update the panel.</param>
        void Destination4Button_IndirectRichText(AudioRoutingStringInputSigDelegate callback);

        /// <summary>
        /// BackgroundMusic.AudioRouting.Destination 4 Button.Indirect Rich Text Feedback
        /// </summary>
        /// <param name="serial">The <see cref="string"/> to update the panel.</param>
        void Destination4Button_IndirectRichText(string serial);

        /// <summary>
        /// BackgroundMusic.AudioRouting.Destination 4 Label.Indirect Rich Text Feedback
        /// </summary>
        /// <param name="callback">The <see cref="string"/> delegate to update the panel.</param>
        void Destination4Label_IndirectRichText(AudioRoutingStringInputSigDelegate callback);

        /// <summary>
        /// BackgroundMusic.AudioRouting.Destination 4 Label.Indirect Rich Text Feedback
        /// </summary>
        /// <param name="serial">The <see cref="string"/> to update the panel.</param>
        void Destination4Label_IndirectRichText(string serial);

        /// <summary>
        /// BackgroundMusic.AudioRouting.Destination 5 Button.Indirect Rich Text Feedback
        /// </summary>
        /// <param name="callback">The <see cref="string"/> delegate to update the panel.</param>
        void Destination5Button_IndirectRichText(AudioRoutingStringInputSigDelegate callback);

        /// <summary>
        /// BackgroundMusic.AudioRouting.Destination 5 Button.Indirect Rich Text Feedback
        /// </summary>
        /// <param name="serial">The <see cref="string"/> to update the panel.</param>
        void Destination5Button_IndirectRichText(string serial);

        /// <summary>
        /// BackgroundMusic.AudioRouting.Destination 5 Label.Indirect Rich Text Feedback
        /// </summary>
        /// <param name="callback">The <see cref="string"/> delegate to update the panel.</param>
        void Destination5Label_IndirectRichText(AudioRoutingStringInputSigDelegate callback);

        /// <summary>
        /// BackgroundMusic.AudioRouting.Destination 5 Label.Indirect Rich Text Feedback
        /// </summary>
        /// <param name="serial">The <see cref="string"/> to update the panel.</param>
        void Destination5Label_IndirectRichText(string serial);

        /// <summary>
        /// BackgroundMusic.AudioRouting.Destination 6 Button.Indirect Rich Text Feedback
        /// </summary>
        /// <param name="callback">The <see cref="string"/> delegate to update the panel.</param>
        void Destination6Button_IndirectRichText(AudioRoutingStringInputSigDelegate callback);

        /// <summary>
        /// BackgroundMusic.AudioRouting.Destination 6 Button.Indirect Rich Text Feedback
        /// </summary>
        /// <param name="serial">The <see cref="string"/> to update the panel.</param>
        void Destination6Button_IndirectRichText(string serial);

        /// <summary>
        /// BackgroundMusic.AudioRouting.Destination 6 Label.Indirect Rich Text Feedback
        /// </summary>
        /// <param name="callback">The <see cref="string"/> delegate to update the panel.</param>
        void Destination6Label_IndirectRichText(AudioRoutingStringInputSigDelegate callback);

        /// <summary>
        /// BackgroundMusic.AudioRouting.Destination 6 Label.Indirect Rich Text Feedback
        /// </summary>
        /// <param name="serial">The <see cref="string"/> to update the panel.</param>
        void Destination6Label_IndirectRichText(string serial);

        /// <summary>
        /// BackgroundMusic.AudioRouting.Destination 7 Button.Indirect Rich Text Feedback
        /// </summary>
        /// <param name="callback">The <see cref="string"/> delegate to update the panel.</param>
        void Destination7Button_IndirectRichText(AudioRoutingStringInputSigDelegate callback);

        /// <summary>
        /// BackgroundMusic.AudioRouting.Destination 7 Button.Indirect Rich Text Feedback
        /// </summary>
        /// <param name="serial">The <see cref="string"/> to update the panel.</param>
        void Destination7Button_IndirectRichText(string serial);

        /// <summary>
        /// BackgroundMusic.AudioRouting.Destination 7 Label.Indirect Rich Text Feedback
        /// </summary>
        /// <param name="callback">The <see cref="string"/> delegate to update the panel.</param>
        void Destination7Label_IndirectRichText(AudioRoutingStringInputSigDelegate callback);

        /// <summary>
        /// BackgroundMusic.AudioRouting.Destination 7 Label.Indirect Rich Text Feedback
        /// </summary>
        /// <param name="serial">The <see cref="string"/> to update the panel.</param>
        void Destination7Label_IndirectRichText(string serial);

        /// <summary>
        /// BackgroundMusic.AudioRouting.Destination 8 Button.Indirect Rich Text Feedback
        /// </summary>
        /// <param name="callback">The <see cref="string"/> delegate to update the panel.</param>
        void Destination8Button_IndirectRichText(AudioRoutingStringInputSigDelegate callback);

        /// <summary>
        /// BackgroundMusic.AudioRouting.Destination 8 Button.Indirect Rich Text Feedback
        /// </summary>
        /// <param name="serial">The <see cref="string"/> to update the panel.</param>
        void Destination8Button_IndirectRichText(string serial);

        /// <summary>
        /// BackgroundMusic.AudioRouting.Destination 8 Label.Indirect Rich Text Feedback
        /// </summary>
        /// <param name="callback">The <see cref="string"/> delegate to update the panel.</param>
        void Destination8Label_IndirectRichText(AudioRoutingStringInputSigDelegate callback);

        /// <summary>
        /// BackgroundMusic.AudioRouting.Destination 8 Label.Indirect Rich Text Feedback
        /// </summary>
        /// <param name="serial">The <see cref="string"/> to update the panel.</param>
        void Destination8Label_IndirectRichText(string serial);

        /// <summary>
        /// BackgroundMusic.AudioRouting.Destination 9 Button.Indirect Rich Text Feedback
        /// </summary>
        /// <param name="callback">The <see cref="string"/> delegate to update the panel.</param>
        void Destination9Button_IndirectRichText(AudioRoutingStringInputSigDelegate callback);

        /// <summary>
        /// BackgroundMusic.AudioRouting.Destination 9 Button.Indirect Rich Text Feedback
        /// </summary>
        /// <param name="serial">The <see cref="string"/> to update the panel.</param>
        void Destination9Button_IndirectRichText(string serial);

        /// <summary>
        /// BackgroundMusic.AudioRouting.Destination 9 Label.Indirect Rich Text Feedback
        /// </summary>
        /// <param name="callback">The <see cref="string"/> delegate to update the panel.</param>
        void Destination9Label_IndirectRichText(AudioRoutingStringInputSigDelegate callback);

        /// <summary>
        /// BackgroundMusic.AudioRouting.Destination 9 Label.Indirect Rich Text Feedback
        /// </summary>
        /// <param name="serial">The <see cref="string"/> to update the panel.</param>
        void Destination9Label_IndirectRichText(string serial);

        /// <summary>
        /// BackgroundMusic.AudioRouting.Source 10 Button.Indirect Rich Text Feedback
        /// </summary>
        /// <param name="callback">The <see cref="string"/> delegate to update the panel.</param>
        void Source10Button_IndirectRichText(AudioRoutingStringInputSigDelegate callback);

        /// <summary>
        /// BackgroundMusic.AudioRouting.Source 10 Button.Indirect Rich Text Feedback
        /// </summary>
        /// <param name="serial">The <see cref="string"/> to update the panel.</param>
        void Source10Button_IndirectRichText(string serial);

        /// <summary>
        /// BackgroundMusic.AudioRouting.Source 11 Button.Indirect Rich Text Feedback
        /// </summary>
        /// <param name="callback">The <see cref="string"/> delegate to update the panel.</param>
        void Source11Button_IndirectRichText(AudioRoutingStringInputSigDelegate callback);

        /// <summary>
        /// BackgroundMusic.AudioRouting.Source 11 Button.Indirect Rich Text Feedback
        /// </summary>
        /// <param name="serial">The <see cref="string"/> to update the panel.</param>
        void Source11Button_IndirectRichText(string serial);

        /// <summary>
        /// BackgroundMusic.AudioRouting.Source 12 Button.Indirect Rich Text Feedback
        /// </summary>
        /// <param name="callback">The <see cref="string"/> delegate to update the panel.</param>
        void Source12Button_IndirectRichText(AudioRoutingStringInputSigDelegate callback);

        /// <summary>
        /// BackgroundMusic.AudioRouting.Source 12 Button.Indirect Rich Text Feedback
        /// </summary>
        /// <param name="serial">The <see cref="string"/> to update the panel.</param>
        void Source12Button_IndirectRichText(string serial);

        /// <summary>
        /// BackgroundMusic.AudioRouting.Source 1 Button.Indirect Rich Text Feedback
        /// </summary>
        /// <param name="callback">The <see cref="string"/> delegate to update the panel.</param>
        void Source1Button_IndirectRichText(AudioRoutingStringInputSigDelegate callback);

        /// <summary>
        /// BackgroundMusic.AudioRouting.Source 1 Button.Indirect Rich Text Feedback
        /// </summary>
        /// <param name="serial">The <see cref="string"/> to update the panel.</param>
        void Source1Button_IndirectRichText(string serial);

        /// <summary>
        /// BackgroundMusic.AudioRouting.Source 2 Button.Indirect Rich Text Feedback
        /// </summary>
        /// <param name="callback">The <see cref="string"/> delegate to update the panel.</param>
        void Source2Button_IndirectRichText(AudioRoutingStringInputSigDelegate callback);

        /// <summary>
        /// BackgroundMusic.AudioRouting.Source 2 Button.Indirect Rich Text Feedback
        /// </summary>
        /// <param name="serial">The <see cref="string"/> to update the panel.</param>
        void Source2Button_IndirectRichText(string serial);

        /// <summary>
        /// BackgroundMusic.AudioRouting.Source 3 Button.Indirect Rich Text Feedback
        /// </summary>
        /// <param name="callback">The <see cref="string"/> delegate to update the panel.</param>
        void Source3Button_IndirectRichText(AudioRoutingStringInputSigDelegate callback);

        /// <summary>
        /// BackgroundMusic.AudioRouting.Source 3 Button.Indirect Rich Text Feedback
        /// </summary>
        /// <param name="serial">The <see cref="string"/> to update the panel.</param>
        void Source3Button_IndirectRichText(string serial);

        /// <summary>
        /// BackgroundMusic.AudioRouting.Source 4 Button.Indirect Rich Text Feedback
        /// </summary>
        /// <param name="callback">The <see cref="string"/> delegate to update the panel.</param>
        void Source4Button_IndirectRichText(AudioRoutingStringInputSigDelegate callback);

        /// <summary>
        /// BackgroundMusic.AudioRouting.Source 4 Button.Indirect Rich Text Feedback
        /// </summary>
        /// <param name="serial">The <see cref="string"/> to update the panel.</param>
        void Source4Button_IndirectRichText(string serial);

        /// <summary>
        /// BackgroundMusic.AudioRouting.Source 5 Button.Indirect Rich Text Feedback
        /// </summary>
        /// <param name="callback">The <see cref="string"/> delegate to update the panel.</param>
        void Source5Button_IndirectRichText(AudioRoutingStringInputSigDelegate callback);

        /// <summary>
        /// BackgroundMusic.AudioRouting.Source 5 Button.Indirect Rich Text Feedback
        /// </summary>
        /// <param name="serial">The <see cref="string"/> to update the panel.</param>
        void Source5Button_IndirectRichText(string serial);

        /// <summary>
        /// BackgroundMusic.AudioRouting.Source 6 Button.Indirect Rich Text Feedback
        /// </summary>
        /// <param name="callback">The <see cref="string"/> delegate to update the panel.</param>
        void Source6Button_IndirectRichText(AudioRoutingStringInputSigDelegate callback);

        /// <summary>
        /// BackgroundMusic.AudioRouting.Source 6 Button.Indirect Rich Text Feedback
        /// </summary>
        /// <param name="serial">The <see cref="string"/> to update the panel.</param>
        void Source6Button_IndirectRichText(string serial);

        /// <summary>
        /// BackgroundMusic.AudioRouting.Source 7 Button.Indirect Rich Text Feedback
        /// </summary>
        /// <param name="callback">The <see cref="string"/> delegate to update the panel.</param>
        void Source7Button_IndirectRichText(AudioRoutingStringInputSigDelegate callback);

        /// <summary>
        /// BackgroundMusic.AudioRouting.Source 7 Button.Indirect Rich Text Feedback
        /// </summary>
        /// <param name="serial">The <see cref="string"/> to update the panel.</param>
        void Source7Button_IndirectRichText(string serial);

        /// <summary>
        /// BackgroundMusic.AudioRouting.Source 8 Button.Indirect Rich Text Feedback
        /// </summary>
        /// <param name="callback">The <see cref="string"/> delegate to update the panel.</param>
        void Source8Button_IndirectRichText(AudioRoutingStringInputSigDelegate callback);

        /// <summary>
        /// BackgroundMusic.AudioRouting.Source 8 Button.Indirect Rich Text Feedback
        /// </summary>
        /// <param name="serial">The <see cref="string"/> to update the panel.</param>
        void Source8Button_IndirectRichText(string serial);

        /// <summary>
        /// BackgroundMusic.AudioRouting.Source 9 Button.Indirect Rich Text Feedback
        /// </summary>
        /// <param name="callback">The <see cref="string"/> delegate to update the panel.</param>
        void Source9Button_IndirectRichText(AudioRoutingStringInputSigDelegate callback);

        /// <summary>
        /// BackgroundMusic.AudioRouting.Source 9 Button.Indirect Rich Text Feedback
        /// </summary>
        /// <param name="serial">The <see cref="string"/> to update the panel.</param>
        void Source9Button_IndirectRichText(string serial);

        /// <summary>
        /// BackgroundMusic.AudioRouting.Source 10 Button.Icon Feedback
        /// </summary>
        /// <param name="callback">The <see cref="string"/> delegate to update the panel.</param>
        void Source10Button_Icon(AudioRoutingStringInputSigDelegate callback);

        /// <summary>
        /// BackgroundMusic.AudioRouting.Source 10 Button.Icon Feedback
        /// </summary>
        /// <param name="serial">The <see cref="string"/> to update the panel.</param>
        void Source10Button_Icon(string serial);

        /// <summary>
        /// BackgroundMusic.AudioRouting.Source 11 Button.Icon Feedback
        /// </summary>
        /// <param name="callback">The <see cref="string"/> delegate to update the panel.</param>
        void Source11Button_Icon(AudioRoutingStringInputSigDelegate callback);

        /// <summary>
        /// BackgroundMusic.AudioRouting.Source 11 Button.Icon Feedback
        /// </summary>
        /// <param name="serial">The <see cref="string"/> to update the panel.</param>
        void Source11Button_Icon(string serial);

        /// <summary>
        /// BackgroundMusic.AudioRouting.Source 12 Button.Icon Feedback
        /// </summary>
        /// <param name="callback">The <see cref="string"/> delegate to update the panel.</param>
        void Source12Button_Icon(AudioRoutingStringInputSigDelegate callback);

        /// <summary>
        /// BackgroundMusic.AudioRouting.Source 12 Button.Icon Feedback
        /// </summary>
        /// <param name="serial">The <see cref="string"/> to update the panel.</param>
        void Source12Button_Icon(string serial);

        /// <summary>
        /// BackgroundMusic.AudioRouting.Source 1 Button.Icon Feedback
        /// </summary>
        /// <param name="callback">The <see cref="string"/> delegate to update the panel.</param>
        void Source1Button_Icon(AudioRoutingStringInputSigDelegate callback);

        /// <summary>
        /// BackgroundMusic.AudioRouting.Source 1 Button.Icon Feedback
        /// </summary>
        /// <param name="serial">The <see cref="string"/> to update the panel.</param>
        void Source1Button_Icon(string serial);

        /// <summary>
        /// BackgroundMusic.AudioRouting.Source 2 Button.Icon Feedback
        /// </summary>
        /// <param name="callback">The <see cref="string"/> delegate to update the panel.</param>
        void Source2Button_Icon(AudioRoutingStringInputSigDelegate callback);

        /// <summary>
        /// BackgroundMusic.AudioRouting.Source 2 Button.Icon Feedback
        /// </summary>
        /// <param name="serial">The <see cref="string"/> to update the panel.</param>
        void Source2Button_Icon(string serial);

        /// <summary>
        /// BackgroundMusic.AudioRouting.Source 3 Button.Icon Feedback
        /// </summary>
        /// <param name="callback">The <see cref="string"/> delegate to update the panel.</param>
        void Source3Button_Icon(AudioRoutingStringInputSigDelegate callback);

        /// <summary>
        /// BackgroundMusic.AudioRouting.Source 3 Button.Icon Feedback
        /// </summary>
        /// <param name="serial">The <see cref="string"/> to update the panel.</param>
        void Source3Button_Icon(string serial);

        /// <summary>
        /// BackgroundMusic.AudioRouting.Source 4 Button.Icon Feedback
        /// </summary>
        /// <param name="callback">The <see cref="string"/> delegate to update the panel.</param>
        void Source4Button_Icon(AudioRoutingStringInputSigDelegate callback);

        /// <summary>
        /// BackgroundMusic.AudioRouting.Source 4 Button.Icon Feedback
        /// </summary>
        /// <param name="serial">The <see cref="string"/> to update the panel.</param>
        void Source4Button_Icon(string serial);

        /// <summary>
        /// BackgroundMusic.AudioRouting.Source 5 Button.Icon Feedback
        /// </summary>
        /// <param name="callback">The <see cref="string"/> delegate to update the panel.</param>
        void Source5Button_Icon(AudioRoutingStringInputSigDelegate callback);

        /// <summary>
        /// BackgroundMusic.AudioRouting.Source 5 Button.Icon Feedback
        /// </summary>
        /// <param name="serial">The <see cref="string"/> to update the panel.</param>
        void Source5Button_Icon(string serial);

        /// <summary>
        /// BackgroundMusic.AudioRouting.Source 6 Button.Icon Feedback
        /// </summary>
        /// <param name="callback">The <see cref="string"/> delegate to update the panel.</param>
        void Source6Button_Icon(AudioRoutingStringInputSigDelegate callback);

        /// <summary>
        /// BackgroundMusic.AudioRouting.Source 6 Button.Icon Feedback
        /// </summary>
        /// <param name="serial">The <see cref="string"/> to update the panel.</param>
        void Source6Button_Icon(string serial);

        /// <summary>
        /// BackgroundMusic.AudioRouting.Source 7 Button.Icon Feedback
        /// </summary>
        /// <param name="callback">The <see cref="string"/> delegate to update the panel.</param>
        void Source7Button_Icon(AudioRoutingStringInputSigDelegate callback);

        /// <summary>
        /// BackgroundMusic.AudioRouting.Source 7 Button.Icon Feedback
        /// </summary>
        /// <param name="serial">The <see cref="string"/> to update the panel.</param>
        void Source7Button_Icon(string serial);

        /// <summary>
        /// BackgroundMusic.AudioRouting.Source 8 Button.Icon Feedback
        /// </summary>
        /// <param name="callback">The <see cref="string"/> delegate to update the panel.</param>
        void Source8Button_Icon(AudioRoutingStringInputSigDelegate callback);

        /// <summary>
        /// BackgroundMusic.AudioRouting.Source 8 Button.Icon Feedback
        /// </summary>
        /// <param name="serial">The <see cref="string"/> to update the panel.</param>
        void Source8Button_Icon(string serial);

        /// <summary>
        /// BackgroundMusic.AudioRouting.Source 9 Button.Icon Feedback
        /// </summary>
        /// <param name="callback">The <see cref="string"/> delegate to update the panel.</param>
        void Source9Button_Icon(AudioRoutingStringInputSigDelegate callback);

        /// <summary>
        /// BackgroundMusic.AudioRouting.Source 9 Button.Icon Feedback
        /// </summary>
        /// <param name="serial">The <see cref="string"/> to update the panel.</param>
        void Source9Button_Icon(string serial);

        /// <summary>
        /// ComplexComponent Reset Levels Tab Button
        /// </summary>
        SLRCTech.BackgroundMusic.AudioRouting.IResetLevelsTabButton ResetLevelsTabButton { get; }
    }

    /// <summary>
    /// Digital callback used in feedback events.
    /// </summary>
    /// <param name="boolInputSig">The <see cref="BoolInputSig"/> joinInfo data.</param>
    /// <param name="audiorouting">The <see cref="IAudioRouting"/> on which to apply the feedback.</param>
    public delegate void AudioRoutingBoolInputSigDelegate(BoolInputSig boolInputSig, IAudioRouting audiorouting);
    /// <summary>
    /// Digital callback used in feedback events.
    /// </summary>
    /// <param name="stringInputSig">The <see cref="StringInputSig"/> joinInfo data.</param>
    /// <param name="audiorouting">The <see cref="IAudioRouting"/> on which to apply the feedback.</param>
    public delegate void AudioRoutingStringInputSigDelegate(StringInputSig stringInputSig, IAudioRouting audiorouting);

    /// <summary>
    /// AudioRouting
    /// </summary>
    internal partial class AudioRouting : IAudioRouting, IDisposable
    {
        #region Standard CH5 Component members

        private ComponentMediator ComponentMediator { get; set; }

        public object UserObject { get; set; }

        /// <summary>
        /// Gets the ControlJoinId a.k.a. SmartObjectId.  This Id identifies the extender symbol.
        /// </summary>
        public uint ControlJoinId { get; private set; }

        private IList<BasicTriListWithSmartObject> _devices;

        /// <summary>
        /// Gets the list of devices.
        /// </summary>
        public IList<BasicTriListWithSmartObject> Devices { get { return _devices; } }

        #endregion

        #region Joins

        private static class Joins
        {
            /// <summary>
            /// Digital signals,
            /// </summary>
            internal static class Booleans
            {
                /// <summary>
                /// Output or Event digital joinInfo from panel to Control System: BackgroundMusic.AudioRouting.Destination10Button.Press
                /// BackgroundMusic.AudioRouting.Destination 10 Button.Press
                /// </summary>
                public const uint Destination10Button_PressEvent = 2;

                /// <summary>
                /// Output or Event digital joinInfo from panel to Control System: BackgroundMusic.AudioRouting.Destination1Button.Press
                /// BackgroundMusic.AudioRouting.Destination 1 Button.Press
                /// </summary>
                public const uint Destination1Button_PressEvent = 3;

                /// <summary>
                /// Output or Event digital joinInfo from panel to Control System: BackgroundMusic.AudioRouting.Destination2Button.Press
                /// BackgroundMusic.AudioRouting.Destination 2 Button.Press
                /// </summary>
                public const uint Destination2Button_PressEvent = 4;

                /// <summary>
                /// Output or Event digital joinInfo from panel to Control System: BackgroundMusic.AudioRouting.Destination3Button.Press
                /// BackgroundMusic.AudioRouting.Destination 3 Button.Press
                /// </summary>
                public const uint Destination3Button_PressEvent = 5;

                /// <summary>
                /// Output or Event digital joinInfo from panel to Control System: BackgroundMusic.AudioRouting.Destination4Button.Press
                /// BackgroundMusic.AudioRouting.Destination 4 Button.Press
                /// </summary>
                public const uint Destination4Button_PressEvent = 6;

                /// <summary>
                /// Output or Event digital joinInfo from panel to Control System: BackgroundMusic.AudioRouting.Destination5Button.Press
                /// BackgroundMusic.AudioRouting.Destination 5 Button.Press
                /// </summary>
                public const uint Destination5Button_PressEvent = 7;

                /// <summary>
                /// Output or Event digital joinInfo from panel to Control System: BackgroundMusic.AudioRouting.Destination6Button.Press
                /// BackgroundMusic.AudioRouting.Destination 6 Button.Press
                /// </summary>
                public const uint Destination6Button_PressEvent = 8;

                /// <summary>
                /// Output or Event digital joinInfo from panel to Control System: BackgroundMusic.AudioRouting.Destination7Button.Press
                /// BackgroundMusic.AudioRouting.Destination 7 Button.Press
                /// </summary>
                public const uint Destination7Button_PressEvent = 9;

                /// <summary>
                /// Output or Event digital joinInfo from panel to Control System: BackgroundMusic.AudioRouting.Destination8Button.Press
                /// BackgroundMusic.AudioRouting.Destination 8 Button.Press
                /// </summary>
                public const uint Destination8Button_PressEvent = 10;

                /// <summary>
                /// Output or Event digital joinInfo from panel to Control System: BackgroundMusic.AudioRouting.Destination9Button.Press
                /// BackgroundMusic.AudioRouting.Destination 9 Button.Press
                /// </summary>
                public const uint Destination9Button_PressEvent = 11;

                /// <summary>
                /// Output or Event digital joinInfo from panel to Control System: BackgroundMusic.AudioRouting.Source10Button.Press
                /// BackgroundMusic.AudioRouting.Source 10 Button.Press
                /// </summary>
                public const uint Source10Button_PressEvent = 12;

                /// <summary>
                /// Output or Event digital joinInfo from panel to Control System: BackgroundMusic.AudioRouting.Source11Button.Press
                /// BackgroundMusic.AudioRouting.Source 11 Button.Press
                /// </summary>
                public const uint Source11Button_PressEvent = 13;

                /// <summary>
                /// Output or Event digital joinInfo from panel to Control System: BackgroundMusic.AudioRouting.Source12Button.Press
                /// BackgroundMusic.AudioRouting.Source 12 Button.Press
                /// </summary>
                public const uint Source12Button_PressEvent = 14;

                /// <summary>
                /// Output or Event digital joinInfo from panel to Control System: BackgroundMusic.AudioRouting.Source1Button.Press
                /// BackgroundMusic.AudioRouting.Source 1 Button.Press
                /// </summary>
                public const uint Source1Button_PressEvent = 15;

                /// <summary>
                /// Output or Event digital joinInfo from panel to Control System: BackgroundMusic.AudioRouting.Source2Button.Press
                /// BackgroundMusic.AudioRouting.Source 2 Button.Press
                /// </summary>
                public const uint Source2Button_PressEvent = 16;

                /// <summary>
                /// Output or Event digital joinInfo from panel to Control System: BackgroundMusic.AudioRouting.Source3Button.Press
                /// BackgroundMusic.AudioRouting.Source 3 Button.Press
                /// </summary>
                public const uint Source3Button_PressEvent = 17;

                /// <summary>
                /// Output or Event digital joinInfo from panel to Control System: BackgroundMusic.AudioRouting.Source4Button.Press
                /// BackgroundMusic.AudioRouting.Source 4 Button.Press
                /// </summary>
                public const uint Source4Button_PressEvent = 18;

                /// <summary>
                /// Output or Event digital joinInfo from panel to Control System: BackgroundMusic.AudioRouting.Source5Button.Press
                /// BackgroundMusic.AudioRouting.Source 5 Button.Press
                /// </summary>
                public const uint Source5Button_PressEvent = 19;

                /// <summary>
                /// Output or Event digital joinInfo from panel to Control System: BackgroundMusic.AudioRouting.Source6Button.Press
                /// BackgroundMusic.AudioRouting.Source 6 Button.Press
                /// </summary>
                public const uint Source6Button_PressEvent = 20;

                /// <summary>
                /// Output or Event digital joinInfo from panel to Control System: BackgroundMusic.AudioRouting.Source7Button.Press
                /// BackgroundMusic.AudioRouting.Source 7 Button.Press
                /// </summary>
                public const uint Source7Button_PressEvent = 21;

                /// <summary>
                /// Output or Event digital joinInfo from panel to Control System: BackgroundMusic.AudioRouting.Source8Button.Press
                /// BackgroundMusic.AudioRouting.Source 8 Button.Press
                /// </summary>
                public const uint Source8Button_PressEvent = 22;

                /// <summary>
                /// Output or Event digital joinInfo from panel to Control System: BackgroundMusic.AudioRouting.Source9Button.Press
                /// BackgroundMusic.AudioRouting.Source 9 Button.Press
                /// </summary>
                public const uint Source9Button_PressEvent = 23;


                /// <summary>
                /// Input or Feedback digital joinInfo from Control System to panel: BackgroundMusic.AudioRouting.Destination10Button.Visibility_fb
                /// BackgroundMusic.AudioRouting.Destination 10 Button.Visibility
                /// </summary>
                public const uint Destination10Button_Visibility_fbState = 1;

                /// <summary>
                /// Input or Feedback digital joinInfo from Control System to panel: BackgroundMusic.AudioRouting.Destination1Button.Visibility_fb
                /// BackgroundMusic.AudioRouting.Destination 1 Button.Visibility
                /// </summary>
                public const uint Destination1Button_Visibility_fbState = 2;

                /// <summary>
                /// Input or Feedback digital joinInfo from Control System to panel: BackgroundMusic.AudioRouting.Destination2Button.Visibility_fb
                /// BackgroundMusic.AudioRouting.Destination 2 Button.Visibility
                /// </summary>
                public const uint Destination2Button_Visibility_fbState = 3;

                /// <summary>
                /// Input or Feedback digital joinInfo from Control System to panel: BackgroundMusic.AudioRouting.Destination3Button.Visibility_fb
                /// BackgroundMusic.AudioRouting.Destination 3 Button.Visibility
                /// </summary>
                public const uint Destination3Button_Visibility_fbState = 4;

                /// <summary>
                /// Input or Feedback digital joinInfo from Control System to panel: BackgroundMusic.AudioRouting.Destination4Button.Visibility_fb
                /// BackgroundMusic.AudioRouting.Destination 4 Button.Visibility
                /// </summary>
                public const uint Destination4Button_Visibility_fbState = 5;

                /// <summary>
                /// Input or Feedback digital joinInfo from Control System to panel: BackgroundMusic.AudioRouting.Destination5Button.Visibility_fb
                /// BackgroundMusic.AudioRouting.Destination 5 Button.Visibility
                /// </summary>
                public const uint Destination5Button_Visibility_fbState = 6;

                /// <summary>
                /// Input or Feedback digital joinInfo from Control System to panel: BackgroundMusic.AudioRouting.Destination6Button.Visibility_fb
                /// BackgroundMusic.AudioRouting.Destination 6 Button.Visibility
                /// </summary>
                public const uint Destination6Button_Visibility_fbState = 7;

                /// <summary>
                /// Input or Feedback digital joinInfo from Control System to panel: BackgroundMusic.AudioRouting.Destination7Button.Visibility_fb
                /// BackgroundMusic.AudioRouting.Destination 7 Button.Visibility
                /// </summary>
                public const uint Destination7Button_Visibility_fbState = 8;

                /// <summary>
                /// Input or Feedback digital joinInfo from Control System to panel: BackgroundMusic.AudioRouting.Destination8Button.Visibility_fb
                /// BackgroundMusic.AudioRouting.Destination 8 Button.Visibility
                /// </summary>
                public const uint Destination8Button_Visibility_fbState = 9;

                /// <summary>
                /// Input or Feedback digital joinInfo from Control System to panel: BackgroundMusic.AudioRouting.Destination9Button.Visibility_fb
                /// BackgroundMusic.AudioRouting.Destination 9 Button.Visibility
                /// </summary>
                public const uint Destination9Button_Visibility_fbState = 10;

                /// <summary>
                /// Input or Feedback digital joinInfo from Control System to panel: BackgroundMusic.AudioRouting.Source10Button.Visibility_fb
                /// BackgroundMusic.AudioRouting.Source 10 Button.Visibility
                /// </summary>
                public const uint Source10Button_Visibility_fbState = 11;

                /// <summary>
                /// Input or Feedback digital joinInfo from Control System to panel: BackgroundMusic.AudioRouting.Source11Button.Visibility_fb
                /// BackgroundMusic.AudioRouting.Source 11 Button.Visibility
                /// </summary>
                public const uint Source11Button_Visibility_fbState = 12;

                /// <summary>
                /// Input or Feedback digital joinInfo from Control System to panel: BackgroundMusic.AudioRouting.Source12Button.Visibility_fb
                /// BackgroundMusic.AudioRouting.Source 12 Button.Visibility
                /// </summary>
                public const uint Source12Button_Visibility_fbState = 13;

                /// <summary>
                /// Input or Feedback digital joinInfo from Control System to panel: BackgroundMusic.AudioRouting.Source1Button.Visibility_fb
                /// BackgroundMusic.AudioRouting.Source 1 Button.Visibility
                /// </summary>
                public const uint Source1Button_Visibility_fbState = 14;

                /// <summary>
                /// Input or Feedback digital joinInfo from Control System to panel: BackgroundMusic.AudioRouting.Source2Button.Visibility_fb
                /// BackgroundMusic.AudioRouting.Source 2 Button.Visibility
                /// </summary>
                public const uint Source2Button_Visibility_fbState = 15;

                /// <summary>
                /// Input or Feedback digital joinInfo from Control System to panel: BackgroundMusic.AudioRouting.Source3Button.Visibility_fb
                /// BackgroundMusic.AudioRouting.Source 3 Button.Visibility
                /// </summary>
                public const uint Source3Button_Visibility_fbState = 16;

                /// <summary>
                /// Input or Feedback digital joinInfo from Control System to panel: BackgroundMusic.AudioRouting.Source4Button.Visibility_fb
                /// BackgroundMusic.AudioRouting.Source 4 Button.Visibility
                /// </summary>
                public const uint Source4Button_Visibility_fbState = 17;

                /// <summary>
                /// Input or Feedback digital joinInfo from Control System to panel: BackgroundMusic.AudioRouting.Source5Button.Visibility_fb
                /// BackgroundMusic.AudioRouting.Source 5 Button.Visibility
                /// </summary>
                public const uint Source5Button_Visibility_fbState = 18;

                /// <summary>
                /// Input or Feedback digital joinInfo from Control System to panel: BackgroundMusic.AudioRouting.Source6Button.Visibility_fb
                /// BackgroundMusic.AudioRouting.Source 6 Button.Visibility
                /// </summary>
                public const uint Source6Button_Visibility_fbState = 19;

                /// <summary>
                /// Input or Feedback digital joinInfo from Control System to panel: BackgroundMusic.AudioRouting.Source7Button.Visibility_fb
                /// BackgroundMusic.AudioRouting.Source 7 Button.Visibility
                /// </summary>
                public const uint Source7Button_Visibility_fbState = 20;

                /// <summary>
                /// Input or Feedback digital joinInfo from Control System to panel: BackgroundMusic.AudioRouting.Source8Button.Visibility_fb
                /// BackgroundMusic.AudioRouting.Source 8 Button.Visibility
                /// </summary>
                public const uint Source8Button_Visibility_fbState = 21;

                /// <summary>
                /// Input or Feedback digital joinInfo from Control System to panel: BackgroundMusic.AudioRouting.Source9Button.Visibility_fb
                /// BackgroundMusic.AudioRouting.Source 9 Button.Visibility
                /// </summary>
                public const uint Source9Button_Visibility_fbState = 22;

                /// <summary>
                /// Input or Feedback digital joinInfo from Control System to panel: BackgroundMusic.AudioRouting.Visibility_fb
                /// Audio Routing.Visibility
                /// </summary>
                public const uint AudioRouting_Visibility_fbState = 23;

                /// <summary>
                /// Input or Feedback digital joinInfo from Control System to panel: BackgroundMusic.AudioRouting.Destination10Label.Visibility_fb
                /// BackgroundMusic.AudioRouting.Destination 10 Label.Visibility
                /// </summary>
                public const uint Destination10Label_Visibility_fbState = 24;

                /// <summary>
                /// Input or Feedback digital joinInfo from Control System to panel: BackgroundMusic.AudioRouting.Destination1Label.Visibility_fb
                /// BackgroundMusic.AudioRouting.Destination 1 Label.Visibility
                /// </summary>
                public const uint Destination1Label_Visibility_fbState = 25;

                /// <summary>
                /// Input or Feedback digital joinInfo from Control System to panel: BackgroundMusic.AudioRouting.Destination2Label.Visibility_fb
                /// BackgroundMusic.AudioRouting.Destination 2 Label.Visibility
                /// </summary>
                public const uint Destination2Label_Visibility_fbState = 26;

                /// <summary>
                /// Input or Feedback digital joinInfo from Control System to panel: BackgroundMusic.AudioRouting.Destination3Label.Visibility_fb
                /// BackgroundMusic.AudioRouting.Destination 3 Label.Visibility
                /// </summary>
                public const uint Destination3Label_Visibility_fbState = 27;

                /// <summary>
                /// Input or Feedback digital joinInfo from Control System to panel: BackgroundMusic.AudioRouting.Destination4Label.Visibility_fb
                /// BackgroundMusic.AudioRouting.Destination 4 Label.Visibility
                /// </summary>
                public const uint Destination4Label_Visibility_fbState = 28;

                /// <summary>
                /// Input or Feedback digital joinInfo from Control System to panel: BackgroundMusic.AudioRouting.Destination5Label.Visibility_fb
                /// BackgroundMusic.AudioRouting.Destination 5 Label.Visibility
                /// </summary>
                public const uint Destination5Label_Visibility_fbState = 29;

                /// <summary>
                /// Input or Feedback digital joinInfo from Control System to panel: BackgroundMusic.AudioRouting.Destination6Label.Visibility_fb
                /// BackgroundMusic.AudioRouting.Destination 6 Label.Visibility
                /// </summary>
                public const uint Destination6Label_Visibility_fbState = 30;

                /// <summary>
                /// Input or Feedback digital joinInfo from Control System to panel: BackgroundMusic.AudioRouting.Destination7Label.Visibility_fb
                /// BackgroundMusic.AudioRouting.Destination 7 Label.Visibility
                /// </summary>
                public const uint Destination7Label_Visibility_fbState = 31;

                /// <summary>
                /// Input or Feedback digital joinInfo from Control System to panel: BackgroundMusic.AudioRouting.Destination8Label.Visibility_fb
                /// BackgroundMusic.AudioRouting.Destination 8 Label.Visibility
                /// </summary>
                public const uint Destination8Label_Visibility_fbState = 32;

                /// <summary>
                /// Input or Feedback digital joinInfo from Control System to panel: BackgroundMusic.AudioRouting.Destination9Label.Visibility_fb
                /// BackgroundMusic.AudioRouting.Destination 9 Label.Visibility
                /// </summary>
                public const uint Destination9Label_Visibility_fbState = 33;

                /// <summary>
                /// Input or Feedback digital joinInfo from Control System to panel: BackgroundMusic.AudioRouting.Destination10Button.Selected
                /// BackgroundMusic.AudioRouting.Destination 10 Button.Selected
                /// </summary>
                public const uint Destination10Button_SelectedState = 35;

                /// <summary>
                /// Input or Feedback digital joinInfo from Control System to panel: BackgroundMusic.AudioRouting.Destination1Button.Selected
                /// BackgroundMusic.AudioRouting.Destination 1 Button.Selected
                /// </summary>
                public const uint Destination1Button_SelectedState = 36;

                /// <summary>
                /// Input or Feedback digital joinInfo from Control System to panel: BackgroundMusic.AudioRouting.Destination2Button.Selected
                /// BackgroundMusic.AudioRouting.Destination 2 Button.Selected
                /// </summary>
                public const uint Destination2Button_SelectedState = 37;

                /// <summary>
                /// Input or Feedback digital joinInfo from Control System to panel: BackgroundMusic.AudioRouting.Destination3Button.Selected
                /// BackgroundMusic.AudioRouting.Destination 3 Button.Selected
                /// </summary>
                public const uint Destination3Button_SelectedState = 38;

                /// <summary>
                /// Input or Feedback digital joinInfo from Control System to panel: BackgroundMusic.AudioRouting.Destination4Button.Selected
                /// BackgroundMusic.AudioRouting.Destination 4 Button.Selected
                /// </summary>
                public const uint Destination4Button_SelectedState = 39;

                /// <summary>
                /// Input or Feedback digital joinInfo from Control System to panel: BackgroundMusic.AudioRouting.Destination5Button.Selected
                /// BackgroundMusic.AudioRouting.Destination 5 Button.Selected
                /// </summary>
                public const uint Destination5Button_SelectedState = 40;

                /// <summary>
                /// Input or Feedback digital joinInfo from Control System to panel: BackgroundMusic.AudioRouting.Destination6Button.Selected
                /// BackgroundMusic.AudioRouting.Destination 6 Button.Selected
                /// </summary>
                public const uint Destination6Button_SelectedState = 41;

                /// <summary>
                /// Input or Feedback digital joinInfo from Control System to panel: BackgroundMusic.AudioRouting.Destination7Button.Selected
                /// BackgroundMusic.AudioRouting.Destination 7 Button.Selected
                /// </summary>
                public const uint Destination7Button_SelectedState = 42;

                /// <summary>
                /// Input or Feedback digital joinInfo from Control System to panel: BackgroundMusic.AudioRouting.Destination8Button.Selected
                /// BackgroundMusic.AudioRouting.Destination 8 Button.Selected
                /// </summary>
                public const uint Destination8Button_SelectedState = 43;

                /// <summary>
                /// Input or Feedback digital joinInfo from Control System to panel: BackgroundMusic.AudioRouting.Destination9Button.Selected
                /// BackgroundMusic.AudioRouting.Destination 9 Button.Selected
                /// </summary>
                public const uint Destination9Button_SelectedState = 44;

                /// <summary>
                /// Input or Feedback digital joinInfo from Control System to panel: BackgroundMusic.AudioRouting.Source10Button.Selected
                /// BackgroundMusic.AudioRouting.Source 10 Button.Selected
                /// </summary>
                public const uint Source10Button_SelectedState = 45;

                /// <summary>
                /// Input or Feedback digital joinInfo from Control System to panel: BackgroundMusic.AudioRouting.Source11Button.Selected
                /// BackgroundMusic.AudioRouting.Source 11 Button.Selected
                /// </summary>
                public const uint Source11Button_SelectedState = 46;

                /// <summary>
                /// Input or Feedback digital joinInfo from Control System to panel: BackgroundMusic.AudioRouting.Source12Button.Selected
                /// BackgroundMusic.AudioRouting.Source 12 Button.Selected
                /// </summary>
                public const uint Source12Button_SelectedState = 47;

                /// <summary>
                /// Input or Feedback digital joinInfo from Control System to panel: BackgroundMusic.AudioRouting.Source1Button.Selected
                /// BackgroundMusic.AudioRouting.Source 1 Button.Selected
                /// </summary>
                public const uint Source1Button_SelectedState = 48;

                /// <summary>
                /// Input or Feedback digital joinInfo from Control System to panel: BackgroundMusic.AudioRouting.Source2Button.Selected
                /// BackgroundMusic.AudioRouting.Source 2 Button.Selected
                /// </summary>
                public const uint Source2Button_SelectedState = 49;

                /// <summary>
                /// Input or Feedback digital joinInfo from Control System to panel: BackgroundMusic.AudioRouting.Source3Button.Selected
                /// BackgroundMusic.AudioRouting.Source 3 Button.Selected
                /// </summary>
                public const uint Source3Button_SelectedState = 50;

                /// <summary>
                /// Input or Feedback digital joinInfo from Control System to panel: BackgroundMusic.AudioRouting.Source4Button.Selected
                /// BackgroundMusic.AudioRouting.Source 4 Button.Selected
                /// </summary>
                public const uint Source4Button_SelectedState = 51;

                /// <summary>
                /// Input or Feedback digital joinInfo from Control System to panel: BackgroundMusic.AudioRouting.Source5Button.Selected
                /// BackgroundMusic.AudioRouting.Source 5 Button.Selected
                /// </summary>
                public const uint Source5Button_SelectedState = 52;

                /// <summary>
                /// Input or Feedback digital joinInfo from Control System to panel: BackgroundMusic.AudioRouting.Source6Button.Selected
                /// BackgroundMusic.AudioRouting.Source 6 Button.Selected
                /// </summary>
                public const uint Source6Button_SelectedState = 53;

                /// <summary>
                /// Input or Feedback digital joinInfo from Control System to panel: BackgroundMusic.AudioRouting.Source7Button.Selected
                /// BackgroundMusic.AudioRouting.Source 7 Button.Selected
                /// </summary>
                public const uint Source7Button_SelectedState = 54;

                /// <summary>
                /// Input or Feedback digital joinInfo from Control System to panel: BackgroundMusic.AudioRouting.Source8Button.Selected
                /// BackgroundMusic.AudioRouting.Source 8 Button.Selected
                /// </summary>
                public const uint Source8Button_SelectedState = 55;

                /// <summary>
                /// Input or Feedback digital joinInfo from Control System to panel: BackgroundMusic.AudioRouting.Source9Button.Selected
                /// BackgroundMusic.AudioRouting.Source 9 Button.Selected
                /// </summary>
                public const uint Source9Button_SelectedState = 56;

            }
            /// <summary>
            /// Serial signals.
            /// </summary>
            internal static class Strings
            {

                /// <summary>
                /// Input or Feedback serial joinInfo from Control System to panel: BackgroundMusic.AudioRouting.Destination10Button.IndirectRichText
                /// BackgroundMusic.AudioRouting.Destination 10 Button.Indirect Rich Text
                /// </summary>
                public const uint Destination10Button_IndirectRichTextState = 1;
                /// <summary>
                /// Input or Feedback serial joinInfo from Control System to panel: BackgroundMusic.AudioRouting.Destination10Label.IndirectRichText
                /// BackgroundMusic.AudioRouting.Destination 10 Label.Indirect Rich Text
                /// </summary>
                public const uint Destination10Label_IndirectRichTextState = 2;
                /// <summary>
                /// Input or Feedback serial joinInfo from Control System to panel: BackgroundMusic.AudioRouting.Destination1Button.IndirectRichText
                /// BackgroundMusic.AudioRouting.Destination 1 Button.Indirect Rich Text
                /// </summary>
                public const uint Destination1Button_IndirectRichTextState = 3;
                /// <summary>
                /// Input or Feedback serial joinInfo from Control System to panel: BackgroundMusic.AudioRouting.Destination1Label.IndirectRichText
                /// BackgroundMusic.AudioRouting.Destination 1 Label.Indirect Rich Text
                /// </summary>
                public const uint Destination1Label_IndirectRichTextState = 4;
                /// <summary>
                /// Input or Feedback serial joinInfo from Control System to panel: BackgroundMusic.AudioRouting.Destination2Button.IndirectRichText
                /// BackgroundMusic.AudioRouting.Destination 2 Button.Indirect Rich Text
                /// </summary>
                public const uint Destination2Button_IndirectRichTextState = 5;
                /// <summary>
                /// Input or Feedback serial joinInfo from Control System to panel: BackgroundMusic.AudioRouting.Destination2Label.IndirectRichText
                /// BackgroundMusic.AudioRouting.Destination 2 Label.Indirect Rich Text
                /// </summary>
                public const uint Destination2Label_IndirectRichTextState = 6;
                /// <summary>
                /// Input or Feedback serial joinInfo from Control System to panel: BackgroundMusic.AudioRouting.Destination3Button.IndirectRichText
                /// BackgroundMusic.AudioRouting.Destination 3 Button.Indirect Rich Text
                /// </summary>
                public const uint Destination3Button_IndirectRichTextState = 7;
                /// <summary>
                /// Input or Feedback serial joinInfo from Control System to panel: BackgroundMusic.AudioRouting.Destination3Label.IndirectRichText
                /// BackgroundMusic.AudioRouting.Destination 3 Label.Indirect Rich Text
                /// </summary>
                public const uint Destination3Label_IndirectRichTextState = 8;
                /// <summary>
                /// Input or Feedback serial joinInfo from Control System to panel: BackgroundMusic.AudioRouting.Destination4Button.IndirectRichText
                /// BackgroundMusic.AudioRouting.Destination 4 Button.Indirect Rich Text
                /// </summary>
                public const uint Destination4Button_IndirectRichTextState = 9;
                /// <summary>
                /// Input or Feedback serial joinInfo from Control System to panel: BackgroundMusic.AudioRouting.Destination4Label.IndirectRichText
                /// BackgroundMusic.AudioRouting.Destination 4 Label.Indirect Rich Text
                /// </summary>
                public const uint Destination4Label_IndirectRichTextState = 10;
                /// <summary>
                /// Input or Feedback serial joinInfo from Control System to panel: BackgroundMusic.AudioRouting.Destination5Button.IndirectRichText
                /// BackgroundMusic.AudioRouting.Destination 5 Button.Indirect Rich Text
                /// </summary>
                public const uint Destination5Button_IndirectRichTextState = 11;
                /// <summary>
                /// Input or Feedback serial joinInfo from Control System to panel: BackgroundMusic.AudioRouting.Destination5Label.IndirectRichText
                /// BackgroundMusic.AudioRouting.Destination 5 Label.Indirect Rich Text
                /// </summary>
                public const uint Destination5Label_IndirectRichTextState = 12;
                /// <summary>
                /// Input or Feedback serial joinInfo from Control System to panel: BackgroundMusic.AudioRouting.Destination6Button.IndirectRichText
                /// BackgroundMusic.AudioRouting.Destination 6 Button.Indirect Rich Text
                /// </summary>
                public const uint Destination6Button_IndirectRichTextState = 13;
                /// <summary>
                /// Input or Feedback serial joinInfo from Control System to panel: BackgroundMusic.AudioRouting.Destination6Label.IndirectRichText
                /// BackgroundMusic.AudioRouting.Destination 6 Label.Indirect Rich Text
                /// </summary>
                public const uint Destination6Label_IndirectRichTextState = 14;
                /// <summary>
                /// Input or Feedback serial joinInfo from Control System to panel: BackgroundMusic.AudioRouting.Destination7Button.IndirectRichText
                /// BackgroundMusic.AudioRouting.Destination 7 Button.Indirect Rich Text
                /// </summary>
                public const uint Destination7Button_IndirectRichTextState = 15;
                /// <summary>
                /// Input or Feedback serial joinInfo from Control System to panel: BackgroundMusic.AudioRouting.Destination7Label.IndirectRichText
                /// BackgroundMusic.AudioRouting.Destination 7 Label.Indirect Rich Text
                /// </summary>
                public const uint Destination7Label_IndirectRichTextState = 16;
                /// <summary>
                /// Input or Feedback serial joinInfo from Control System to panel: BackgroundMusic.AudioRouting.Destination8Button.IndirectRichText
                /// BackgroundMusic.AudioRouting.Destination 8 Button.Indirect Rich Text
                /// </summary>
                public const uint Destination8Button_IndirectRichTextState = 17;
                /// <summary>
                /// Input or Feedback serial joinInfo from Control System to panel: BackgroundMusic.AudioRouting.Destination8Label.IndirectRichText
                /// BackgroundMusic.AudioRouting.Destination 8 Label.Indirect Rich Text
                /// </summary>
                public const uint Destination8Label_IndirectRichTextState = 18;
                /// <summary>
                /// Input or Feedback serial joinInfo from Control System to panel: BackgroundMusic.AudioRouting.Destination9Button.IndirectRichText
                /// BackgroundMusic.AudioRouting.Destination 9 Button.Indirect Rich Text
                /// </summary>
                public const uint Destination9Button_IndirectRichTextState = 19;
                /// <summary>
                /// Input or Feedback serial joinInfo from Control System to panel: BackgroundMusic.AudioRouting.Destination9Label.IndirectRichText
                /// BackgroundMusic.AudioRouting.Destination 9 Label.Indirect Rich Text
                /// </summary>
                public const uint Destination9Label_IndirectRichTextState = 20;
                /// <summary>
                /// Input or Feedback serial joinInfo from Control System to panel: BackgroundMusic.AudioRouting.Source10Button.IndirectRichText
                /// BackgroundMusic.AudioRouting.Source 10 Button.Indirect Rich Text
                /// </summary>
                public const uint Source10Button_IndirectRichTextState = 21;
                /// <summary>
                /// Input or Feedback serial joinInfo from Control System to panel: BackgroundMusic.AudioRouting.Source11Button.IndirectRichText
                /// BackgroundMusic.AudioRouting.Source 11 Button.Indirect Rich Text
                /// </summary>
                public const uint Source11Button_IndirectRichTextState = 22;
                /// <summary>
                /// Input or Feedback serial joinInfo from Control System to panel: BackgroundMusic.AudioRouting.Source12Button.IndirectRichText
                /// BackgroundMusic.AudioRouting.Source 12 Button.Indirect Rich Text
                /// </summary>
                public const uint Source12Button_IndirectRichTextState = 23;
                /// <summary>
                /// Input or Feedback serial joinInfo from Control System to panel: BackgroundMusic.AudioRouting.Source1Button.IndirectRichText
                /// BackgroundMusic.AudioRouting.Source 1 Button.Indirect Rich Text
                /// </summary>
                public const uint Source1Button_IndirectRichTextState = 24;
                /// <summary>
                /// Input or Feedback serial joinInfo from Control System to panel: BackgroundMusic.AudioRouting.Source2Button.IndirectRichText
                /// BackgroundMusic.AudioRouting.Source 2 Button.Indirect Rich Text
                /// </summary>
                public const uint Source2Button_IndirectRichTextState = 25;
                /// <summary>
                /// Input or Feedback serial joinInfo from Control System to panel: BackgroundMusic.AudioRouting.Source3Button.IndirectRichText
                /// BackgroundMusic.AudioRouting.Source 3 Button.Indirect Rich Text
                /// </summary>
                public const uint Source3Button_IndirectRichTextState = 26;
                /// <summary>
                /// Input or Feedback serial joinInfo from Control System to panel: BackgroundMusic.AudioRouting.Source4Button.IndirectRichText
                /// BackgroundMusic.AudioRouting.Source 4 Button.Indirect Rich Text
                /// </summary>
                public const uint Source4Button_IndirectRichTextState = 27;
                /// <summary>
                /// Input or Feedback serial joinInfo from Control System to panel: BackgroundMusic.AudioRouting.Source5Button.IndirectRichText
                /// BackgroundMusic.AudioRouting.Source 5 Button.Indirect Rich Text
                /// </summary>
                public const uint Source5Button_IndirectRichTextState = 28;
                /// <summary>
                /// Input or Feedback serial joinInfo from Control System to panel: BackgroundMusic.AudioRouting.Source6Button.IndirectRichText
                /// BackgroundMusic.AudioRouting.Source 6 Button.Indirect Rich Text
                /// </summary>
                public const uint Source6Button_IndirectRichTextState = 29;
                /// <summary>
                /// Input or Feedback serial joinInfo from Control System to panel: BackgroundMusic.AudioRouting.Source7Button.IndirectRichText
                /// BackgroundMusic.AudioRouting.Source 7 Button.Indirect Rich Text
                /// </summary>
                public const uint Source7Button_IndirectRichTextState = 30;
                /// <summary>
                /// Input or Feedback serial joinInfo from Control System to panel: BackgroundMusic.AudioRouting.Source8Button.IndirectRichText
                /// BackgroundMusic.AudioRouting.Source 8 Button.Indirect Rich Text
                /// </summary>
                public const uint Source8Button_IndirectRichTextState = 31;
                /// <summary>
                /// Input or Feedback serial joinInfo from Control System to panel: BackgroundMusic.AudioRouting.Source9Button.IndirectRichText
                /// BackgroundMusic.AudioRouting.Source 9 Button.Indirect Rich Text
                /// </summary>
                public const uint Source9Button_IndirectRichTextState = 32;
                /// <summary>
                /// Input or Feedback serial joinInfo from Control System to panel: BackgroundMusic.AudioRouting.Source10Button.Icon
                /// BackgroundMusic.AudioRouting.Source 10 Button.Icon
                /// </summary>
                public const uint Source10Button_IconState = 33;
                /// <summary>
                /// Input or Feedback serial joinInfo from Control System to panel: BackgroundMusic.AudioRouting.Source11Button.Icon
                /// BackgroundMusic.AudioRouting.Source 11 Button.Icon
                /// </summary>
                public const uint Source11Button_IconState = 34;
                /// <summary>
                /// Input or Feedback serial joinInfo from Control System to panel: BackgroundMusic.AudioRouting.Source12Button.Icon
                /// BackgroundMusic.AudioRouting.Source 12 Button.Icon
                /// </summary>
                public const uint Source12Button_IconState = 35;
                /// <summary>
                /// Input or Feedback serial joinInfo from Control System to panel: BackgroundMusic.AudioRouting.Source1Button.Icon
                /// BackgroundMusic.AudioRouting.Source 1 Button.Icon
                /// </summary>
                public const uint Source1Button_IconState = 36;
                /// <summary>
                /// Input or Feedback serial joinInfo from Control System to panel: BackgroundMusic.AudioRouting.Source2Button.Icon
                /// BackgroundMusic.AudioRouting.Source 2 Button.Icon
                /// </summary>
                public const uint Source2Button_IconState = 37;
                /// <summary>
                /// Input or Feedback serial joinInfo from Control System to panel: BackgroundMusic.AudioRouting.Source3Button.Icon
                /// BackgroundMusic.AudioRouting.Source 3 Button.Icon
                /// </summary>
                public const uint Source3Button_IconState = 38;
                /// <summary>
                /// Input or Feedback serial joinInfo from Control System to panel: BackgroundMusic.AudioRouting.Source4Button.Icon
                /// BackgroundMusic.AudioRouting.Source 4 Button.Icon
                /// </summary>
                public const uint Source4Button_IconState = 39;
                /// <summary>
                /// Input or Feedback serial joinInfo from Control System to panel: BackgroundMusic.AudioRouting.Source5Button.Icon
                /// BackgroundMusic.AudioRouting.Source 5 Button.Icon
                /// </summary>
                public const uint Source5Button_IconState = 40;
                /// <summary>
                /// Input or Feedback serial joinInfo from Control System to panel: BackgroundMusic.AudioRouting.Source6Button.Icon
                /// BackgroundMusic.AudioRouting.Source 6 Button.Icon
                /// </summary>
                public const uint Source6Button_IconState = 41;
                /// <summary>
                /// Input or Feedback serial joinInfo from Control System to panel: BackgroundMusic.AudioRouting.Source7Button.Icon
                /// BackgroundMusic.AudioRouting.Source 7 Button.Icon
                /// </summary>
                public const uint Source7Button_IconState = 42;
                /// <summary>
                /// Input or Feedback serial joinInfo from Control System to panel: BackgroundMusic.AudioRouting.Source8Button.Icon
                /// BackgroundMusic.AudioRouting.Source 8 Button.Icon
                /// </summary>
                public const uint Source8Button_IconState = 43;
                /// <summary>
                /// Input or Feedback serial joinInfo from Control System to panel: BackgroundMusic.AudioRouting.Source9Button.Icon
                /// BackgroundMusic.AudioRouting.Source 9 Button.Icon
                /// </summary>
                public const uint Source9Button_IconState = 44;
            }
        }

        #endregion

        #region Construction and Initialization

        /// <summary>
        /// Initializes a new instance of the <see cref="AudioRouting"/> component class.
        /// </summary>
        /// <param name="componentMediator">The <see cref="ComponentMediator"/> used to instantiate the component.</param>
        /// <param name="controlJoinId">The SmartObjectId at which to create the component.</param>
        /// <param name="itemCount">The number of items.</param>
        internal AudioRouting(ComponentMediator componentMediator, uint controlJoinId, uint? itemCount)
        {
            ComponentMediator = componentMediator;
            Initialize(controlJoinId, itemCount);
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AudioRouting"/> component class.
        /// </summary>
        /// <param name="componentMediator">The <see cref="ComponentMediator"/> used to instantiate the component.</param>
        /// <param name="controlJoinId">The SmartObjectId at which to create the component.</param>
        internal AudioRouting(ComponentMediator componentMediator, uint controlJoinId) : this(componentMediator, controlJoinId, null)
        {
        }

        /// <summary>
        /// Initializes a new instance with default itemCount.
        /// </summary>
        /// <param name="controlJoinId">The SmartObjectId at which to create the component.</param>
        private void Initialize(uint controlJoinId)
        {
            Initialize(controlJoinId, null);
        }

        private Dictionary<string, Indexes> _indexLookup = new Dictionary<string, Indexes>();

        /// <summary>
        /// Initializes a new instance of the <see cref="AudioRouting"/> component class.
        /// </summary>
        /// <param name="controlJoinId">The SmartObjectId at which to create the component.</param>
        /// <param name="itemCount">The number of items.</param>
        private void Initialize(uint controlJoinId, uint? itemCount)
        {
            ControlJoinId = controlJoinId; 
 
            _devices = new List<BasicTriListWithSmartObject>(); 
 
            ComponentMediator.ConfigureBooleanEvent(controlJoinId, Joins.Booleans.Destination10Button_PressEvent, onDestination10Button_Press);
            ComponentMediator.ConfigureBooleanEvent(controlJoinId, Joins.Booleans.Destination1Button_PressEvent, onDestination1Button_Press);
            ComponentMediator.ConfigureBooleanEvent(controlJoinId, Joins.Booleans.Destination2Button_PressEvent, onDestination2Button_Press);
            ComponentMediator.ConfigureBooleanEvent(controlJoinId, Joins.Booleans.Destination3Button_PressEvent, onDestination3Button_Press);
            ComponentMediator.ConfigureBooleanEvent(controlJoinId, Joins.Booleans.Destination4Button_PressEvent, onDestination4Button_Press);
            ComponentMediator.ConfigureBooleanEvent(controlJoinId, Joins.Booleans.Destination5Button_PressEvent, onDestination5Button_Press);
            ComponentMediator.ConfigureBooleanEvent(controlJoinId, Joins.Booleans.Destination6Button_PressEvent, onDestination6Button_Press);
            ComponentMediator.ConfigureBooleanEvent(controlJoinId, Joins.Booleans.Destination7Button_PressEvent, onDestination7Button_Press);
            ComponentMediator.ConfigureBooleanEvent(controlJoinId, Joins.Booleans.Destination8Button_PressEvent, onDestination8Button_Press);
            ComponentMediator.ConfigureBooleanEvent(controlJoinId, Joins.Booleans.Destination9Button_PressEvent, onDestination9Button_Press);
            ComponentMediator.ConfigureBooleanEvent(controlJoinId, Joins.Booleans.Source10Button_PressEvent, onSource10Button_Press);
            ComponentMediator.ConfigureBooleanEvent(controlJoinId, Joins.Booleans.Source11Button_PressEvent, onSource11Button_Press);
            ComponentMediator.ConfigureBooleanEvent(controlJoinId, Joins.Booleans.Source12Button_PressEvent, onSource12Button_Press);
            ComponentMediator.ConfigureBooleanEvent(controlJoinId, Joins.Booleans.Source1Button_PressEvent, onSource1Button_Press);
            ComponentMediator.ConfigureBooleanEvent(controlJoinId, Joins.Booleans.Source2Button_PressEvent, onSource2Button_Press);
            ComponentMediator.ConfigureBooleanEvent(controlJoinId, Joins.Booleans.Source3Button_PressEvent, onSource3Button_Press);
            ComponentMediator.ConfigureBooleanEvent(controlJoinId, Joins.Booleans.Source4Button_PressEvent, onSource4Button_Press);
            ComponentMediator.ConfigureBooleanEvent(controlJoinId, Joins.Booleans.Source5Button_PressEvent, onSource5Button_Press);
            ComponentMediator.ConfigureBooleanEvent(controlJoinId, Joins.Booleans.Source6Button_PressEvent, onSource6Button_Press);
            ComponentMediator.ConfigureBooleanEvent(controlJoinId, Joins.Booleans.Source7Button_PressEvent, onSource7Button_Press);
            ComponentMediator.ConfigureBooleanEvent(controlJoinId, Joins.Booleans.Source8Button_PressEvent, onSource8Button_Press);
            ComponentMediator.ConfigureBooleanEvent(controlJoinId, Joins.Booleans.Source9Button_PressEvent, onSource9Button_Press);
            ResetLevelsTabButton = new SLRCTech.BackgroundMusic.AudioRouting.ResetLevelsTabButton(ComponentMediator, 56);
        }

        public void AddDevice(BasicTriListWithSmartObject device)
        {
            Devices.Add(device);
            ComponentMediator.HookSmartObjectEvents(device.SmartObjects[ControlJoinId]);

            ((SLRCTech.BackgroundMusic.AudioRouting.ResetLevelsTabButton)ResetLevelsTabButton).AddDevice(device);
        }

        public void RemoveDevice(BasicTriListWithSmartObject device)
        {
            Devices.Remove(device);
            ComponentMediator.UnHookSmartObjectEvents(device.SmartObjects[ControlJoinId]);

            ((SLRCTech.BackgroundMusic.AudioRouting.ResetLevelsTabButton)ResetLevelsTabButton).RemoveDevice(device);
        }

        #endregion

        #region CH5 Contract

        /// <inheritdoc/>
        public event EventHandler<UIEventArgs> Destination10Button_PressEvent;
        private void onDestination10Button_Press(SmartObjectEventArgs eventArgs)
        {
            EventHandler<UIEventArgs> handler = Destination10Button_PressEvent;
            if (handler != null)
                handler(this, UIEventArgs.CreateEventArgs(eventArgs));
        }

        /// <inheritdoc/>
        public event EventHandler<UIEventArgs> Destination1Button_PressEvent;
        private void onDestination1Button_Press(SmartObjectEventArgs eventArgs)
        {
            EventHandler<UIEventArgs> handler = Destination1Button_PressEvent;
            if (handler != null)
                handler(this, UIEventArgs.CreateEventArgs(eventArgs));
        }

        /// <inheritdoc/>
        public event EventHandler<UIEventArgs> Destination2Button_PressEvent;
        private void onDestination2Button_Press(SmartObjectEventArgs eventArgs)
        {
            EventHandler<UIEventArgs> handler = Destination2Button_PressEvent;
            if (handler != null)
                handler(this, UIEventArgs.CreateEventArgs(eventArgs));
        }

        /// <inheritdoc/>
        public event EventHandler<UIEventArgs> Destination3Button_PressEvent;
        private void onDestination3Button_Press(SmartObjectEventArgs eventArgs)
        {
            EventHandler<UIEventArgs> handler = Destination3Button_PressEvent;
            if (handler != null)
                handler(this, UIEventArgs.CreateEventArgs(eventArgs));
        }

        /// <inheritdoc/>
        public event EventHandler<UIEventArgs> Destination4Button_PressEvent;
        private void onDestination4Button_Press(SmartObjectEventArgs eventArgs)
        {
            EventHandler<UIEventArgs> handler = Destination4Button_PressEvent;
            if (handler != null)
                handler(this, UIEventArgs.CreateEventArgs(eventArgs));
        }

        /// <inheritdoc/>
        public event EventHandler<UIEventArgs> Destination5Button_PressEvent;
        private void onDestination5Button_Press(SmartObjectEventArgs eventArgs)
        {
            EventHandler<UIEventArgs> handler = Destination5Button_PressEvent;
            if (handler != null)
                handler(this, UIEventArgs.CreateEventArgs(eventArgs));
        }

        /// <inheritdoc/>
        public event EventHandler<UIEventArgs> Destination6Button_PressEvent;
        private void onDestination6Button_Press(SmartObjectEventArgs eventArgs)
        {
            EventHandler<UIEventArgs> handler = Destination6Button_PressEvent;
            if (handler != null)
                handler(this, UIEventArgs.CreateEventArgs(eventArgs));
        }

        /// <inheritdoc/>
        public event EventHandler<UIEventArgs> Destination7Button_PressEvent;
        private void onDestination7Button_Press(SmartObjectEventArgs eventArgs)
        {
            EventHandler<UIEventArgs> handler = Destination7Button_PressEvent;
            if (handler != null)
                handler(this, UIEventArgs.CreateEventArgs(eventArgs));
        }

        /// <inheritdoc/>
        public event EventHandler<UIEventArgs> Destination8Button_PressEvent;
        private void onDestination8Button_Press(SmartObjectEventArgs eventArgs)
        {
            EventHandler<UIEventArgs> handler = Destination8Button_PressEvent;
            if (handler != null)
                handler(this, UIEventArgs.CreateEventArgs(eventArgs));
        }

        /// <inheritdoc/>
        public event EventHandler<UIEventArgs> Destination9Button_PressEvent;
        private void onDestination9Button_Press(SmartObjectEventArgs eventArgs)
        {
            EventHandler<UIEventArgs> handler = Destination9Button_PressEvent;
            if (handler != null)
                handler(this, UIEventArgs.CreateEventArgs(eventArgs));
        }

        /// <inheritdoc/>
        public event EventHandler<UIEventArgs> Source10Button_PressEvent;
        private void onSource10Button_Press(SmartObjectEventArgs eventArgs)
        {
            EventHandler<UIEventArgs> handler = Source10Button_PressEvent;
            if (handler != null)
                handler(this, UIEventArgs.CreateEventArgs(eventArgs));
        }

        /// <inheritdoc/>
        public event EventHandler<UIEventArgs> Source11Button_PressEvent;
        private void onSource11Button_Press(SmartObjectEventArgs eventArgs)
        {
            EventHandler<UIEventArgs> handler = Source11Button_PressEvent;
            if (handler != null)
                handler(this, UIEventArgs.CreateEventArgs(eventArgs));
        }

        /// <inheritdoc/>
        public event EventHandler<UIEventArgs> Source12Button_PressEvent;
        private void onSource12Button_Press(SmartObjectEventArgs eventArgs)
        {
            EventHandler<UIEventArgs> handler = Source12Button_PressEvent;
            if (handler != null)
                handler(this, UIEventArgs.CreateEventArgs(eventArgs));
        }

        /// <inheritdoc/>
        public event EventHandler<UIEventArgs> Source1Button_PressEvent;
        private void onSource1Button_Press(SmartObjectEventArgs eventArgs)
        {
            EventHandler<UIEventArgs> handler = Source1Button_PressEvent;
            if (handler != null)
                handler(this, UIEventArgs.CreateEventArgs(eventArgs));
        }

        /// <inheritdoc/>
        public event EventHandler<UIEventArgs> Source2Button_PressEvent;
        private void onSource2Button_Press(SmartObjectEventArgs eventArgs)
        {
            EventHandler<UIEventArgs> handler = Source2Button_PressEvent;
            if (handler != null)
                handler(this, UIEventArgs.CreateEventArgs(eventArgs));
        }

        /// <inheritdoc/>
        public event EventHandler<UIEventArgs> Source3Button_PressEvent;
        private void onSource3Button_Press(SmartObjectEventArgs eventArgs)
        {
            EventHandler<UIEventArgs> handler = Source3Button_PressEvent;
            if (handler != null)
                handler(this, UIEventArgs.CreateEventArgs(eventArgs));
        }

        /// <inheritdoc/>
        public event EventHandler<UIEventArgs> Source4Button_PressEvent;
        private void onSource4Button_Press(SmartObjectEventArgs eventArgs)
        {
            EventHandler<UIEventArgs> handler = Source4Button_PressEvent;
            if (handler != null)
                handler(this, UIEventArgs.CreateEventArgs(eventArgs));
        }

        /// <inheritdoc/>
        public event EventHandler<UIEventArgs> Source5Button_PressEvent;
        private void onSource5Button_Press(SmartObjectEventArgs eventArgs)
        {
            EventHandler<UIEventArgs> handler = Source5Button_PressEvent;
            if (handler != null)
                handler(this, UIEventArgs.CreateEventArgs(eventArgs));
        }

        /// <inheritdoc/>
        public event EventHandler<UIEventArgs> Source6Button_PressEvent;
        private void onSource6Button_Press(SmartObjectEventArgs eventArgs)
        {
            EventHandler<UIEventArgs> handler = Source6Button_PressEvent;
            if (handler != null)
                handler(this, UIEventArgs.CreateEventArgs(eventArgs));
        }

        /// <inheritdoc/>
        public event EventHandler<UIEventArgs> Source7Button_PressEvent;
        private void onSource7Button_Press(SmartObjectEventArgs eventArgs)
        {
            EventHandler<UIEventArgs> handler = Source7Button_PressEvent;
            if (handler != null)
                handler(this, UIEventArgs.CreateEventArgs(eventArgs));
        }

        /// <inheritdoc/>
        public event EventHandler<UIEventArgs> Source8Button_PressEvent;
        private void onSource8Button_Press(SmartObjectEventArgs eventArgs)
        {
            EventHandler<UIEventArgs> handler = Source8Button_PressEvent;
            if (handler != null)
                handler(this, UIEventArgs.CreateEventArgs(eventArgs));
        }

        /// <inheritdoc/>
        public event EventHandler<UIEventArgs> Source9Button_PressEvent;
        private void onSource9Button_Press(SmartObjectEventArgs eventArgs)
        {
            EventHandler<UIEventArgs> handler = Source9Button_PressEvent;
            if (handler != null)
                handler(this, UIEventArgs.CreateEventArgs(eventArgs));
        }

        /// <inheritdoc/>
        public void AudioRouting_Visibility_fb(AudioRoutingBoolInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].BooleanInput[Joins.Booleans.AudioRouting_Visibility_fbState], this);
            }
        }

        /// <inheritdoc/>
        public void AudioRouting_Visibility_fb(bool digital)
        {
            AudioRouting_Visibility_fb((sig, component) => sig.BoolValue = digital);
        }
        /// <inheritdoc/>
        public void Destination10Button_Selected(AudioRoutingBoolInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].BooleanInput[Joins.Booleans.Destination10Button_SelectedState], this);
            }
        }

        /// <inheritdoc/>
        public void Destination10Button_Selected(bool digital)
        {
            Destination10Button_Selected((sig, component) => sig.BoolValue = digital);
        }
        /// <inheritdoc/>
        public void Destination10Button_Visibility_fb(AudioRoutingBoolInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].BooleanInput[Joins.Booleans.Destination10Button_Visibility_fbState], this);
            }
        }

        /// <inheritdoc/>
        public void Destination10Button_Visibility_fb(bool digital)
        {
            Destination10Button_Visibility_fb((sig, component) => sig.BoolValue = digital);
        }
        /// <inheritdoc/>
        public void Destination10Label_Visibility_fb(AudioRoutingBoolInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].BooleanInput[Joins.Booleans.Destination10Label_Visibility_fbState], this);
            }
        }

        /// <inheritdoc/>
        public void Destination10Label_Visibility_fb(bool digital)
        {
            Destination10Label_Visibility_fb((sig, component) => sig.BoolValue = digital);
        }
        /// <inheritdoc/>
        public void Destination1Button_Selected(AudioRoutingBoolInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].BooleanInput[Joins.Booleans.Destination1Button_SelectedState], this);
            }
        }

        /// <inheritdoc/>
        public void Destination1Button_Selected(bool digital)
        {
            Destination1Button_Selected((sig, component) => sig.BoolValue = digital);
        }
        /// <inheritdoc/>
        public void Destination1Button_Visibility_fb(AudioRoutingBoolInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].BooleanInput[Joins.Booleans.Destination1Button_Visibility_fbState], this);
            }
        }

        /// <inheritdoc/>
        public void Destination1Button_Visibility_fb(bool digital)
        {
            Destination1Button_Visibility_fb((sig, component) => sig.BoolValue = digital);
        }
        /// <inheritdoc/>
        public void Destination1Label_Visibility_fb(AudioRoutingBoolInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].BooleanInput[Joins.Booleans.Destination1Label_Visibility_fbState], this);
            }
        }

        /// <inheritdoc/>
        public void Destination1Label_Visibility_fb(bool digital)
        {
            Destination1Label_Visibility_fb((sig, component) => sig.BoolValue = digital);
        }
        /// <inheritdoc/>
        public void Destination2Button_Selected(AudioRoutingBoolInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].BooleanInput[Joins.Booleans.Destination2Button_SelectedState], this);
            }
        }

        /// <inheritdoc/>
        public void Destination2Button_Selected(bool digital)
        {
            Destination2Button_Selected((sig, component) => sig.BoolValue = digital);
        }
        /// <inheritdoc/>
        public void Destination2Button_Visibility_fb(AudioRoutingBoolInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].BooleanInput[Joins.Booleans.Destination2Button_Visibility_fbState], this);
            }
        }

        /// <inheritdoc/>
        public void Destination2Button_Visibility_fb(bool digital)
        {
            Destination2Button_Visibility_fb((sig, component) => sig.BoolValue = digital);
        }
        /// <inheritdoc/>
        public void Destination2Label_Visibility_fb(AudioRoutingBoolInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].BooleanInput[Joins.Booleans.Destination2Label_Visibility_fbState], this);
            }
        }

        /// <inheritdoc/>
        public void Destination2Label_Visibility_fb(bool digital)
        {
            Destination2Label_Visibility_fb((sig, component) => sig.BoolValue = digital);
        }
        /// <inheritdoc/>
        public void Destination3Button_Selected(AudioRoutingBoolInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].BooleanInput[Joins.Booleans.Destination3Button_SelectedState], this);
            }
        }

        /// <inheritdoc/>
        public void Destination3Button_Selected(bool digital)
        {
            Destination3Button_Selected((sig, component) => sig.BoolValue = digital);
        }
        /// <inheritdoc/>
        public void Destination3Button_Visibility_fb(AudioRoutingBoolInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].BooleanInput[Joins.Booleans.Destination3Button_Visibility_fbState], this);
            }
        }

        /// <inheritdoc/>
        public void Destination3Button_Visibility_fb(bool digital)
        {
            Destination3Button_Visibility_fb((sig, component) => sig.BoolValue = digital);
        }
        /// <inheritdoc/>
        public void Destination3Label_Visibility_fb(AudioRoutingBoolInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].BooleanInput[Joins.Booleans.Destination3Label_Visibility_fbState], this);
            }
        }

        /// <inheritdoc/>
        public void Destination3Label_Visibility_fb(bool digital)
        {
            Destination3Label_Visibility_fb((sig, component) => sig.BoolValue = digital);
        }
        /// <inheritdoc/>
        public void Destination4Button_Selected(AudioRoutingBoolInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].BooleanInput[Joins.Booleans.Destination4Button_SelectedState], this);
            }
        }

        /// <inheritdoc/>
        public void Destination4Button_Selected(bool digital)
        {
            Destination4Button_Selected((sig, component) => sig.BoolValue = digital);
        }
        /// <inheritdoc/>
        public void Destination4Button_Visibility_fb(AudioRoutingBoolInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].BooleanInput[Joins.Booleans.Destination4Button_Visibility_fbState], this);
            }
        }

        /// <inheritdoc/>
        public void Destination4Button_Visibility_fb(bool digital)
        {
            Destination4Button_Visibility_fb((sig, component) => sig.BoolValue = digital);
        }
        /// <inheritdoc/>
        public void Destination4Label_Visibility_fb(AudioRoutingBoolInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].BooleanInput[Joins.Booleans.Destination4Label_Visibility_fbState], this);
            }
        }

        /// <inheritdoc/>
        public void Destination4Label_Visibility_fb(bool digital)
        {
            Destination4Label_Visibility_fb((sig, component) => sig.BoolValue = digital);
        }
        /// <inheritdoc/>
        public void Destination5Button_Selected(AudioRoutingBoolInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].BooleanInput[Joins.Booleans.Destination5Button_SelectedState], this);
            }
        }

        /// <inheritdoc/>
        public void Destination5Button_Selected(bool digital)
        {
            Destination5Button_Selected((sig, component) => sig.BoolValue = digital);
        }
        /// <inheritdoc/>
        public void Destination5Button_Visibility_fb(AudioRoutingBoolInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].BooleanInput[Joins.Booleans.Destination5Button_Visibility_fbState], this);
            }
        }

        /// <inheritdoc/>
        public void Destination5Button_Visibility_fb(bool digital)
        {
            Destination5Button_Visibility_fb((sig, component) => sig.BoolValue = digital);
        }
        /// <inheritdoc/>
        public void Destination5Label_Visibility_fb(AudioRoutingBoolInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].BooleanInput[Joins.Booleans.Destination5Label_Visibility_fbState], this);
            }
        }

        /// <inheritdoc/>
        public void Destination5Label_Visibility_fb(bool digital)
        {
            Destination5Label_Visibility_fb((sig, component) => sig.BoolValue = digital);
        }
        /// <inheritdoc/>
        public void Destination6Button_Selected(AudioRoutingBoolInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].BooleanInput[Joins.Booleans.Destination6Button_SelectedState], this);
            }
        }

        /// <inheritdoc/>
        public void Destination6Button_Selected(bool digital)
        {
            Destination6Button_Selected((sig, component) => sig.BoolValue = digital);
        }
        /// <inheritdoc/>
        public void Destination6Button_Visibility_fb(AudioRoutingBoolInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].BooleanInput[Joins.Booleans.Destination6Button_Visibility_fbState], this);
            }
        }

        /// <inheritdoc/>
        public void Destination6Button_Visibility_fb(bool digital)
        {
            Destination6Button_Visibility_fb((sig, component) => sig.BoolValue = digital);
        }
        /// <inheritdoc/>
        public void Destination6Label_Visibility_fb(AudioRoutingBoolInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].BooleanInput[Joins.Booleans.Destination6Label_Visibility_fbState], this);
            }
        }

        /// <inheritdoc/>
        public void Destination6Label_Visibility_fb(bool digital)
        {
            Destination6Label_Visibility_fb((sig, component) => sig.BoolValue = digital);
        }
        /// <inheritdoc/>
        public void Destination7Button_Selected(AudioRoutingBoolInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].BooleanInput[Joins.Booleans.Destination7Button_SelectedState], this);
            }
        }

        /// <inheritdoc/>
        public void Destination7Button_Selected(bool digital)
        {
            Destination7Button_Selected((sig, component) => sig.BoolValue = digital);
        }
        /// <inheritdoc/>
        public void Destination7Button_Visibility_fb(AudioRoutingBoolInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].BooleanInput[Joins.Booleans.Destination7Button_Visibility_fbState], this);
            }
        }

        /// <inheritdoc/>
        public void Destination7Button_Visibility_fb(bool digital)
        {
            Destination7Button_Visibility_fb((sig, component) => sig.BoolValue = digital);
        }
        /// <inheritdoc/>
        public void Destination7Label_Visibility_fb(AudioRoutingBoolInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].BooleanInput[Joins.Booleans.Destination7Label_Visibility_fbState], this);
            }
        }

        /// <inheritdoc/>
        public void Destination7Label_Visibility_fb(bool digital)
        {
            Destination7Label_Visibility_fb((sig, component) => sig.BoolValue = digital);
        }
        /// <inheritdoc/>
        public void Destination8Button_Selected(AudioRoutingBoolInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].BooleanInput[Joins.Booleans.Destination8Button_SelectedState], this);
            }
        }

        /// <inheritdoc/>
        public void Destination8Button_Selected(bool digital)
        {
            Destination8Button_Selected((sig, component) => sig.BoolValue = digital);
        }
        /// <inheritdoc/>
        public void Destination8Button_Visibility_fb(AudioRoutingBoolInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].BooleanInput[Joins.Booleans.Destination8Button_Visibility_fbState], this);
            }
        }

        /// <inheritdoc/>
        public void Destination8Button_Visibility_fb(bool digital)
        {
            Destination8Button_Visibility_fb((sig, component) => sig.BoolValue = digital);
        }
        /// <inheritdoc/>
        public void Destination8Label_Visibility_fb(AudioRoutingBoolInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].BooleanInput[Joins.Booleans.Destination8Label_Visibility_fbState], this);
            }
        }

        /// <inheritdoc/>
        public void Destination8Label_Visibility_fb(bool digital)
        {
            Destination8Label_Visibility_fb((sig, component) => sig.BoolValue = digital);
        }
        /// <inheritdoc/>
        public void Destination9Button_Selected(AudioRoutingBoolInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].BooleanInput[Joins.Booleans.Destination9Button_SelectedState], this);
            }
        }

        /// <inheritdoc/>
        public void Destination9Button_Selected(bool digital)
        {
            Destination9Button_Selected((sig, component) => sig.BoolValue = digital);
        }
        /// <inheritdoc/>
        public void Destination9Button_Visibility_fb(AudioRoutingBoolInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].BooleanInput[Joins.Booleans.Destination9Button_Visibility_fbState], this);
            }
        }

        /// <inheritdoc/>
        public void Destination9Button_Visibility_fb(bool digital)
        {
            Destination9Button_Visibility_fb((sig, component) => sig.BoolValue = digital);
        }
        /// <inheritdoc/>
        public void Destination9Label_Visibility_fb(AudioRoutingBoolInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].BooleanInput[Joins.Booleans.Destination9Label_Visibility_fbState], this);
            }
        }

        /// <inheritdoc/>
        public void Destination9Label_Visibility_fb(bool digital)
        {
            Destination9Label_Visibility_fb((sig, component) => sig.BoolValue = digital);
        }
        /// <inheritdoc/>
        public void Source10Button_Selected(AudioRoutingBoolInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].BooleanInput[Joins.Booleans.Source10Button_SelectedState], this);
            }
        }

        /// <inheritdoc/>
        public void Source10Button_Selected(bool digital)
        {
            Source10Button_Selected((sig, component) => sig.BoolValue = digital);
        }
        /// <inheritdoc/>
        public void Source10Button_Visibility_fb(AudioRoutingBoolInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].BooleanInput[Joins.Booleans.Source10Button_Visibility_fbState], this);
            }
        }

        /// <inheritdoc/>
        public void Source10Button_Visibility_fb(bool digital)
        {
            Source10Button_Visibility_fb((sig, component) => sig.BoolValue = digital);
        }
        /// <inheritdoc/>
        public void Source11Button_Selected(AudioRoutingBoolInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].BooleanInput[Joins.Booleans.Source11Button_SelectedState], this);
            }
        }

        /// <inheritdoc/>
        public void Source11Button_Selected(bool digital)
        {
            Source11Button_Selected((sig, component) => sig.BoolValue = digital);
        }
        /// <inheritdoc/>
        public void Source11Button_Visibility_fb(AudioRoutingBoolInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].BooleanInput[Joins.Booleans.Source11Button_Visibility_fbState], this);
            }
        }

        /// <inheritdoc/>
        public void Source11Button_Visibility_fb(bool digital)
        {
            Source11Button_Visibility_fb((sig, component) => sig.BoolValue = digital);
        }
        /// <inheritdoc/>
        public void Source12Button_Selected(AudioRoutingBoolInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].BooleanInput[Joins.Booleans.Source12Button_SelectedState], this);
            }
        }

        /// <inheritdoc/>
        public void Source12Button_Selected(bool digital)
        {
            Source12Button_Selected((sig, component) => sig.BoolValue = digital);
        }
        /// <inheritdoc/>
        public void Source12Button_Visibility_fb(AudioRoutingBoolInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].BooleanInput[Joins.Booleans.Source12Button_Visibility_fbState], this);
            }
        }

        /// <inheritdoc/>
        public void Source12Button_Visibility_fb(bool digital)
        {
            Source12Button_Visibility_fb((sig, component) => sig.BoolValue = digital);
        }
        /// <inheritdoc/>
        public void Source1Button_Selected(AudioRoutingBoolInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].BooleanInput[Joins.Booleans.Source1Button_SelectedState], this);
            }
        }

        /// <inheritdoc/>
        public void Source1Button_Selected(bool digital)
        {
            Source1Button_Selected((sig, component) => sig.BoolValue = digital);
        }
        /// <inheritdoc/>
        public void Source1Button_Visibility_fb(AudioRoutingBoolInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].BooleanInput[Joins.Booleans.Source1Button_Visibility_fbState], this);
            }
        }

        /// <inheritdoc/>
        public void Source1Button_Visibility_fb(bool digital)
        {
            Source1Button_Visibility_fb((sig, component) => sig.BoolValue = digital);
        }
        /// <inheritdoc/>
        public void Source2Button_Selected(AudioRoutingBoolInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].BooleanInput[Joins.Booleans.Source2Button_SelectedState], this);
            }
        }

        /// <inheritdoc/>
        public void Source2Button_Selected(bool digital)
        {
            Source2Button_Selected((sig, component) => sig.BoolValue = digital);
        }
        /// <inheritdoc/>
        public void Source2Button_Visibility_fb(AudioRoutingBoolInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].BooleanInput[Joins.Booleans.Source2Button_Visibility_fbState], this);
            }
        }

        /// <inheritdoc/>
        public void Source2Button_Visibility_fb(bool digital)
        {
            Source2Button_Visibility_fb((sig, component) => sig.BoolValue = digital);
        }
        /// <inheritdoc/>
        public void Source3Button_Selected(AudioRoutingBoolInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].BooleanInput[Joins.Booleans.Source3Button_SelectedState], this);
            }
        }

        /// <inheritdoc/>
        public void Source3Button_Selected(bool digital)
        {
            Source3Button_Selected((sig, component) => sig.BoolValue = digital);
        }
        /// <inheritdoc/>
        public void Source3Button_Visibility_fb(AudioRoutingBoolInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].BooleanInput[Joins.Booleans.Source3Button_Visibility_fbState], this);
            }
        }

        /// <inheritdoc/>
        public void Source3Button_Visibility_fb(bool digital)
        {
            Source3Button_Visibility_fb((sig, component) => sig.BoolValue = digital);
        }
        /// <inheritdoc/>
        public void Source4Button_Selected(AudioRoutingBoolInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].BooleanInput[Joins.Booleans.Source4Button_SelectedState], this);
            }
        }

        /// <inheritdoc/>
        public void Source4Button_Selected(bool digital)
        {
            Source4Button_Selected((sig, component) => sig.BoolValue = digital);
        }
        /// <inheritdoc/>
        public void Source4Button_Visibility_fb(AudioRoutingBoolInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].BooleanInput[Joins.Booleans.Source4Button_Visibility_fbState], this);
            }
        }

        /// <inheritdoc/>
        public void Source4Button_Visibility_fb(bool digital)
        {
            Source4Button_Visibility_fb((sig, component) => sig.BoolValue = digital);
        }
        /// <inheritdoc/>
        public void Source5Button_Selected(AudioRoutingBoolInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].BooleanInput[Joins.Booleans.Source5Button_SelectedState], this);
            }
        }

        /// <inheritdoc/>
        public void Source5Button_Selected(bool digital)
        {
            Source5Button_Selected((sig, component) => sig.BoolValue = digital);
        }
        /// <inheritdoc/>
        public void Source5Button_Visibility_fb(AudioRoutingBoolInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].BooleanInput[Joins.Booleans.Source5Button_Visibility_fbState], this);
            }
        }

        /// <inheritdoc/>
        public void Source5Button_Visibility_fb(bool digital)
        {
            Source5Button_Visibility_fb((sig, component) => sig.BoolValue = digital);
        }
        /// <inheritdoc/>
        public void Source6Button_Selected(AudioRoutingBoolInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].BooleanInput[Joins.Booleans.Source6Button_SelectedState], this);
            }
        }

        /// <inheritdoc/>
        public void Source6Button_Selected(bool digital)
        {
            Source6Button_Selected((sig, component) => sig.BoolValue = digital);
        }
        /// <inheritdoc/>
        public void Source6Button_Visibility_fb(AudioRoutingBoolInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].BooleanInput[Joins.Booleans.Source6Button_Visibility_fbState], this);
            }
        }

        /// <inheritdoc/>
        public void Source6Button_Visibility_fb(bool digital)
        {
            Source6Button_Visibility_fb((sig, component) => sig.BoolValue = digital);
        }
        /// <inheritdoc/>
        public void Source7Button_Selected(AudioRoutingBoolInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].BooleanInput[Joins.Booleans.Source7Button_SelectedState], this);
            }
        }

        /// <inheritdoc/>
        public void Source7Button_Selected(bool digital)
        {
            Source7Button_Selected((sig, component) => sig.BoolValue = digital);
        }
        /// <inheritdoc/>
        public void Source7Button_Visibility_fb(AudioRoutingBoolInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].BooleanInput[Joins.Booleans.Source7Button_Visibility_fbState], this);
            }
        }

        /// <inheritdoc/>
        public void Source7Button_Visibility_fb(bool digital)
        {
            Source7Button_Visibility_fb((sig, component) => sig.BoolValue = digital);
        }
        /// <inheritdoc/>
        public void Source8Button_Selected(AudioRoutingBoolInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].BooleanInput[Joins.Booleans.Source8Button_SelectedState], this);
            }
        }

        /// <inheritdoc/>
        public void Source8Button_Selected(bool digital)
        {
            Source8Button_Selected((sig, component) => sig.BoolValue = digital);
        }
        /// <inheritdoc/>
        public void Source8Button_Visibility_fb(AudioRoutingBoolInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].BooleanInput[Joins.Booleans.Source8Button_Visibility_fbState], this);
            }
        }

        /// <inheritdoc/>
        public void Source8Button_Visibility_fb(bool digital)
        {
            Source8Button_Visibility_fb((sig, component) => sig.BoolValue = digital);
        }
        /// <inheritdoc/>
        public void Source9Button_Selected(AudioRoutingBoolInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].BooleanInput[Joins.Booleans.Source9Button_SelectedState], this);
            }
        }

        /// <inheritdoc/>
        public void Source9Button_Selected(bool digital)
        {
            Source9Button_Selected((sig, component) => sig.BoolValue = digital);
        }
        /// <inheritdoc/>
        public void Source9Button_Visibility_fb(AudioRoutingBoolInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].BooleanInput[Joins.Booleans.Source9Button_Visibility_fbState], this);
            }
        }

        /// <inheritdoc/>
        public void Source9Button_Visibility_fb(bool digital)
        {
            Source9Button_Visibility_fb((sig, component) => sig.BoolValue = digital);
        }


        /// <inheritdoc/>
        public void Destination10Button_IndirectRichText(AudioRoutingStringInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].StringInput[Joins.Strings.Destination10Button_IndirectRichTextState], this);
            }
        }

        /// <inheritdoc/>
        public void Destination10Button_IndirectRichText(string serial)
        {
            Destination10Button_IndirectRichText((sig, component) => sig.StringValue = serial);
        }
        /// <inheritdoc/>
        public void Destination10Label_IndirectRichText(AudioRoutingStringInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].StringInput[Joins.Strings.Destination10Label_IndirectRichTextState], this);
            }
        }

        /// <inheritdoc/>
        public void Destination10Label_IndirectRichText(string serial)
        {
            Destination10Label_IndirectRichText((sig, component) => sig.StringValue = serial);
        }
        /// <inheritdoc/>
        public void Destination1Button_IndirectRichText(AudioRoutingStringInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].StringInput[Joins.Strings.Destination1Button_IndirectRichTextState], this);
            }
        }

        /// <inheritdoc/>
        public void Destination1Button_IndirectRichText(string serial)
        {
            Destination1Button_IndirectRichText((sig, component) => sig.StringValue = serial);
        }
        /// <inheritdoc/>
        public void Destination1Label_IndirectRichText(AudioRoutingStringInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].StringInput[Joins.Strings.Destination1Label_IndirectRichTextState], this);
            }
        }

        /// <inheritdoc/>
        public void Destination1Label_IndirectRichText(string serial)
        {
            Destination1Label_IndirectRichText((sig, component) => sig.StringValue = serial);
        }
        /// <inheritdoc/>
        public void Destination2Button_IndirectRichText(AudioRoutingStringInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].StringInput[Joins.Strings.Destination2Button_IndirectRichTextState], this);
            }
        }

        /// <inheritdoc/>
        public void Destination2Button_IndirectRichText(string serial)
        {
            Destination2Button_IndirectRichText((sig, component) => sig.StringValue = serial);
        }
        /// <inheritdoc/>
        public void Destination2Label_IndirectRichText(AudioRoutingStringInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].StringInput[Joins.Strings.Destination2Label_IndirectRichTextState], this);
            }
        }

        /// <inheritdoc/>
        public void Destination2Label_IndirectRichText(string serial)
        {
            Destination2Label_IndirectRichText((sig, component) => sig.StringValue = serial);
        }
        /// <inheritdoc/>
        public void Destination3Button_IndirectRichText(AudioRoutingStringInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].StringInput[Joins.Strings.Destination3Button_IndirectRichTextState], this);
            }
        }

        /// <inheritdoc/>
        public void Destination3Button_IndirectRichText(string serial)
        {
            Destination3Button_IndirectRichText((sig, component) => sig.StringValue = serial);
        }
        /// <inheritdoc/>
        public void Destination3Label_IndirectRichText(AudioRoutingStringInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].StringInput[Joins.Strings.Destination3Label_IndirectRichTextState], this);
            }
        }

        /// <inheritdoc/>
        public void Destination3Label_IndirectRichText(string serial)
        {
            Destination3Label_IndirectRichText((sig, component) => sig.StringValue = serial);
        }
        /// <inheritdoc/>
        public void Destination4Button_IndirectRichText(AudioRoutingStringInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].StringInput[Joins.Strings.Destination4Button_IndirectRichTextState], this);
            }
        }

        /// <inheritdoc/>
        public void Destination4Button_IndirectRichText(string serial)
        {
            Destination4Button_IndirectRichText((sig, component) => sig.StringValue = serial);
        }
        /// <inheritdoc/>
        public void Destination4Label_IndirectRichText(AudioRoutingStringInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].StringInput[Joins.Strings.Destination4Label_IndirectRichTextState], this);
            }
        }

        /// <inheritdoc/>
        public void Destination4Label_IndirectRichText(string serial)
        {
            Destination4Label_IndirectRichText((sig, component) => sig.StringValue = serial);
        }
        /// <inheritdoc/>
        public void Destination5Button_IndirectRichText(AudioRoutingStringInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].StringInput[Joins.Strings.Destination5Button_IndirectRichTextState], this);
            }
        }

        /// <inheritdoc/>
        public void Destination5Button_IndirectRichText(string serial)
        {
            Destination5Button_IndirectRichText((sig, component) => sig.StringValue = serial);
        }
        /// <inheritdoc/>
        public void Destination5Label_IndirectRichText(AudioRoutingStringInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].StringInput[Joins.Strings.Destination5Label_IndirectRichTextState], this);
            }
        }

        /// <inheritdoc/>
        public void Destination5Label_IndirectRichText(string serial)
        {
            Destination5Label_IndirectRichText((sig, component) => sig.StringValue = serial);
        }
        /// <inheritdoc/>
        public void Destination6Button_IndirectRichText(AudioRoutingStringInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].StringInput[Joins.Strings.Destination6Button_IndirectRichTextState], this);
            }
        }

        /// <inheritdoc/>
        public void Destination6Button_IndirectRichText(string serial)
        {
            Destination6Button_IndirectRichText((sig, component) => sig.StringValue = serial);
        }
        /// <inheritdoc/>
        public void Destination6Label_IndirectRichText(AudioRoutingStringInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].StringInput[Joins.Strings.Destination6Label_IndirectRichTextState], this);
            }
        }

        /// <inheritdoc/>
        public void Destination6Label_IndirectRichText(string serial)
        {
            Destination6Label_IndirectRichText((sig, component) => sig.StringValue = serial);
        }
        /// <inheritdoc/>
        public void Destination7Button_IndirectRichText(AudioRoutingStringInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].StringInput[Joins.Strings.Destination7Button_IndirectRichTextState], this);
            }
        }

        /// <inheritdoc/>
        public void Destination7Button_IndirectRichText(string serial)
        {
            Destination7Button_IndirectRichText((sig, component) => sig.StringValue = serial);
        }
        /// <inheritdoc/>
        public void Destination7Label_IndirectRichText(AudioRoutingStringInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].StringInput[Joins.Strings.Destination7Label_IndirectRichTextState], this);
            }
        }

        /// <inheritdoc/>
        public void Destination7Label_IndirectRichText(string serial)
        {
            Destination7Label_IndirectRichText((sig, component) => sig.StringValue = serial);
        }
        /// <inheritdoc/>
        public void Destination8Button_IndirectRichText(AudioRoutingStringInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].StringInput[Joins.Strings.Destination8Button_IndirectRichTextState], this);
            }
        }

        /// <inheritdoc/>
        public void Destination8Button_IndirectRichText(string serial)
        {
            Destination8Button_IndirectRichText((sig, component) => sig.StringValue = serial);
        }
        /// <inheritdoc/>
        public void Destination8Label_IndirectRichText(AudioRoutingStringInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].StringInput[Joins.Strings.Destination8Label_IndirectRichTextState], this);
            }
        }

        /// <inheritdoc/>
        public void Destination8Label_IndirectRichText(string serial)
        {
            Destination8Label_IndirectRichText((sig, component) => sig.StringValue = serial);
        }
        /// <inheritdoc/>
        public void Destination9Button_IndirectRichText(AudioRoutingStringInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].StringInput[Joins.Strings.Destination9Button_IndirectRichTextState], this);
            }
        }

        /// <inheritdoc/>
        public void Destination9Button_IndirectRichText(string serial)
        {
            Destination9Button_IndirectRichText((sig, component) => sig.StringValue = serial);
        }
        /// <inheritdoc/>
        public void Destination9Label_IndirectRichText(AudioRoutingStringInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].StringInput[Joins.Strings.Destination9Label_IndirectRichTextState], this);
            }
        }

        /// <inheritdoc/>
        public void Destination9Label_IndirectRichText(string serial)
        {
            Destination9Label_IndirectRichText((sig, component) => sig.StringValue = serial);
        }
        /// <inheritdoc/>
        public void Source10Button_Icon(AudioRoutingStringInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].StringInput[Joins.Strings.Source10Button_IconState], this);
            }
        }

        /// <inheritdoc/>
        public void Source10Button_Icon(string serial)
        {
            Source10Button_Icon((sig, component) => sig.StringValue = serial);
        }
        /// <inheritdoc/>
        public void Source10Button_IndirectRichText(AudioRoutingStringInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].StringInput[Joins.Strings.Source10Button_IndirectRichTextState], this);
            }
        }

        /// <inheritdoc/>
        public void Source10Button_IndirectRichText(string serial)
        {
            Source10Button_IndirectRichText((sig, component) => sig.StringValue = serial);
        }
        /// <inheritdoc/>
        public void Source11Button_Icon(AudioRoutingStringInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].StringInput[Joins.Strings.Source11Button_IconState], this);
            }
        }

        /// <inheritdoc/>
        public void Source11Button_Icon(string serial)
        {
            Source11Button_Icon((sig, component) => sig.StringValue = serial);
        }
        /// <inheritdoc/>
        public void Source11Button_IndirectRichText(AudioRoutingStringInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].StringInput[Joins.Strings.Source11Button_IndirectRichTextState], this);
            }
        }

        /// <inheritdoc/>
        public void Source11Button_IndirectRichText(string serial)
        {
            Source11Button_IndirectRichText((sig, component) => sig.StringValue = serial);
        }
        /// <inheritdoc/>
        public void Source12Button_Icon(AudioRoutingStringInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].StringInput[Joins.Strings.Source12Button_IconState], this);
            }
        }

        /// <inheritdoc/>
        public void Source12Button_Icon(string serial)
        {
            Source12Button_Icon((sig, component) => sig.StringValue = serial);
        }
        /// <inheritdoc/>
        public void Source12Button_IndirectRichText(AudioRoutingStringInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].StringInput[Joins.Strings.Source12Button_IndirectRichTextState], this);
            }
        }

        /// <inheritdoc/>
        public void Source12Button_IndirectRichText(string serial)
        {
            Source12Button_IndirectRichText((sig, component) => sig.StringValue = serial);
        }
        /// <inheritdoc/>
        public void Source1Button_Icon(AudioRoutingStringInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].StringInput[Joins.Strings.Source1Button_IconState], this);
            }
        }

        /// <inheritdoc/>
        public void Source1Button_Icon(string serial)
        {
            Source1Button_Icon((sig, component) => sig.StringValue = serial);
        }
        /// <inheritdoc/>
        public void Source1Button_IndirectRichText(AudioRoutingStringInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].StringInput[Joins.Strings.Source1Button_IndirectRichTextState], this);
            }
        }

        /// <inheritdoc/>
        public void Source1Button_IndirectRichText(string serial)
        {
            Source1Button_IndirectRichText((sig, component) => sig.StringValue = serial);
        }
        /// <inheritdoc/>
        public void Source2Button_Icon(AudioRoutingStringInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].StringInput[Joins.Strings.Source2Button_IconState], this);
            }
        }

        /// <inheritdoc/>
        public void Source2Button_Icon(string serial)
        {
            Source2Button_Icon((sig, component) => sig.StringValue = serial);
        }
        /// <inheritdoc/>
        public void Source2Button_IndirectRichText(AudioRoutingStringInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].StringInput[Joins.Strings.Source2Button_IndirectRichTextState], this);
            }
        }

        /// <inheritdoc/>
        public void Source2Button_IndirectRichText(string serial)
        {
            Source2Button_IndirectRichText((sig, component) => sig.StringValue = serial);
        }
        /// <inheritdoc/>
        public void Source3Button_Icon(AudioRoutingStringInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].StringInput[Joins.Strings.Source3Button_IconState], this);
            }
        }

        /// <inheritdoc/>
        public void Source3Button_Icon(string serial)
        {
            Source3Button_Icon((sig, component) => sig.StringValue = serial);
        }
        /// <inheritdoc/>
        public void Source3Button_IndirectRichText(AudioRoutingStringInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].StringInput[Joins.Strings.Source3Button_IndirectRichTextState], this);
            }
        }

        /// <inheritdoc/>
        public void Source3Button_IndirectRichText(string serial)
        {
            Source3Button_IndirectRichText((sig, component) => sig.StringValue = serial);
        }
        /// <inheritdoc/>
        public void Source4Button_Icon(AudioRoutingStringInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].StringInput[Joins.Strings.Source4Button_IconState], this);
            }
        }

        /// <inheritdoc/>
        public void Source4Button_Icon(string serial)
        {
            Source4Button_Icon((sig, component) => sig.StringValue = serial);
        }
        /// <inheritdoc/>
        public void Source4Button_IndirectRichText(AudioRoutingStringInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].StringInput[Joins.Strings.Source4Button_IndirectRichTextState], this);
            }
        }

        /// <inheritdoc/>
        public void Source4Button_IndirectRichText(string serial)
        {
            Source4Button_IndirectRichText((sig, component) => sig.StringValue = serial);
        }
        /// <inheritdoc/>
        public void Source5Button_Icon(AudioRoutingStringInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].StringInput[Joins.Strings.Source5Button_IconState], this);
            }
        }

        /// <inheritdoc/>
        public void Source5Button_Icon(string serial)
        {
            Source5Button_Icon((sig, component) => sig.StringValue = serial);
        }
        /// <inheritdoc/>
        public void Source5Button_IndirectRichText(AudioRoutingStringInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].StringInput[Joins.Strings.Source5Button_IndirectRichTextState], this);
            }
        }

        /// <inheritdoc/>
        public void Source5Button_IndirectRichText(string serial)
        {
            Source5Button_IndirectRichText((sig, component) => sig.StringValue = serial);
        }
        /// <inheritdoc/>
        public void Source6Button_Icon(AudioRoutingStringInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].StringInput[Joins.Strings.Source6Button_IconState], this);
            }
        }

        /// <inheritdoc/>
        public void Source6Button_Icon(string serial)
        {
            Source6Button_Icon((sig, component) => sig.StringValue = serial);
        }
        /// <inheritdoc/>
        public void Source6Button_IndirectRichText(AudioRoutingStringInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].StringInput[Joins.Strings.Source6Button_IndirectRichTextState], this);
            }
        }

        /// <inheritdoc/>
        public void Source6Button_IndirectRichText(string serial)
        {
            Source6Button_IndirectRichText((sig, component) => sig.StringValue = serial);
        }
        /// <inheritdoc/>
        public void Source7Button_Icon(AudioRoutingStringInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].StringInput[Joins.Strings.Source7Button_IconState], this);
            }
        }

        /// <inheritdoc/>
        public void Source7Button_Icon(string serial)
        {
            Source7Button_Icon((sig, component) => sig.StringValue = serial);
        }
        /// <inheritdoc/>
        public void Source7Button_IndirectRichText(AudioRoutingStringInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].StringInput[Joins.Strings.Source7Button_IndirectRichTextState], this);
            }
        }

        /// <inheritdoc/>
        public void Source7Button_IndirectRichText(string serial)
        {
            Source7Button_IndirectRichText((sig, component) => sig.StringValue = serial);
        }
        /// <inheritdoc/>
        public void Source8Button_Icon(AudioRoutingStringInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].StringInput[Joins.Strings.Source8Button_IconState], this);
            }
        }

        /// <inheritdoc/>
        public void Source8Button_Icon(string serial)
        {
            Source8Button_Icon((sig, component) => sig.StringValue = serial);
        }
        /// <inheritdoc/>
        public void Source8Button_IndirectRichText(AudioRoutingStringInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].StringInput[Joins.Strings.Source8Button_IndirectRichTextState], this);
            }
        }

        /// <inheritdoc/>
        public void Source8Button_IndirectRichText(string serial)
        {
            Source8Button_IndirectRichText((sig, component) => sig.StringValue = serial);
        }
        /// <inheritdoc/>
        public void Source9Button_Icon(AudioRoutingStringInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].StringInput[Joins.Strings.Source9Button_IconState], this);
            }
        }

        /// <inheritdoc/>
        public void Source9Button_Icon(string serial)
        {
            Source9Button_Icon((sig, component) => sig.StringValue = serial);
        }
        /// <inheritdoc/>
        public void Source9Button_IndirectRichText(AudioRoutingStringInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].StringInput[Joins.Strings.Source9Button_IndirectRichTextState], this);
            }
        }

        /// <inheritdoc/>
        public void Source9Button_IndirectRichText(string serial)
        {
            Source9Button_IndirectRichText((sig, component) => sig.StringValue = serial);
        }

        /// <summary>
        /// ComplexComponent Reset Levels Tab Button
        /// </summary>
        public SLRCTech.BackgroundMusic.AudioRouting.IResetLevelsTabButton ResetLevelsTabButton { get; private set; }

        #endregion

        #region Overrides

        public override int GetHashCode()
        {
            return (int)ControlJoinId;
        }

        public override string ToString()
        {
            return string.Format("Contract: {0} Component: {1} HashCode: {2} {3}", "AudioRouting", GetType().Name, GetHashCode(), UserObject != null ? "UserObject: " + UserObject : null);
        }

        #endregion

        #region IDisposable

        public bool IsDisposed { get; set; }

        public void Dispose()
        {
            if (IsDisposed)
                return;

            IsDisposed = true;

            Destination10Button_PressEvent = null;
            Destination1Button_PressEvent = null;
            Destination2Button_PressEvent = null;
            Destination3Button_PressEvent = null;
            Destination4Button_PressEvent = null;
            Destination5Button_PressEvent = null;
            Destination6Button_PressEvent = null;
            Destination7Button_PressEvent = null;
            Destination8Button_PressEvent = null;
            Destination9Button_PressEvent = null;
            Source10Button_PressEvent = null;
            Source11Button_PressEvent = null;
            Source12Button_PressEvent = null;
            Source1Button_PressEvent = null;
            Source2Button_PressEvent = null;
            Source3Button_PressEvent = null;
            Source4Button_PressEvent = null;
            Source5Button_PressEvent = null;
            Source6Button_PressEvent = null;
            Source7Button_PressEvent = null;
            Source8Button_PressEvent = null;
            Source9Button_PressEvent = null;
        }

        #endregion
    }
}
